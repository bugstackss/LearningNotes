import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,a as t}from"./app.9b10ba0a.js";const e="/assets/a5db5d1065ea163bfe9dfcca4f291ac6.635b3fb4.png",p={},o=t(`<h2 id="_04、jpa四大状态" tabindex="-1"><a class="header-anchor" href="#_04、jpa四大状态" aria-hidden="true">#</a> 04、JPA四大状态</h2><blockquote><p>JPA的四种状态</p></blockquote><ul><li>临时状态：刚创建出来，没有与entityManager发生关系，没有被持久化，不处于entityManager中的对象。</li><li>持久状态：与entityManager发生关系，已经被持久化，您可以把持久化状态当做实实在在的数据库记录。</li><li>删除状态：执行remove方法，事务提交之前。</li><li>游离状态：游离状态就是提交到数据库后，事务commit后实体的状态，应为事务已经提交了，此时实体的属性任你如何改变，也不会同步到数据库，因为游离是没人管的孩子，不在持久化上下文中。</li></ul><p>使用代码进行演示，帮助理解：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 游离状态
 */</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">EntityManager</span> entityManager <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">createEntityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">EntityTransaction</span> transaction <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    transaction<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Customer</span> customer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 临时状态（瞬时状态）</span>
    customer<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">5l</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 游离状态</span>

    customer <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token class-name">Customer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token number">6L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 持久状态</span>

    entityManager<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删除状态（销毁状态）</span>
    transaction<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如图所示：</p><p><img src="`+e+`" alt="img"></p><ul><li><strong>public void persist(Object entity)</strong><ul><li>persist方法可以将实例转换为managed（托管）状态。在调用flush()方法或者提交事务之后，实例将会被插入到数据库中！</li></ul></li></ul><p>对不同状态下的实例A，persist会产生以下操作：</p><ol><li>如果A是一个new状态的实体，它会转为managed状态</li><li>如果A是一个managed状态的实体，它的状态不会发生任何改变。但是系统仍会在数据库执行INSERT操作！</li><li>如果A是一个removed（删除）状态的实体，他将会转换为受控状态！（就是不会再去执行了！）</li><li>如果A是一个detached（分离）状态的实体，该方法会抛出IllegalArgumentException异常，具体异常根据不同的 JPA 实现有关！</li></ol><ul><li><strong>public void merge(Object entity)</strong><ul><li>merge方法的主要作用是将用户对一个detached状态实体的修改进行归档，归档后产生一个新的managed状态对象。</li></ul></li></ul><p>对不同状态下的实例A，merge会产生一下操作：</p><ol><li>如果A是个detached状态的实体， 该方法会将A的修改提交到数据库，并返回一个新的managed状态的实例A2:</li><li><strong>如果A是个new状态的实体， 该方法会产生个根据A广 生的managed状态实体A2;</strong></li><li>如果A是个managed状态的实体， 它的状态不会发生任何改变。但是系统仍会在数据库执行UPDATE操作:</li><li>如果A是个removed状态的实体， 该方法会 抛出IllegalArgumentException异常。</li></ol><ul><li><strong>public void refresh(Object entity)</strong><ul><li>refresh方法可以保证当前的实例与数据库中的实例的内容致。</li></ul></li></ul><p>对 不同状态下的实例A. refresh会产生以下操作:</p><ol><li>如果A是- 个new状态的实例，不会发生任何操作， 但有可能会抛出异常，具体情况根据不同JPA实现有关！</li><li>如果A是一个managed状态的实例，它的属性将会和数据库中的数据同步。</li><li>如果A是个removed状态的实例， 该方法将会抛出异常Entity not managed</li><li>如果A是一个detached状态的实体，该方法会抛出异常。</li></ol><ul><li>public void remove(Object entity) <ul><li>remove方法可以将实体转换为removed状态，并且在调用flush()方法或提交事物后删除数据库中的数据。</li></ul></li></ul><p>对不同状态下的实例A. remove会产生以下操作:</p><ol><li><p>如果A是一个new状态的实例，A的状态不会发生任何改变，但系统仍会在数据库中执行DELETE语句;</p></li><li><p>如果A是个managed状态的实例， 它的状态 会转换为removed;</p></li><li><p>如果A是个removed状 态的实例，不会发生任何操作:</p></li><li><p>如果A是个detached状态的实体， 该方法将会抛出异常。</p></li></ol><blockquote><p>缓存测试</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 缓存测试
 */</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">EntityManager</span> entityManager <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">createEntityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">EntityTransaction</span> transaction <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    transaction<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  	<span class="token comment">// 这里的缓存是一级缓存，只查询了一次！</span>
    <span class="token class-name">Customer</span> customer <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token class-name">Customer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token number">3L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Customer</span> customer2 <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token class-name">Customer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token number">3L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    transaction<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21),c=[o];function i(l,u){return s(),a("div",null,c)}const k=n(p,[["render",i],["__file","04、JPA四大状态.html.vue"]]);export{k as default};
