import{_ as i}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as p,c as o,d as n,e as a,b as e,a as t,r as l}from"./app.9b10ba0a.js";const r={},c=t(`<h2 id="_01、spring-data简介" tabindex="-1"><a class="header-anchor" href="#_01、spring-data简介" aria-hidden="true">#</a> 01、Spring Data简介</h2><h3 id="_1-1、简介" tabindex="-1"><a class="header-anchor" href="#_1-1、简介" aria-hidden="true">#</a> 1.1、简介</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Spring Data’s mission is to provide a familiar and consistent, Spring-based programming model for data access while still retaining the special traits of the underlying data store.

It makes it easy to use data access technologies, relational and non-relational databases, map-reduce frameworks, and cloud-based data services. This is an umbrella project which contains many subprojects that are specific to a given database. The projects are developed by working together with many of the companies and developers that are behind these exciting technologies.

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Spring Data 的任务是为数据访问提供一个熟悉的、一致的、基于 Spring 的编程模型，同时保留底层数据存储的特性。</p><p>它使得使用数据访问技术、关系和非关系数据库、 map-reduce 框架和基于云的数据服务变得容易。**这是一个总括项目，其中包含许多特定于给定数据库的子项目。**这些项目是通过与这些令人兴奋的技术背后的许多公司和开发人员合作开发的。</p></blockquote><p>简单来说，可以理解为：</p><p><strong>Spring Data致力为数据访问（Dao）提供熟悉且一致的基于Spring的编程模板：</strong></p><p>对于每种持久性存储，您的 Dao 通常需要为不同存储库提供不同 CRUD （创建-读取-更新-删除）持久化操作！Spring Data为这些持久化存储以及特定实现提供了通用接口（CrudRepository、PagingAndSortingRepository）和模板（jdbcTemplate、redisTemplate、RestTemplate、MongoTemplate….）！</p><p><strong>其目的是统一和简化对不同类型持久化存储（关系型数据库和 NoSQL数据存储）的访问！</strong></p>`,8),d=n("p",null,"官网地址：",-1),u={href:"https://spring.io/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://hibernate.org/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/spring-projects",target:"_blank",rel:"noopener noreferrer"},g=t(`<h3 id="_1-2、spring-data-主要模块" tabindex="-1"><a class="header-anchor" href="#_1-2、spring-data-主要模块" aria-hidden="true">#</a> 1.2、Spring Data 主要模块</h3><p>Spring Data 支持的持久层技术非常多，如下所示：</p><ul><li>Spring Data Commons - 支撑每个 Spring 数据模块的核心 Spring 概念。</li><li>Spring Data JDBC - 对 JDBC 的 Spring Data 存储库支持。</li><li>Spring Data JDBC Ext - 支持特定于数据库的标准 JDBC 扩展，包括支持 Oracle RAC 快速连接故障转移、支持 AQ JMS 和支持使用高级数据类型。</li><li>Spring Data JPA - Spring Data 存储库对 JPA 的支持。</li><li>Spring Data KeyValue - Map基于映射的存储库和 SPI，可以轻松地为键值存储构建 Spring Data 模块。</li><li>Spring Data LDAP - SpringData 存储库对 SpringLDAP 的支持。</li><li>Spring Data MongoDB - MongoDB 基于 Spring 的对象文档支持和存储库。</li><li>Spring Data Redis - 从 Spring 应用程序轻松配置和访问 Redis。</li><li>Spring Data REST - 将 Spring Data 存储库作为超媒体驱动的 RESTful 资源导出。</li><li>Spring Data for Apache Cassandra - 易于配置和访问 Cassandra 或大规模、高可用性、面向数据的 Spring 应用程序。</li><li>Spring Data for Apache Geode - 为高度一致、低延迟、面向数据的 Spring 应用程序轻松配置和访问 ApacheGeode。</li><li>Spring Data for Apache Solr - 为面向搜索的 Spring 应用程序轻松配置和访问 ApacheSolr。</li><li>Spring Data for Pivotal GemFire - 易于配置和访问枢纽 GemFire 为您的高度一致性，低延迟/高吞吐量，面向数据的 Spring 应用程序。</li><li>……</li></ul><h3 id="_1-3、features-特性" tabindex="-1"><a class="header-anchor" href="#_1-3、features-特性" aria-hidden="true">#</a> 1.3、Features（特性）</h3><ol><li>强大的repository仓储和自定义对象映射ORM抽象</li><li>从repository方法名称派生动态查询接口</li><li>实现Domain域基类提供基本属性</li><li>支持透明审计日志（创建，最后更改）</li><li>可以自定义repository代码</li><li>通过JavaConfig和自定义XML命名空间轻松实现 Spring集成</li><li>与Spring MVC控制器的高级集成</li><li>跨库持久性的实验支持</li></ol><ul><li>模板制作 <ul><li>mongoTemplate、redisTemplate、jdbcTemplate……</li></ul></li></ul><blockquote><p>模板提供存贮特定操作，例如保存、更新和删除单个记录或用于执行查询或映射/减少作业。</p><p>Spring Data JPA不提供模板，因为JPA实现本身已经是 JDBC API 之上的抽象层。JPA 的 EntityManager 是模板的对应物。异物转换由存储库实现处理。</p></blockquote><ul><li>对象/数据存储映射</li></ul><p>可以通过xml或者注解进行对象关系映射</p><h4 id="一、jpa" tabindex="-1"><a class="header-anchor" href="#一、jpa" aria-hidden="true">#</a> 一、JPA</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span>
<span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;TUSR&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    
    <span class="token annotation punctuation">@Id</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>
    
    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;fn&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    
    <span class="token keyword">private</span> <span class="token class-name">Date</span> gmt_create<span class="token punctuation">;</span>
    
    <span class="token annotation punctuation">@OneToMany</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Role</span><span class="token punctuation">&gt;</span></span> roles<span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="二、mongodb" tabindex="-1"><a class="header-anchor" href="#二、mongodb" aria-hidden="true">#</a> 二、MongoDB</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Document</span><span class="token punctuation">(</span>collection<span class="token operator">=</span><span class="token string">&quot;usr&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Id</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span><span class="token string">&quot;fn&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Date</span> gmt_create<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Role</span><span class="token punctuation">&gt;</span></span> roles<span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="三、neo4j" tabindex="-1"><a class="header-anchor" href="#三、neo4j" aria-hidden="true">#</a> 三、Neo4J</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@NodeEntity</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Graphld</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

		<span class="token annotation punctuation">@RelatedTo</span><span class="token punctuation">(</span>type<span class="token operator">=</span><span class="token string">&quot;has&quot;</span><span class="token punctuation">,</span>direction<span class="token operator">=</span><span class="token class-name">Direction</span><span class="token punctuation">.</span><span class="token constant">OUTGOING</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Role</span><span class="token punctuation">&gt;</span></span> roles<span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-4、repository-支持" tabindex="-1"><a class="header-anchor" href="#_1-4、repository-支持" aria-hidden="true">#</a> 1.4、Repository 支持</h3><p>Repository 提供了最基本的数据访问功能，其几个子接口则扩展了一些功能。他们的继承关系如下：</p><p>Repository ：仅仅是一个标识，表名任何继承它的均为仓库接口类。</p><ul><li>CrudRepository：继承 Repository，实现了一组 CRUD 相关的方法</li><li>PagingAndSortingRepository：继承 CrudRepository，实现了一组分页排序相关的方法</li><li>JpaRepository：继承 PagingAndSortingRepository，实现一组 API规范相关的方法</li><li>……</li></ul><p>自定义的 Repository 只需继承 XxxxRepository，这样自定义的 Repository 接口就具备了通用的数据访问控制层的能力。</p>`,20);function m(h,b){const s=l("ExternalLinkIcon");return p(),o("div",null,[c,n("blockquote",null,[d,n("p",null,[a("spring："),n("a",u,[a("https://spring.io/"),e(s)])]),n("p",null,[a("hibernate："),n("a",v,[a("https://hibernate.org/"),e(s)])]),n("p",null,[a("github："),n("a",k,[a("https://github.com/spring-projects"),e(s)])])]),g])}const D=i(r,[["render",m],["__file","01、Spring Data简介.html.vue"]]);export{D as default};
