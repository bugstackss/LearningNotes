import{_ as t}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as e,c as p,d as n,e as l,b as i,a,r as c}from"./app.9b10ba0a.js";const o="/assets/0473331bc7a14971993d6f70b3a66f12.e2c7361f.png",u="/assets/df11fe17ac9d43e2942f8f3d97d44c7b.c0fa225e.png",r="/assets/0ceac01517434ce2a4e5bcea6296bc18.ab8fd492.png",d="/assets/1af467c7bf1049829eb234d06e0ec4c1.87edb405.png",k={},g=a('<h1 id="_16、过滤器" tabindex="-1"><a class="header-anchor" href="#_16、过滤器" aria-hidden="true">#</a> 16、过滤器</h1><h2 id="一、过滤器简介" tabindex="-1"><a class="header-anchor" href="#一、过滤器简介" aria-hidden="true">#</a> 一、过滤器简介</h2><h3 id="_1、通过类比了解过滤器作用" tabindex="-1"><a class="header-anchor" href="#_1、通过类比了解过滤器作用" aria-hidden="true">#</a> 1、通过类比了解过滤器作用</h3><h4 id="_1坐地铁" tabindex="-1"><a class="header-anchor" href="#_1坐地铁" aria-hidden="true">#</a> ①坐地铁</h4><p><img src="'+o+'" alt="image.png"></p><h4 id="_2登录检查" tabindex="-1"><a class="header-anchor" href="#_2登录检查" aria-hidden="true">#</a> ②登录检查</h4><p><img src="'+u+'" alt="image.png"></p><h3 id="_2、过滤器的三要素" tabindex="-1"><a class="header-anchor" href="#_2、过滤器的三要素" aria-hidden="true">#</a> 2、过滤器的三要素</h3><h4 id="_1拦截" tabindex="-1"><a class="header-anchor" href="#_1拦截" aria-hidden="true">#</a> ①拦截</h4><p>过滤器之所以能够对请求进行预处理，关键是对请求进行拦截，把请求拦截下来才能够做后续的操作。而且对于一个具体的过滤器，它必须明确它要拦截的请求，而不是所有请求都拦截。</p><h4 id="_2过滤" tabindex="-1"><a class="header-anchor" href="#_2过滤" aria-hidden="true">#</a> ②过滤</h4><p>根据业务功能实际的需求，看看在把请求拦截到之后，需要做什么检查或什么操作，写对应的代码即可。</p><h4 id="_3放行" tabindex="-1"><a class="header-anchor" href="#_3放行" aria-hidden="true">#</a> ③放行</h4><p>过滤器完成自己的任务或者是检测到当前请求符合过滤规则，那么可以将请求放行。所谓放行，就是让请求继续去访问它原本要访问的资源。</p><blockquote><p>友情提示：将来学习SpringMVC时，会学习SpringMVC中的『拦截器』，同样具备三要素。</p></blockquote><h2 id="二、helloword" tabindex="-1"><a class="header-anchor" href="#二、helloword" aria-hidden="true">#</a> 二、HelloWord</h2><h3 id="_1、思路" tabindex="-1"><a class="header-anchor" href="#_1、思路" aria-hidden="true">#</a> 1、思路</h3><p><img src="'+r+`" alt="image.png"></p><h3 id="_2、操作步骤" tabindex="-1"><a class="header-anchor" href="#_2、操作步骤" aria-hidden="true">#</a> 2、操作步骤</h3><h4 id="_1准备工作" tabindex="-1"><a class="header-anchor" href="#_1准备工作" aria-hidden="true">#</a> ①准备工作</h4><ul><li>创建module</li><li>加入Thymeleaf环境</li><li>完成首页访问功能</li><li>创建Target01Servlet以及target01.html</li><li>创建SpecialServlet以及special.html</li></ul><h4 id="_2创建filter" tabindex="-1"><a class="header-anchor" href="#_2创建filter" aria-hidden="true">#</a> ②创建Filter</h4><h5 id="_1-创建target01filter类" tabindex="-1"><a class="header-anchor" href="#_1-创建target01filter类" aria-hidden="true">#</a> [1]创建Target01Filter类</h5><ul><li>要点1：实现javax.servlet.Filter接口</li><li>要点2：在doFilter()方法中执行过滤</li><li>要点3：如果满足过滤条件使用 chain.doFilter(request, response);放行</li><li>要点4：如果不满足过滤条件转发或重定向请求 <ul><li>附带问题：Thymeleaf模板渲染。这里我们选择的解决办法是跳转到一个Servlet，由Servlet负责执行模板渲染返回页面。</li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Target01Filter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>

        <span class="token comment">// 1.打印一句话表明Filter执行了</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;过滤器执行：Target01Filter&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 2.检查是否满足过滤条件</span>
        <span class="token comment">// 人为设定一个过滤条件：请求参数message是否等于monster</span>
        <span class="token comment">// 等于：放行</span>
        <span class="token comment">// 不等于：将请求跳转到另外一个页面</span>
        <span class="token comment">// ①获取请求参数</span>
        <span class="token class-name">String</span> message <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// ②检查请求参数是否等于monster</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;monster&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

            <span class="token comment">// ③执行放行</span>
            <span class="token comment">// FilterChain对象代表过滤器链</span>
            <span class="token comment">// chain.doFilter(request, response)方法效果：将请求放行到下一个Filter，</span>
            <span class="token comment">// 如果当前Filter已经是最后一个Filter了，那么就将请求放行到原本要访问的目标资源</span>
            chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>

            <span class="token comment">// ④跳转页面</span>
            request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">&quot;/SpecialServlet?method=toSpecialPage&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-配置target01filter类" tabindex="-1"><a class="header-anchor" href="#_2-配置target01filter类" aria-hidden="true">#</a> [2]配置Target01Filter类</h5><blockquote><p>这一步也可以叫『注册』。</p></blockquote><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 配置Target01Filter --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 配置Filter的友好名称 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>Target01Filter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- 配置Filter的全类名，便于Servlet容器创建Filter对象 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">&gt;</span></span>com.atguigu.filter.filter.Target01Filter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 配置Filter要拦截的目标资源 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 指定这个mapping对应的Filter名称 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>Target01Filter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- 通过请求地址模式来设置要拦截的资源 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/Target01Servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、过滤器生命周期" tabindex="-1"><a class="header-anchor" href="#三、过滤器生命周期" aria-hidden="true">#</a> 三、过滤器生命周期</h2><h3 id="_1、回顾servlet生命周期" tabindex="-1"><a class="header-anchor" href="#_1、回顾servlet生命周期" aria-hidden="true">#</a> 1、回顾Servlet生命周期</h3>`,30),m={href:"http://heavy_code_industry.gitee.io/code_heavy_industry/pro001-javaweb/lecture/chapter07/verse03.html",target:"_blank",rel:"noopener noreferrer"},v=a(`<h3 id="_2、filter生命周期" tabindex="-1"><a class="header-anchor" href="#_2、filter生命周期" aria-hidden="true">#</a> 2、Filter生命周期</h3><p>和Servlet生命周期类比，Filter生命周期的关键区别是：<strong>在Web应用启动时创建对象</strong></p><table><thead><tr><th>生命周期阶段</th><th>执行时机</th><th>执行次数</th></tr></thead><tbody><tr><td>创建对象</td><td>Web应用启动时</td><td>一次</td></tr><tr><td>初始化</td><td>创建对象后</td><td>一次</td></tr><tr><td>拦截请求</td><td>接收到匹配的请求</td><td>多次</td></tr><tr><td>销毁</td><td>Web应用卸载前</td><td>一次</td></tr></tbody></table><h2 id="四、过滤器匹配规则" tabindex="-1"><a class="header-anchor" href="#四、过滤器匹配规则" aria-hidden="true">#</a> 四、过滤器匹配规则</h2><p>本节要探讨的是在filter-mapping中如何将Filter同它要拦截的资源关联起来。</p><h3 id="_1、精确匹配" tabindex="-1"><a class="header-anchor" href="#_1、精确匹配" aria-hidden="true">#</a> 1、精确匹配</h3><p>指定被拦截资源的完整路径：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 配置Filter要拦截的目标资源 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 指定这个mapping对应的Filter名称 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>Target01Filter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- 通过请求地址模式来设置要拦截的资源 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/Target01Servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、模糊匹配" tabindex="-1"><a class="header-anchor" href="#_2、模糊匹配" aria-hidden="true">#</a> 2、模糊匹配</h3><p>相比较精确匹配，使用模糊匹配可以让我们创建一个Filter就能够覆盖很多目标资源，不必专门为每一个目标资源都创建Filter，提高开发效率。</p><h4 id="_1前杠后星" tabindex="-1"><a class="header-anchor" href="#_1前杠后星" aria-hidden="true">#</a> ①前杠后星</h4><p>在我们配置了url-pattern为/user/*之后，请求地址只要是/user开头的那么就会被匹配。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>Target02Filter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- 模糊匹配：前杠后星 --&gt;</span>
    <span class="token comment">&lt;!--
        /user/Target02Servlet
        /user/Target03Servlet
        /user/Target04Servlet
    --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/user/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>极端情况：/*匹配所有请求</strong></p><h4 id="_2前星后缀" tabindex="-1"><a class="header-anchor" href="#_2前星后缀" aria-hidden="true">#</a> ②前星后缀</h4><p>下面我们使用png图片来测试后缀拦截的效果，并不是只能拦截png扩展名。</p><h5 id="_1-创建一组img标签" tabindex="-1"><a class="header-anchor" href="#_1-创建一组img标签" aria-hidden="true">#</a> [1]创建一组img标签</h5><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@{/././images/img017.png}<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@{/././images/img018.png}<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@{/././images/img019.png}<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@{/././images/img020.png}<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@{/././images/img024.png}<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@{/././images/img025.png}<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-创建filter" tabindex="-1"><a class="header-anchor" href="#_2-创建filter" aria-hidden="true">#</a> [2]创建Filter</h5><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>Target04Filter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">&gt;</span></span>com.atguigu.filter.filter.Target04Filter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>Target04Filter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>*.png<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3前杠后缀-星号在中间" tabindex="-1"><a class="header-anchor" href="#_3前杠后缀-星号在中间" aria-hidden="true">#</a> ③前杠后缀，星号在中间</h4><p>配置方式如下：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/*.png<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>按照这个配置启动Web应用时会抛出异常：</p><blockquote><p>java.lang.IllegalArgumentException: Invalid /*.png in filter mapping</p></blockquote><p>**结论：这么配是*<em>不允许*<em>的！</em></em></p><h3 id="_3、匹配servlet名称-了解" tabindex="-1"><a class="header-anchor" href="#_3、匹配servlet名称-了解" aria-hidden="true">#</a> 3、匹配Servlet名称[了解]</h3><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>Target05Filter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- 根据Servlet名称匹配 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>Target01Servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="五、过滤器链" tabindex="-1"><a class="header-anchor" href="#五、过滤器链" aria-hidden="true">#</a> 五、过滤器链</h2><h3 id="_1、概念" tabindex="-1"><a class="header-anchor" href="#_1、概念" aria-hidden="true">#</a> 1、概念</h3><ul><li>多个Filter的<strong>拦截范围</strong>如果存在<strong>重合部分</strong>，那么这些Filter会形成<strong>Filter链</strong>。</li><li>浏览器请求重合部分对应的目标资源时，会<strong>依次经过</strong>Filter链中的每一个Filter。</li><li>Filter链中每一个Filter执行的<strong>顺序是由web.xml中filter-mapping配置的顺序决定</strong>的。</li></ul><p><img src="`+d+`" alt="image.png"></p><h3 id="_2、测试" tabindex="-1"><a class="header-anchor" href="#_2、测试" aria-hidden="true">#</a> 2、测试</h3><h4 id="_1准备工作-1" tabindex="-1"><a class="header-anchor" href="#_1准备工作-1" aria-hidden="true">#</a> ①准备工作</h4><p>创建超链接访问一个普通的Servlet即可。</p><h4 id="_2创建多个filter拦截servlet" tabindex="-1"><a class="header-anchor" href="#_2创建多个filter拦截servlet" aria-hidden="true">#</a> ②创建多个Filter拦截Servlet</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>TargetChain03Filter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/Target05Servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>TargetChain02Filter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/Target05Servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>TargetChain01Filter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/Target05Servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>控制台打印效果：</p><blockquote><p>过滤器执行：Target03Filter[模糊匹配 前杠后星 /*] 测试Filter链：TargetChain03Filter 测试Filter链：TargetChain02Filter 测试Filter链：TargetChain01Filter</p></blockquote>`,39);function h(b,f){const s=c("ExternalLinkIcon");return e(),p("div",null,[g,n("p",null,[n("a",m,[l("Servlet生命周期"),i(s)])]),v])}const F=t(k,[["render",h],["__file","16、过滤器.html.vue"]]);export{F as default};
