import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as l,c as r,d as e,e as a,b as t,a as s,r as d}from"./app.9b10ba0a.js";const o="/assets/image-20230410222125692.1b89b35c.png",c="/assets/image-20230410222927657.efcd6adb.png",p="/assets/image-20230410222949843.ec2b2f9e.png",b="/assets/image-20230410223005762.af8f0a98.png",u="/assets/image-20230410223019005.f6bd63fb.png",m="/assets/image-20230410223108470.e517a94d.png",h="/assets/image-20230410223232546.9aeaf242.png",v="/assets/image-20230410223821712.dd6f6310.png",g="/assets/image-20230410223926784.87496ebf.png",_="/assets/image-20230410223950014.ae20f965.png",k="/assets/image-20230410224008678.4e0acd5e.png",x="/assets/image-20230410224046319.caecb2c2.png",f="/assets/image-20230410224106768.44cf000d.png",q="/assets/image-20230410224153614.71417f41.png",y="/assets/image-20230410224220026.b4394c52.png",Q="/assets/image-20230410224403955.d0070f39.png",B="/assets/image-20230410224433913.0e41da66.png",M="/assets/image-20230410224448727.bcdaec6f.png",R={},A=s(`<h2 id="_01、clustering" tabindex="-1"><a class="header-anchor" href="#_01、clustering" aria-hidden="true">#</a> 01、clustering</h2><h3 id="使用集群的原因" tabindex="-1"><a class="header-anchor" href="#使用集群的原因" aria-hidden="true">#</a> 使用集群的原因</h3><p>最开始我们介绍了如何安装及运行RabbitMQ服务，不过这些是单机版的，无法满足目前真实应用的要求。如果RabbitMQ服务器遇到内存崩溃、机器掉电或者主板故障等情况，该怎么办？单台RabbitMQ服务器可以满足每秒1000条消息的吞吐量，那么如果应用需要RabbitMQ服务满足每秒10万条消息的吞吐量呢？购买昂贵的服务器来增强单机RabbitMQ务的性能显得捉襟见肘，搭建一个RabbitMQ集群才是解决实际问题的关键。</p><h3 id="搭建步骤" tabindex="-1"><a class="header-anchor" href="#搭建步骤" aria-hidden="true">#</a> 搭建步骤</h3><ol><li>修改3台机器的主机名称</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vim</span>	/etc/hostname
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>配置各个节点的hosts文件，让各个节点都能互相识别对方</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vim</span>	/etc/hosts

<span class="token number">10.211</span>.55.74	node1
<span class="token number">10.211</span>.55.75	node2
<span class="token number">10.211</span>.55.76	node3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+o+`" alt="image-20230410222125692"></p><ol start="3"><li>以确保各个节点的cookie文件使用的是同一个值</li></ol><p>在node1上执行远程操作命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">scp</span> /var/lib/rabbitmq/.erlang.cookie root@node2:/var/lib/rabbitmq/.erlang.cookie

<span class="token function">scp</span>
/var/lib/rabbitmq/.erlang.cookie
root@node3:/var/lib/rabbitmq/.erlang.cookie
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>启动RabbitMQ服务,顺带启动Erlang虚拟机和RbbitMQ应用服务(在三台节点上分别执行以下命令)</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmq-server	<span class="token parameter variable">-detached</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="5"><li>在节点2执行</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl	stop_app

<span class="token comment"># (rabbitmqctl stop会将Erlang虚拟机关闭，rabbitmqctl stop_app只关闭RabbitMQ服务)</span>

rabbitmqctl reset

rabbitmqctl join_cluster rabbit@node1

rabbitmqctl start_app<span class="token punctuation">(</span>只启动应用服务<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li>在节点3执行</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl stop_app
rabbitmqctl reset
rabbitmqctl join_cluster rabbit@node2
rabbitmqctl	start_app
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="7"><li>集群状态</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl cluster_status
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="8"><li>需要重新设置用户</li></ol><p>创建账号</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl add_user admin <span class="token number">123</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>设置用户角色</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl	set_user_tags admin administrator
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>设置用户权限</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl set_permissions <span class="token parameter variable">-p</span> <span class="token string">&quot;/&quot;</span> admin <span class="token string">&quot;.*&quot;</span> <span class="token string">&quot;.*&quot;</span> <span class="token string">&quot;.*&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="9"><li>解除集群节点(node2和node3机器分别执行)</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl	stop_app
rabbitmqctl reset
rabbitmqctl start_app
rabbitmqctl	cluster_status
rabbitmqctl	forget_cluster_node rabbit@node2<span class="token punctuation">(</span>node1机器上执行<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_02、镜像队列" tabindex="-1"><a class="header-anchor" href="#_02、镜像队列" aria-hidden="true">#</a> 02、镜像队列</h2><h3 id="使用镜像的原因" tabindex="-1"><a class="header-anchor" href="#使用镜像的原因" aria-hidden="true">#</a> 使用镜像的原因</h3><p>如果RabbitMQ集群中只有一个Broker节点，那么该节点的失效将导致整体服务的临时性不可用，并且也可能会导致消息的丢失。可以将所有消息都设置为持久化，并且对应队列的durable属性也设置为true，但是这样仍然无法避免由于缓存导致的问题：因为消息在发送之后和被写入磁盘井执行刷盘动作之间存在一个短暂却会产生问题的时间窗。通过publisherconfirm机制能够确保客户端知道哪些消息己经存入磁盘，尽管如此，一般不希望遇到因单点故障导致的服务不可用。</p><p>引入镜像队列(MirrorQueue)的机制，可以将队列镜像到集群中的其他Broker节点之上，如果集群中的一个节点失效了，队列能自动地切换到镜像中的另一个节点上以保证服务的可用性。</p><h3 id="搭建步骤-1" tabindex="-1"><a class="header-anchor" href="#搭建步骤-1" aria-hidden="true">#</a> 搭建步骤</h3><ol><li><p>启动三台集群节点</p></li><li><p>随便找一个节点添加policy</p></li></ol><p><img src="`+c+'" alt="image-20230410222927657"></p><ol start="3"><li>在node1上创建一个队列发送一条消息，队列存在镜像队列</li></ol><p><img src="'+p+'" alt="image-20230410222949843"></p><ol start="4"><li>停掉node1之后发现node2成为镜像队列</li></ol><p><img src="'+b+'" alt="image-20230410223005762"></p><p><img src="'+u+'" alt="image-20230410223019005"></p><ol start="5"><li>就算整个集群只剩下一台机器了依然能消费队列里面的消息</li></ol><blockquote><p>说明队列里面的消息被镜像队列传递到相应机器里面了</p></blockquote><h2 id="_03、haproxy-keepalive实现高可用负载均衡" tabindex="-1"><a class="header-anchor" href="#_03、haproxy-keepalive实现高可用负载均衡" aria-hidden="true">#</a> 03、Haproxy+Keepalive实现高可用负载均衡</h2><h3 id="整体架构图" tabindex="-1"><a class="header-anchor" href="#整体架构图" aria-hidden="true">#</a> 整体架构图</h3><p><img src="'+m+'" alt="image-20230410223108470"></p><h3 id="haproxy实现负载均衡" tabindex="-1"><a class="header-anchor" href="#haproxy实现负载均衡" aria-hidden="true">#</a> Haproxy实现负载均衡</h3><p>HAProxy提供高可用性、负载均衡及基于TCPHTTP应用的代理，支持虚拟主机，它是免费、快速并且可靠的一种解决方案，包括Twitter,Reddit,StackOverflow,GitHub在内的多家知名互联网公司在使用。HAProxy实现了一种事件驱动、单一进程模型，此模型支持非常大的井发连接数。</p>',48),P={href:"http://www.ha97.com/5646.html",target:"_blank",rel:"noopener noreferrer"},C=s(`<h3 id="搭建步骤-2" tabindex="-1"><a class="header-anchor" href="#搭建步骤-2" aria-hidden="true">#</a> 搭建步骤</h3><ol><li>下载haproxy(在node1和node2)</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token parameter variable">-y</span> <span class="token function">install</span> haproxy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>修改node1和node2的haproxy.cfg</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vim</span> /etc/haproxy/haproxy.cfg
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>需要修改红色IP为当前机器IP</p><p><img src="`+h+`" alt="image-20230410223232546"></p><ol start="3"><li>在两台节点启动haproxy</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>haproxy <span class="token parameter variable">-f</span> /etc/haproxy/haproxy.cfg
<span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span> <span class="token function">grep</span> haproxy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>访问地址</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http://10.211.55.71:8888/stats
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="keepalived实现双机-主备-热备" tabindex="-1"><a class="header-anchor" href="#keepalived实现双机-主备-热备" aria-hidden="true">#</a> Keepalived实现双机(主备)热备</h3><p>试想如果前面配置的HAProxy主机突然宕机或者网卡失效，那么虽然RbbitMQ集群没有任何故障但是对于外界的客户端来说所有的连接都会被断开结果将是灾难性的为了确保负载均衡服务的可靠性同样显得十分重要，这里就要引入Keepalived它能够通过自身健康检查、资源接管功能做高可用(双机热备)，实现故障转移。</p><h3 id="搭建步骤-3" tabindex="-1"><a class="header-anchor" href="#搭建步骤-3" aria-hidden="true">#</a> 搭建步骤</h3><ol><li>下载keepalived</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token parameter variable">-y</span> <span class="token function">install</span> keepalived
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>节点node1配置文件</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vim</span> /etc/keepalived/keepalived.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>把资料里面的keepalived.conf修改之后替换</p><ol start="3"><li>节点node2配置文件</li></ol><blockquote><p>需要修改global_defs的router_id,如:nodeB</p><p>其次要修改vrrp_instance_VI中state为&quot;BACKUP&quot;；</p><p>最后要将priority设置为小于100的值</p></blockquote><ol start="4"><li>添加haproxy_chk.sh</li></ol><p>(为了防止HAProxy服务挂掉之后Keepalived还在正常工作而没有切换到Backup上，所以这里需要编写一个脚本来检测HAProxy务的状态,当HAProxy服务挂掉之后该脚本会自动重启HAProxy的服务，如果不成功则关闭Keepalived服务，这样便可以切换到Backup继续工作)</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vim</span> /etc/keepalived/haproxy_chk.sh<span class="token punctuation">(</span>可以直接上传文件<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改权限</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>chmod777 /etc/keepalived/haproxy_chk.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="5"><li>启动keepalive命令(node1和node2启动)</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl start keepalived
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="6"><li>观察Keepalived的日志</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">tail</span> <span class="token parameter variable">-f</span> /var/log/messages <span class="token parameter variable">-n</span> <span class="token number">200</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="7"><li>观察最新添加的vip</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ip</span> <span class="token function">add</span> show
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="8"><li>node1模拟keepalived关闭状态</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl stop keepalived
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="9"><li>使用vip地址来访问rabbitmq集群</li></ol><h2 id="_04、federation-exchange" tabindex="-1"><a class="header-anchor" href="#_04、federation-exchange" aria-hidden="true">#</a> 04、Federation Exchange</h2><h3 id="使用它的原因" tabindex="-1"><a class="header-anchor" href="#使用它的原因" aria-hidden="true">#</a> 使用它的原因</h3><p>(broker北京)，(broker深圳)彼此之间相距甚远，网络延迟是一个不得不面对的问题。有一个在北京的业务(Client北京)需要连接(broker北京)，向其中的交换器exchangeA发送消息，此时的网络延迟很小，(Client北京)可以迅速将消息发送至exchangeA中，就算在开启了publisherconfirm机制或者事务机制的情况下，也可以迅速收到确认信息。此时又有个在深圳的业务(Client深圳)需要向exchangeA发送消息，那么(Client深圳) (broker北京)之间有很大的网络延迟，(Client深圳)将发送消息至exchangeA会经历一定的延迟，尤其是在开启了publisherconfirm机制或者事务机制的情况下，(Client深圳)会等待很长的延迟时间来接收(broker北京)的确认信息，进而必然造成这条发送线程的性能降低，甚至造成一定程度上的阻塞。</p><p>将业务(Client深圳)部署到北京的机房可以解决这个问题，但是如果(Client深圳)调用的另些服务都部署在深圳，那么又会引发新的时延问题，总不见得将所有业务全部部署在一个机房，那么容灾又何以实现？这里使用Federation插件就可以很好地解决这个问题。</p><p><img src="`+v+`" alt="image-20230410223821712"></p><h3 id="搭建步骤-4" tabindex="-1"><a class="header-anchor" href="#搭建步骤-4" aria-hidden="true">#</a> 搭建步骤</h3><ol><li><p>需要保证每台节点单独运行</p></li><li><p>在每台机器上开启<code>federation</code>相关插件</p></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmq-plugins <span class="token builtin class-name">enable</span> rabbitmq_federation

rabbitmq-plugins <span class="token builtin class-name">enable</span> rabbitmq_federation_management
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+g+'" alt="image-20230410223926784"></p><ol start="3"><li>原理图(先运行consumer在node2创建fed_exchange)</li></ol><p><img src="'+_+'" alt="image-20230410223950014"></p><ol start="4"><li>在downstream(node2)配置upstream(node1)</li></ol><p><img src="'+k+'" alt="image-20230410224008678"></p><ol start="5"><li>添加policy</li></ol><p><img src="'+x+'" alt="image-20230410224046319"></p><ol start="6"><li>成功的前提</li></ol><p><img src="'+f+'" alt="image-20230410224106768"></p><h2 id="_05、federation-queue" tabindex="-1"><a class="header-anchor" href="#_05、federation-queue" aria-hidden="true">#</a> 05、Federation Queue</h2><h3 id="使用它的原因-1" tabindex="-1"><a class="header-anchor" href="#使用它的原因-1" aria-hidden="true">#</a> 使用它的原因</h3><p>联邦队列可以在多个Broker节点(或者集群)之间为单个队列提供均衡负载的功能。一个联邦队列可以连接一个或者多个上游队列(upstreamqueue)，并从这些上游队列中获取消息以满足本地消费者消费消息的需求。</p><h3 id="搭建步骤-5" tabindex="-1"><a class="header-anchor" href="#搭建步骤-5" aria-hidden="true">#</a> 搭建步骤</h3><ol><li>原理图</li></ol><p><img src="'+q+'" alt="image-20230410224153614"></p><ol start="2"><li><p>添加upstream(同上)</p></li><li><p>添加policy</p></li></ol><p><img src="'+y+`" alt="image-20230410224220026"></p><h2 id="_06、shovel" tabindex="-1"><a class="header-anchor" href="#_06、shovel" aria-hidden="true">#</a> 06、Shovel</h2><h3 id="使用它的原因-2" tabindex="-1"><a class="header-anchor" href="#使用它的原因-2" aria-hidden="true">#</a> 使用它的原因</h3><p>Federation具备的数据转发功能类似，Shovel够可靠、持续地从一个Broker中的队列(作为源端，即source)拉取数据并转发至另一个Broker中的交换器(作为目的端，即destination)。作为源端的队列和作为目的端的交换器可以同时位于同一个Broker，也可以位于不同的Broker上。Shovel可以翻译为&quot;铲子&quot;，是一种比较形象的比喻，这个&quot;铲子&quot;可以将消息从一方&quot;铲子&quot;另一方。Shovel行为就像优秀的客户端应用程序能够负责连接源和目的地、负责消息的读写及负责连接失败问题的处理。</p><h3 id="搭建步骤-6" tabindex="-1"><a class="header-anchor" href="#搭建步骤-6" aria-hidden="true">#</a> 搭建步骤</h3><ol><li>开启插件(需要的机器都开启)</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmq-plugins <span class="token builtin class-name">enable</span> rabbitmq_shovel

rabbitmq-plugins <span class="token builtin class-name">enable</span> rabbitmq_shovel_management
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+Q+'" alt="image-20230410224403955"></p><ol start="2"><li>原理图(在源头发送的消息直接回进入到目的地队列)</li></ol><p><img src="'+B+'" alt="image-20230410224433913"></p><ol start="3"><li>添加shovel源和目的地</li></ol><p><img src="'+M+'" alt="image-20230410224448727"></p>',71);function H(w,K){const i=d("ExternalLinkIcon");return l(),r("div",null,[A,e("blockquote",null,[e("p",null,[a("扩展nginx,lvs,haproxy之间的区别:"),e("a",P,[a("http://www.ha97.com/5646.html"),t(i)])])]),C])}const I=n(R,[["render",H],["__file","十一、RabbitMQ集群.html.vue"]]);export{I as default};
