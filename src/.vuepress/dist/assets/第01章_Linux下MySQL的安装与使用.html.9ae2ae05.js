import{_ as l}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as d,c as r,d as e,e as s,b as n,a,r as t}from"./app.9b10ba0a.js";const c="/assets/image-20221204174702222.5df4da3c.png",o="/assets/image-20221214173525019.f0071860.png",m="/assets/image-20221214173600895.4e3ae95c.png",p="/assets/image-20221214174518596.f251d98b.png",u="/assets/image-20221214174619042.b9dadaba.png",v="/assets/image-20221214174648844.bd72815e.png",b="/assets/image-20221214174848109.5d5afa9e.png",g="/assets/image-20221214175154412.3c520a56.png",h="/assets/image-20221214175533390.d4d54a7a.png",_="/assets/image-20221214175621816.c30872a3.png",y="/assets/image-20221214175646422.0a1935e7.png",q="/assets/image-20221214175820485.77f8592d.png",L="/assets/image-20221214175943099.b2247317.png",S="/assets/image-20221214180045636.9d39011e.png",f="/assets/image-20221214180451446.c3a83891.png",x="/assets/image-20221214180527393.9c0883c4.png",E="/assets/image-20221214180610131.16b515e9.png",k="/assets/image-20221214180734872.cef4cdfd.png",T="/assets/image-20221214180810452.00bb741b.png",A="/assets/image-20221214180940083.7ce241e9.png",M="/assets/image-20221214181110630.ab3c3d32.png",w="/assets/image-20221214181147105.9be34e54.png",O="/assets/image-20221214181341318.ae6de6eb.png",R="/assets/image-20221214181454494.0e1df9ab.png",Q="/assets/image-20221214181600642.90723330.png",N="/assets/image-20221214181729540.651f0e54.png",I="/assets/image-20221214181813926.82f2d5b0.png",C="/assets/image-20221214181858971.bda0bee0.png",D="/assets/image-20221214182029194.dc29fed9.png",U="/assets/image-20221214182048647.11050b3a.png",B="/assets/image-20221214182515317.ccb69a7f.png",P="/assets/image-20221214182605342.8015cdf6.png",G="/assets/image-20221214182715668.b6ad83d2.png",H="/assets/image-20221214201247837.b1bf8900.png",F="/assets/image-20221214201357496.36bf828e.png",W="/assets/image-20221214201419360.a40c8830.png",K="/assets/image-20221214201452748.d9e7091d.png",V="/assets/image-20221214201611487.99aaeec2.png",Y="/assets/image-20221214201700809.dd2ad64d.png",z="/assets/image-20221214201835012.a4de0852.png",Z="/assets/image-20221214201924932.bc1930a1.png",j="/assets/image-20221214233040431.66f0b6ba.png",X="/assets/image-20221215020932180.6821e3b5.png",J="/assets/image-20221215021050909.82364c09.png",$="/assets/image-20221215021107377.6f8fb147.png",ee="/assets/image-20221215021929376.19bac0a8.png",se="/assets/image-20221215022013549.5ab89886.png",ae="/assets/image-20221215022025999.74ac92a0.png",ie="/assets/image-20221215022043722.418b5129.png",ne="/assets/image-20221215022104430.001aa53d.png",le="/assets/image-20221215022218551.034afc26.png",de="/assets/image-20221215022232849.bb2f8f37.png",re={},te=a('<h1 id="第-01-章-linux下mysql的安装与使用" tabindex="-1"><a class="header-anchor" href="#第-01-章-linux下mysql的安装与使用" aria-hidden="true">#</a> 第 01 章_Linux下MySQL的安装与使用</h1><p><img src="'+c+`" alt="image-20221204174702222"></p><h2 id="_1-安装前说明" tabindex="-1"><a class="header-anchor" href="#_1-安装前说明" aria-hidden="true">#</a> 1. 安装前说明</h2><h3 id="_1-1-linux系统及工具的准备" tabindex="-1"><a class="header-anchor" href="#_1-1-linux系统及工具的准备" aria-hidden="true">#</a> 1. 1 Linux系统及工具的准备</h3><ul><li>安装并启动好两台虚拟机：CentOS 7 <ul><li>掌握克隆虚拟机的操作 <ul><li>mac地址</li><li>主机名</li><li>ip地址</li><li>UUID</li></ul></li></ul></li><li>安装有Xshell 和Xftp等访问CentOS系统的工具</li><li>CentOS6和CentOS7在MySQL的使用中的区别</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>防火墙：6是iptables，7是firewalld

启动服务的命令：6是service，7是systemctl
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-查看是否安装过mysql" tabindex="-1"><a class="header-anchor" href="#_1-2-查看是否安装过mysql" aria-hidden="true">#</a> 1. 2 查看是否安装过MySQL</h3><ul><li>如果你是用rpm安装, 检查一下RPM PACKAGE：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">rpm</span> <span class="token parameter variable">-qa</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-i</span> mysql  <span class="token comment"># 忽略大小写</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>检查mysql service：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl status mysqld.service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>如果存在mysql-libs的旧版本包，显示如下：</li></ul><p><img src="`+o+'" alt="image-20221214173525019"></p><ul><li>如果不存在mysql-lib的版本，显示如下：</li></ul><p><img src="'+m+`" alt="image-20221214173600895"></p><h3 id="_1-3-mysql的卸载" tabindex="-1"><a class="header-anchor" href="#_1-3-mysql的卸载" aria-hidden="true">#</a> 1. 3 MySQL的卸载</h3><p><strong>1. 关闭 mysql 服务</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl stop mysqld.service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>2. 查看当前 mysql 安装状况</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">rpm</span> <span class="token parameter variable">-qa</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-i</span> mysql

<span class="token comment"># 或</span>

yum list installed <span class="token operator">|</span> <span class="token function">grep</span> mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3.卸载上述命令查询出的已安装程序</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>yum remove mysql-xxx mysql-xxx mysql-xxx mysqk-xxxx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>务必卸载干净，反复执行rpm -qa | grep -i mysql确认是否有卸载残留</p><p><strong>4. 删除 mysql 相关文件</strong></p><ul><li>查找相关文件</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">find</span> / <span class="token parameter variable">-name</span> mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>删除上述命令查找出的相关文件</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">rm</span> <span class="token parameter variable">-rf</span> xxx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>5 .删除 my.cnf</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">rm</span> <span class="token parameter variable">-rf</span> /etc/my.cnf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_2-mysql的linux版安装" tabindex="-1"><a class="header-anchor" href="#_2-mysql的linux版安装" aria-hidden="true">#</a> 2. MySQL的Linux版安装</h2><h3 id="_2-1-mysql的-4-大版本" tabindex="-1"><a class="header-anchor" href="#_2-1-mysql的-4-大版本" aria-hidden="true">#</a> 2. 1 MySQL的 4 大版本</h3><blockquote><p>MySQL Community Server 社区版本 ，开源免费，自由下载，但不提供官方技术支持，适用于 大多数普通用户。</p><p>MySQL Enterprise Edition 企业版本 ，需付费，不能在线下载，可以试用 30 天。提供了更多的功能和更完备的技术支持，更适合于对数据库的功能和可靠性要求较高的企业客户。</p><p>MySQL Cluster 集群版 ，开源免费。用于架设集群服务器，可将几个MySQL Server封装成一个 Server。需要在社区版或企业版的基础上使用。</p><p>MySQL Cluster CGE 高级集群版 ，需付费。</p></blockquote><ul><li>截止目前，官方最新版本为8.0.27。此前，8.0.0 在 2016.9.12日就发布了。</li><li>本课程中主要使用8.0.25版本。同时为了更好的说明MySQL8.0新特性，还会安装MySQL5.7版本，作为对比。</li></ul><p>此外，官方还提供了MySQL Workbench（GUITOOL）一款专为MySQL设计的ER/数据库建模工具。它是著名的数据库设计工具DBDesigner4的继任者。MySQLWorkbench又分为两个版本，分别是社区版（MySQL Workbench OSS）、商用版（MySQL WorkbenchSE）。</p><h3 id="_2-2-下载mysql指定版本" tabindex="-1"><a class="header-anchor" href="#_2-2-下载mysql指定版本" aria-hidden="true">#</a> 2. 2 下载MySQL指定版本</h3><p><strong>1.下载地址</strong></p>`,37),ce={href:"https://www.mysql.com",target:"_blank",rel:"noopener noreferrer"},oe=a('<p><strong>2. 打开官网，点击DOWNLOADS</strong></p><p><code>然后，点击MySQL Community(GPL) Downloads</code></p><p><img src="'+p+'" alt="image-20221214174518596"></p><p><strong>3. 点击 MySQL Community Server</strong></p><p><img src="'+u+'" alt="image-20221214174619042"></p><p><strong>4. 在General Availability(GA) Releases中选择适合的版本</strong></p><ul><li>如果安装Windows 系统下MySQL ，推荐下载MSI安装程序；点击Go to Download Page进行下载即可，如果安装mac系统下的MYSQL，推荐使用</li></ul><p><img src="'+v+'" alt="image-20221214174648844"></p><p><img src="'+b+'" alt="image-20221214174848109"></p><ul><li>Windows下的MySQL安装有两种安装程序 <ul><li>mysql-installer-web-community-8.0.25.0.msi 下载程序大小： 2. 4 M；安装时需要联网安装组件。</li><li>mysql-installer-community-8.0.25.0.msi 下载程序大小： 435. 7 M；安装时离线安装即 可。 推荐。</li></ul></li></ul><p><strong>5. Linux系统下安装MySQL的几种方式</strong></p><p><strong>5.1 Linux系统下安装软件的常用三种方式：</strong></p><p><strong>方式 1 ：rpm命令</strong></p><p>使用rpm命令安装扩展名为&quot;.rpm&quot;的软件包。</p><p>.rpm包的一般格式：</p><p><img src="'+g+'" alt="image-20221214175154412"></p><p><strong>方式 2 ：yum命令</strong></p><p>需联网，从<code>互联网</code>获取的yum源，直接使用yum命令安装。</p><p><strong>方式 3 ：编译安装源码包</strong></p><p>针对tar.gz这样的压缩格式，要用tar命令来解压；如果是其它压缩格式，就使用其它命令。</p><p><strong>5. 2 Linux系统下安装MySQL，官方给出多种安装方式</strong></p><table><thead><tr><th>安装方式</th><th>特点</th></tr></thead><tbody><tr><td>rpm</td><td>安装简单，灵活性差，无法灵活选择版本、升级</td></tr><tr><td>rpm repository</td><td>安装包极小，版本安装简单灵活，升级方便，需要联网安装</td></tr><tr><td>通用二进制包</td><td>安装比较复杂，灵活性高，平台通用性好</td></tr><tr><td>源码包</td><td>安装最复杂，时间长，参数设置灵活，性能好</td></tr></tbody></table>',22),me=e("li",null,[s("这里不能直接选择CentOS 7系统的版本，所以选择与之对应的"),e("code",null,"Red Hat Enterprise Linux")],-1),pe={href:"https://downloads.mysql.com/archives/community/%E7%9B%B4%E6%8E%A5%E7%82%B9Download%E4%B8%8B%E8%BD%BDRPM",target:"_blank",rel:"noopener noreferrer"},ue=a('<img src="'+h+'" alt="image-20221214175533390" style="zoom:50%;"><p><strong>6. 下载的tar包，用压缩工具打开</strong></p><img src="'+_+'" alt="image-20221214175621816" style="zoom:50%;"><ul><li>解压后rpm安装包 （红框为抽取出来的安装包）</li></ul><img src="'+y+`" alt="image-20221214175646422" style="zoom:50%;"><h3 id="_2-3-centos7下检查mysql依赖" tabindex="-1"><a class="header-anchor" href="#_2-3-centos7下检查mysql依赖" aria-hidden="true">#</a> 2.3 CentOS7下检查MySQL依赖</h3><p><strong>1.检查/tmp临时目录权限（必不可少）</strong></p><p>由于mysql安装过程中，会通过mysql用户在/tmp目录下新建tmp_db文件，所以请给/tmp较大的权限。执行 ：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">chmod</span> <span class="token parameter variable">-R</span> <span class="token number">777</span> /tmp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+q+`" alt="image-20221214175820485"></p><h4 id="_2-安装前-检查依赖" tabindex="-1"><a class="header-anchor" href="#_2-安装前-检查依赖" aria-hidden="true">#</a> 2. 安装前，检查依赖</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">rpm</span> -qa<span class="token operator">|</span><span class="token function">grep</span> libaio
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>如果存在libaio包如下：</li></ul><p><img src="`+L+`" alt="image-20221214175943099"></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">rpm</span> -qa<span class="token operator">|</span><span class="token function">grep</span> net-tools
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>如果存在net-tools包如下：</li></ul><p><img src="`+S+`" alt="image-20221214180045636"></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">rpm</span> -qa<span class="token operator">|</span><span class="token function">grep</span> net-tools
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>如果不存在需要到centos安装盘里进行rpm安装。安装linux如果带图形化界面，这些都是安装好的。</li></ul><h3 id="_2-4-centos7下mysql安装过程" tabindex="-1"><a class="header-anchor" href="#_2-4-centos7下mysql安装过程" aria-hidden="true">#</a> 2.4 CentOS7下MySQL安装过程</h3><h4 id="_1-将安装程序拷贝到-opt目录下" tabindex="-1"><a class="header-anchor" href="#_1-将安装程序拷贝到-opt目录下" aria-hidden="true">#</a> 1. 将安装程序拷贝到/opt目录下</h4><p>在mysql的安装文件目录下执行：（必须按照顺序执行）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">rpm</span> <span class="token parameter variable">-ivh</span> mysql-community-common-8.0.25-1.el7.x86_64.rpm

<span class="token function">rpm</span> <span class="token parameter variable">-ivh</span> mysql-community-client-plugins-8.0.25-1.el7.x86_64.rpm

<span class="token function">rpm</span> <span class="token parameter variable">-ivh</span> mysql-community-libs-8.0.25-1.el7.x86_64.rpm

<span class="token function">rpm</span> <span class="token parameter variable">-ivh</span> mysql-community-client-8.0.25-1.el7.x86_64.rpm

<span class="token function">rpm</span> <span class="token parameter variable">-ivh</span> mysql-community-server-8.0.25-1.el7.x86_64.rpm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>注意: 如在检查工作时，没有检查mysql依赖环境在安装mysql-community-server会报错</p></li><li><p><code>rpm</code> 是<code>Redhat Package Manage</code>缩写，通过RPM的管理，用户可以把源代码包装成以rpm为扩展名的文件形式，易于安装。</p></li><li><p><code>-i</code>, --install 安装软件包</p></li><li><p><code>-v</code>, --verbose 提供更多的详细信息输出</p></li><li><p><code>-h</code>, --hash 软件包安装的时候列出哈希标记 (和 -v 一起使用效果更好)，展示进度条</p></li></ul><img src="`+f+'" alt="image-20221214180451446" style="zoom:50%;"><h4 id="_2-安装过程截图" tabindex="-1"><a class="header-anchor" href="#_2-安装过程截图" aria-hidden="true">#</a> 2. 安装过程截图</h4><p><img src="'+x+'" alt="image-20221214180527393"></p><p>安装过程中可能的报错信息：</p><p><img src="'+E+`" alt="image-20221214180610131"></p><blockquote><p>一个命令：<code> yum remove mysql-libs</code> 解决，清除之前安装过的依赖即可</p></blockquote><h4 id="_3-查看mysql版本" tabindex="-1"><a class="header-anchor" href="#_3-查看mysql版本" aria-hidden="true">#</a> 3. 查看MySQL版本</h4><p>执行如下命令，如果成功表示安装mysql成功。类似java -version如果打出版本等信息</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql <span class="token parameter variable">--version</span>
<span class="token comment">#或</span>
mysqladmin <span class="token parameter variable">--version</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+k+`" alt="image-20221214180734872"></p><p>执行如下命令，查看是否安装成功。需要增加 -i 不用去区分大小写，否则搜索不到。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">rpm</span> -qa<span class="token operator">|</span><span class="token function">grep</span> <span class="token parameter variable">-i</span> mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+T+`" alt="image-20221214180810452"></p><h4 id="_4-服务的初始化" tabindex="-1"><a class="header-anchor" href="#_4-服务的初始化" aria-hidden="true">#</a> 4. 服务的初始化</h4><p>为了保证数据库目录与文件的所有者为 mysql 登录用户，如果你是以 root 身份运行 mysql 服务，需要执行下面的命令初始化：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysqld <span class="token parameter variable">--initialize</span> <span class="token parameter variable">--user</span><span class="token operator">=</span>mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>说明： --initialize 选项默认以“安全”模式来初始化，则会为 root 用户生成一个密码并将<code>该密码标记为过期</code>，登录后你需要设置一个新的密码。生成的临时密码会往日志中记录一份。</p><p>查看密码：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cat</span> /var/log/mysqld.log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+A+`" alt="image-20221214180940083"></p><p>root@localhost: 后面就是初始化的密码</p><h4 id="_5-启动mysql-查看状态" tabindex="-1"><a class="header-anchor" href="#_5-启动mysql-查看状态" aria-hidden="true">#</a> 5. 启动MySQL，查看状态</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#加不加.service后缀都可以</span>

启动：systemctl start mysqld.service

关闭：systemctl stop mysqld.service

重启：systemctl restart mysqld.service

查看状态：systemctl status mysqld.service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>mysqld</code>这个可执行文件就代表着<code>MySQL</code>服务器程序，运行这个可执行文件就可以直接启动一个服务器进程。</p></blockquote><p><img src="`+M+`" alt="image-20221214181110630"></p><p>查看进程：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-i</span> mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+w+`" alt="image-20221214181147105"></p><h4 id="_6-查看mysql服务是否自启动" tabindex="-1"><a class="header-anchor" href="#_6-查看mysql服务是否自启动" aria-hidden="true">#</a> 6. 查看MySQL服务是否自启动</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl list-unit-files<span class="token operator">|</span><span class="token function">grep</span> mysqld.service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>默认是enabled。</p><ul><li><p>如不是enabled可以运行如下命令设置自启动</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl <span class="token builtin class-name">enable</span> mysqld.service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+O+`" alt="image-20221214181341318"></p></li><li><p>如果希望不进行自启动，运行如下命令设置</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl disable mysqld.service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><img src="`+R+'" alt="image-20221214181454494" style="zoom:50%;"></li></ul><h2 id="_3-mysql登录" tabindex="-1"><a class="header-anchor" href="#_3-mysql登录" aria-hidden="true">#</a> 3. MySQL登录</h2><h3 id="_3-1-首次登录" tabindex="-1"><a class="header-anchor" href="#_3-1-首次登录" aria-hidden="true">#</a> 3. 1 首次登录</h3><p>通过 <code>mysql -hlocalhost -P3306 -uroot -p</code>进行登录，在Enter password：录入初始化密码</p><p><img src="'+Q+`" alt="image-20221214181600642"></p><h3 id="_3-2-修改密码" tabindex="-1"><a class="header-anchor" href="#_3-2-修改密码" aria-hidden="true">#</a> 3. 2 修改密码</h3><ul><li><p>因为初始化密码默认是过期的，所以查看数据库会报错</p></li><li><p>修改密码：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ALTER <span class="token environment constant">USER</span> <span class="token string">&#39;root&#39;</span>@<span class="token string">&#39;localhost&#39;</span> IDENTIFIED BY <span class="token string">&#39;new_password&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>5.7版本之后（不含5.7），mysql加入了全新的密码安全机制。设置新密码太简单会报错。</p></li></ul><p><img src="`+N+'" alt="image-20221214181729540"></p><ul><li>改为更复杂的密码规则之后，设置成功，可以正常使用数据库了</li></ul><p><img src="'+I+'" alt="image-20221214181813926"></p><h3 id="_3-3-设置远程登录" tabindex="-1"><a class="header-anchor" href="#_3-3-设置远程登录" aria-hidden="true">#</a> 3. 3 设置远程登录</h3><h4 id="_1-当前问题" tabindex="-1"><a class="header-anchor" href="#_1-当前问题" aria-hidden="true">#</a> 1. 当前问题</h4><p>在用SQLyog或Navicat中配置远程连接Mysql数据库时遇到如下报错信息，这是由于Mysql配置了不支持远程连接引起的。</p><p><img src="'+C+`" alt="image-20221214181858971"></p><h4 id="_2-确认网络" tabindex="-1"><a class="header-anchor" href="#_2-确认网络" aria-hidden="true">#</a> 2. 确认网络</h4><p>1.在远程机器上使用ping ip地址保证网络畅通</p><p>2.在远程机器上使用telnet命令保证端口号开放访问</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>telnet ip地址 端口号
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>拓展：<code>telnet命令开启</code>:</p><p><img src="`+D+'" alt="image-20221214182029194"></p><p><img src="'+U+`" alt="image-20221214182048647"></p><h4 id="_3-关闭防火墙或开放端口" tabindex="-1"><a class="header-anchor" href="#_3-关闭防火墙或开放端口" aria-hidden="true">#</a> 3. 关闭防火墙或开放端口</h4><p><strong>方式一：关闭防火墙</strong></p><ul><li>CentOS6 ：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">service</span> iptables stop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>CentOS7：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl start firewalld.service

systemctl status firewalld.service

systemctl stop firewalld.service

<span class="token comment">#设置开机启用防火墙</span>
systemctl <span class="token builtin class-name">enable</span> firewalld.service

<span class="token comment">#设置开机禁用防火墙</span>
systemctl disable firewalld.service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方式二：开放端口</strong></p><ul><li>查看开放的端口号</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>firewall-cmd --list-all
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>设置开放的端口号</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>firewall-cmd --add-service<span class="token operator">=</span>http <span class="token parameter variable">--permanent</span>

firewall-cmd --add-port<span class="token operator">=</span> <span class="token number">3306</span> /tcp <span class="token parameter variable">--permanent</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>重启防火墙</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>firewall-cmd <span class="token parameter variable">--reload</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_4-linux下修改配置" tabindex="-1"><a class="header-anchor" href="#_4-linux下修改配置" aria-hidden="true">#</a> 4. Linux下修改配置</h4><p>在Linux系统MySQL下测试：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>use mysql;

select Host,User from user;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+B+`" alt="image-20221214182515317"></p><p>可以看到root用户的当前主机配置信息为localhost。</p><ul><li><strong>修改Host为通配符%</strong></li></ul><p>Host列指定了允许用户登录所使用的IP，比如user=root Host=192.168.1.1。这里的意思就是说root用户只能通过192.168.1.1的客户端去访问。 user=root Host=localhost，表示只能通过本机客户端去访问。而%是个通配符，如果Host=192.168.1.%，那么就表示只要是IP地址前缀为“192.168.1.”的客户端都可以连接。如果Host=%，表示所有IP都有连接权限。</p><p>注意：在生产环境下不能为了省事将host设置为%，这样做会存在安全问题，具体的设置可以根据生产环境的IP进行设置。</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>update user set host = &#39;%&#39; where user =&#39;root&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Host设置了“%”后便可以允许远程访问。</p><p><img src="`+P+`" alt="image-20221214182605342"></p><p>Host修改完成后记得执行flush privileges使配置立即生效：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>flush privileges;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_5-测试" tabindex="-1"><a class="header-anchor" href="#_5-测试" aria-hidden="true">#</a> 5. 测试</h4><ul><li>如果是 MySQL5.7 版本，接下来就可以使用SQLyog或者Navicat成功连接至MySQL了。</li><li>如果是 MySQL8 版本，连接时还会出现如下问题：</li></ul><p><img src="`+G+`" alt="image-20221214182715668"></p><p>配置新连接报错：错误号码 2058 ，分析是 mysql 密码加密方法变了。</p><p><strong>解决方法：</strong> Linux下 mysql -u root -p 登录你的 mysql 数据库，然后 执行这条SQL：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ALTER <span class="token environment constant">USER</span> <span class="token string">&#39;root&#39;</span>@<span class="token string">&#39;%&#39;</span> IDENTIFIED WITH mysql_native_password BY <span class="token string">&#39;123456&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后在重新配置SQLyog的连接，则可连接成功了，OK。</p><h2 id="_4-mysql-8-的密码强度评估-了解" tabindex="-1"><a class="header-anchor" href="#_4-mysql-8-的密码强度评估-了解" aria-hidden="true">#</a> 4. MySQL 8 的密码强度评估（了解）</h2><h3 id="_4-1-mysql不同版本设置密码-可能出现" tabindex="-1"><a class="header-anchor" href="#_4-1-mysql不同版本设置密码-可能出现" aria-hidden="true">#</a> 4. 1 MySQL不同版本设置密码(可能出现)</h3><ul><li>MySQL5.7中：成功</li></ul><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>mysql&gt; alter user &#39;root&#39; identified by &#39;abcd1234&#39;;
Query OK, 0 rows affected (0.00 sec)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>MySQL8.0中：失败</li></ul><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>mysql&gt; alter user &#39;root&#39; identified by &#39;abcd1234&#39;; # HelloWorld_
ERROR 1819 (HY000): Your password does not satisfy the current policy requirements
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-mysql-8-之前的安全策略" tabindex="-1"><a class="header-anchor" href="#_4-2-mysql-8-之前的安全策略" aria-hidden="true">#</a> 4. 2 MySQL 8 之前的安全策略</h3><p>在MySQL 8.0之前，MySQL使用的是validate_password插件检测、验证账号密码强度，保障账号的安全 性。</p><p><strong>安装/启用插件方式 1 ：在参数文件my.cnf中添加参数</strong></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>[mysqld]

plugin-load-add=validate_password.so

\\#ON/OFF/FORCE/FORCE_PLUS_PERMANENT: 是否使用该插件(及强制/永久强制使用)

validate-password=FORCE_PLUS_PERMANENT
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,119),ve={href:"http://xn--5nqx7jca847ek4m52ac05ftgo.so",target:"_blank",rel:"noopener noreferrer"},be=e("p",null,"说明 2 ： 修改参数后必须重启MySQL服务才能生效。 说明 3 ： 参数FORCE_PLUS_PERMANENT是为了防止插件在MySQL运行时的时候被卸载。当你卸载插件时就会报错。如下所示。",-1),ge=a(`<div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>mysql&gt; SELECT PLUGIN_NAME, PLUGIN_LIBRARY, PLUGIN_STATUS, LOAD_OPTION
-&gt; FROM INFORMATION_SCHEMA.PLUGINS
-&gt; WHERE PLUGIN_NAME = &#39;validate_password&#39;;
+-------------------+----------------------+---------------+----------------------+
| PLUGIN_NAME | PLUGIN_LIBRARY | PLUGIN_STATUS | LOAD_OPTION |
+-------------------+----------------------+---------------+----------------------+
| validate_password | validate_password.so | ACTIVE | FORCE_PLUS_PERMANENT |
+-------------------+----------------------+---------------+----------------------+
1 row in set (0.00 sec)

mysql&gt;  UNINSTALL PLUGIN validate_password;
ERROR 1702 (HY000): Plugin &#39;validate_password&#39; is force_plus_permanent and can not be
unloaded
mysql&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code>安装/启用插件方式 2 ：运行时命令安装</code></strong> （推荐）</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>mysql&gt; INSTALL PLUGIN validate_password SONAME &#39;validate_password.so&#39;;
Query OK, 0 rows affected, 1 warning (0.11 sec)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>此方法也会注册到元数据，也就是mysql.plugin表中，所以不用担心MySQL重启后插件会失效。</p><h3 id="_4-3-mysql-8-的安全策略" tabindex="-1"><a class="header-anchor" href="#_4-3-mysql-8-的安全策略" aria-hidden="true">#</a> 4. 3 MySQL 8 的安全策略</h3><p><strong>1. validate_password说明</strong></p><p>MySQL 8.0，引入了服务器组件（Components）这个特性，validate_password插件已用服务器组件重新实现。8.0.25版本的数据库中，默认自动安装validate_password组件。</p><p><code>未安装插件前，执行如下两个指令</code>，执行效果：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>mysql&gt; show variables like &#39;validate_password%&#39;;
Empty set (0.04 sec)

mysql&gt; SELECT * FROM mysql.component;
ERROR 1146 ( 42 S02): Table &#39;mysql.component&#39; doesn&#39;t exist
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>安装插件后，执行如下两个指令</code>，执行效果：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>mysql&gt; SELECT * FROM mysql.component;
+--------------+--------------------+------------------------------------+
| component_id | component_group_id | component_urn |
+--------------+--------------------+------------------------------------+
| 1 | 1 | file://component_validate_password |
+--------------+--------------------+------------------------------------+
1 row in set (0.00 sec)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>mysql&gt; show variables like &#39;validate_password%&#39;;
+--------------------------------------+--------+
| Variable_name | Value |
+--------------------------------------+--------+
| validate_password.check_user_name | ON |
| validate_password.dictionary_file | |
| validate_password.length | 8 |
| validate_password.mixed_case_count | 1 |
| validate_password.number_count | 1 |
| validate_password.policy | MEDIUM |
| validate_password.special_char_count | 1 |
+--------------------------------------+--------+
7 rows in set (0.01 sec)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于validate_password组件对应的系统变量说明：</p><table><thead><tr><th>选项</th><th>默认值</th><th>参数描述</th></tr></thead><tbody><tr><td>validate_password_check_user_name</td><td>ON</td><td>设置为ON的时候表示能将密码设置成当前用户名。</td></tr><tr><td>validate_password_dictionary_file</td><td></td><td>用于检查密码的字典文件的路径名，默认为空</td></tr><tr><td><code>validate_password_length</code></td><td>8</td><td>密码的最小长度，也就是说密码长度必须大于或等于 8</td></tr><tr><td>validate_password_mixed_case_count</td><td>1</td><td>如果密码策略是中等或更强的，validate_password要求密码具有的小写和大写字符的最小数量。对于给定的这个值密码必须有那么多小写字符和那么多大写字符。</td></tr><tr><td>validate_password_number_count</td><td>1</td><td>密码必须包含的数字个数</td></tr><tr><td>validate_password_policy</td><td>MEDIUM</td><td>密码强度检验等级，可以使用数值 0 、 1 、 2或相应的符号值LOW、MEDIUM、STRONG来指定。0/LOW：只检查长度。1/MEDIUM：检查长度、数字、大小写、特殊字符。2/STRONG：检查长度、数字、大小写、特殊字符、字典文件。</td></tr><tr><td>validate_password_special_char_count</td><td>1</td><td>密码必须包含的特殊字符个数</td></tr></tbody></table><blockquote><p>提示：</p><p>组件和插件的默认值可能有所不同。例如，MySQL 5.7. validate_password_check_user_name的默认值为OFF。</p></blockquote><p><strong>2. 修改安全策略</strong></p><p>修改密码验证安全强度</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SET GLOBAL validate_password_policy=LOW;

SET GLOBAL validate_password_policy=MEDIUM;

SET GLOBAL validate_password_policy=STRONG;

SET GLOBAL validate_password_policy= 0 ;  # For LOW

SET GLOBAL validate_password_policy= 1 ;  # For MEDIUM

SET GLOBAL validate_password_policy= 2 ;  # For HIGH

#注意，如果是插件的话,SQL为set global validate_password_policy=LOW
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，还可以修改密码中字符的长度</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>set global validate_password_length= 1 ;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>3.密码强度测试</strong></p><p>如果你创建密码是遇到“Your password does not satisfy the current policy requirements”，可以通过函数组件去检测密码是否满足条件： 0-100。当评估在 100 时就是说明使用上了最基本的规则：大写+小写+特殊字符+数字组成的 8 位以上密码</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>mysql&gt;  SELECT VALIDATE_PASSWORD_STRENGTH(&#39;medium&#39;);
+--------------------------------------+
| VALIDATE_PASSWORD_STRENGTH(&#39;medium&#39;) |
+--------------------------------------+
| 25 |
+--------------------------------------+
1 row in set (0.00 sec)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>mysql&gt; SELECT VALIDATE_PASSWORD_STRENGTH(&#39;K354*45jKd5&#39;);
+-------------------------------------------+
| VALIDATE_PASSWORD_STRENGTH(&#39;K354*45jKd5&#39;) |
+-------------------------------------------+
| 100 |
+-------------------------------------------+
1 row in set (0.00 sec)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：如果没有安装validate_password组件或插件的话，那么这个函数永远都返回 0 。 关于密码复杂度对应的密码复杂度策略。如下表格所示：</p><table><thead><tr><th>Password Test</th><th>Return Value</th></tr></thead><tbody><tr><td>Length &lt; 4</td><td>0</td></tr><tr><td>Length ≥ 4 and &lt; validate_password.length</td><td>25</td></tr><tr><td>Satisfies policy 1 (LOW)</td><td>50</td></tr><tr><td>Satisfies policy 2 (MEDIUM)</td><td>75</td></tr><tr><td>Satisfies policy 3 (STRONG)</td><td>100</td></tr></tbody></table><h3 id="_4-4-卸载插件、组件-了解" tabindex="-1"><a class="header-anchor" href="#_4-4-卸载插件、组件-了解" aria-hidden="true">#</a> 4. 4 卸载插件、组件(了解)</h3><p><strong>卸载插件</strong></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>mysql&gt; UNINSTALL PLUGIN validate_password;
Query OK, 0 rows affected, 1 warning (0.01 sec)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>卸载组件</strong></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>mysql&gt; UNINSTALL COMPONENT &#39;file://component_validate_password&#39;;
Query OK, 0 rows affected (0.02 sec)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-字符集的相关操作" tabindex="-1"><a class="header-anchor" href="#_5-字符集的相关操作" aria-hidden="true">#</a> 5. 字符集的相关操作</h2><h3 id="_5-1-修改mysql-5-7-字符集" tabindex="-1"><a class="header-anchor" href="#_5-1-修改mysql-5-7-字符集" aria-hidden="true">#</a> 5. 1 修改MySQL 5. 7 字符集</h3><h4 id="_1-修改步骤" tabindex="-1"><a class="header-anchor" href="#_1-修改步骤" aria-hidden="true">#</a> 1. 修改步骤</h4><p>在MySQL 8. 0 版本之前，默认字符集为latin1，utf 8 字符集指向的是utf8mb3。网站开发人员在数据库设计的时候往往会将编码修改为utf 8 字符集。如果遗忘修改默认的编码，就会出现乱码的问题。从MySQL8.0 开始，数据库的默认编码将改为utf8mb4，从而避免上述乱码的问题。</p><p><strong>操作 1 ：查看默认使用的字符集</strong></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>show variables like &#39;character%&#39;;

# 或者

show variables like &#39;%char%&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>MySQL 8. 0 中执行：</li></ul><img src="`+H+'" alt="image-20221214201247837" style="zoom:50%;"><ul><li>MySQL 5. 7 中执行：</li></ul><p>MySQL 5. 7 默认的客户端和服务器都用了latin1，不支持中文，保存中文会报错。MySQL 5. 7 截图如下：</p><p><img src="'+F+'" alt="image-20221214201357496"></p><p>在MySQL 5. 7 中添加中文数据时，报错：</p><p><img src="'+W+'" alt="image-20221214201419360"></p><p>因为默认情况下，创建表使用的是latin1。如下：</p><p><img src="'+K+`" alt="image-20221214201452748"></p><p><strong>操作 2 ：修改字符集</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vim</span> /etc/my.cnf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在MySQL 5. 7 或之前的版本中，在文件最后加上中文字符集配置：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>character_set_server=utf8
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+V+`" alt="image-20221214201611487"></p><p><strong>操作 3 ：重新启动MySQL服务</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl restart mysqld
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>但是原库、原表的设定不会发生变化，参数修改只对新建的数据库生效。</p></blockquote><h4 id="_2-已有库-表字符集的变更" tabindex="-1"><a class="header-anchor" href="#_2-已有库-表字符集的变更" aria-hidden="true">#</a> 2. 已有库&amp;表字符集的变更</h4><p>MySQL 5. 7 版本中，以前创建的库，创建的表字符集还是latin 1 。</p><p><img src="`+Y+`" alt="image-20221214201700809"></p><p>修改已创建数据库的字符集</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>alter database dbtest1 character set &#39;utf8&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改已创建数据表的字符集</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>alter table t_emp convert to character set &#39;utf8&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+z+`" alt="image-20221214201835012"></p><blockquote><p>注意：但是原有的数据如果是用非&#39;utf 8 &#39;编码的话，数据本身编码不会发生改变。已有数据需要导出或删除，然后重新插入。</p></blockquote><h3 id="_5-2-各级别的字符集" tabindex="-1"><a class="header-anchor" href="#_5-2-各级别的字符集" aria-hidden="true">#</a> 5. 2 各级别的字符集</h3><p>MySQL有 4 个级别的字符集和比较规则，分别是：</p><ul><li>服务器级别</li><li>数据库级别</li><li>表级别</li><li>列级别</li></ul><p>执行如下SQL语句：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>show variables like &#39;character%&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+Z+`" alt="image-20221214201924932"></p><ul><li>character_set_server：服务器级别的字符集</li><li>character_set_database：当前数据库的字符集</li><li>character_set_client：服务器解码请求时使用的字符集</li><li>character_set_connection：服务器处理请求时会把请求字符串从character_set_client转为</li><li>character_set_connection</li><li>character_set_results：服务器向客户端返回数据时使用的字符集</li></ul><h4 id="_1-服务器级别" tabindex="-1"><a class="header-anchor" href="#_1-服务器级别" aria-hidden="true">#</a> 1. 服务器级别</h4><ul><li><code>character_set_server</code>：服务器级别的字符集。</li></ul><p>我们可以在启动服务器程序时通过启动选项或者在服务器程序运行过程中使用SET语句修改这两个变量的值。比如我们可以在配置文件中这样写：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>[server]
character_set_server=gbk  # 默认字符集
collation_server=gbk_chinese_ci  #对应的默认的比较规则
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当服务器启动的时候读取这个配置文件后这两个系统变量的值便修改了。</p><h4 id="_2-数据库级别" tabindex="-1"><a class="header-anchor" href="#_2-数据库级别" aria-hidden="true">#</a> 2. 数据库级别</h4><ul><li><code>character_set_database</code>：当前数据库的字符集</li></ul><p>我们在创建和修改数据库的时候可以指定该数据库的字符集和比较规则，具体语法如下：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>CREATE DATABASE 数据库名
[[DEFAULT] CHARACTER SET 字符集名称]
[[DEFAULT] COLLATE 比较规则名称];
ALTER DATABASE 数据库名
[[DEFAULT] CHARACTER SET 字符集名称]
[[DEFAULT] COLLATE 比较规则名称];
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-表级别" tabindex="-1"><a class="header-anchor" href="#_3-表级别" aria-hidden="true">#</a> 3. 表级别</h4><p>我们也可以在创建和修改表的时候指定表的字符集和比较规则，语法如下：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>CREATE TABLE 表名 (列的信息)
[[DEFAULT] CHARACTER SET 字符集名称]
[COLLATE 比较规则名称]]
ALTER TABLE 表名
[[DEFAULT] CHARACTER SET 字符集名称]
[COLLATE 比较规则名称]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>如果创建和修改表的语句中没有指明字符集和比较规则，将使用该表所在数据库的字符集和比较规则作为该表的字符集和比较规则。</strong></p><h4 id="_4-列级别" tabindex="-1"><a class="header-anchor" href="#_4-列级别" aria-hidden="true">#</a> 4. 列级别</h4><p>对于存储字符串的列，同一个表中的不同的列也可以有不同的字符集和比较规则。我们在创建和修改列定义的时候可以指定该列的字符集和比较规则，语法如下：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>CREATE TABLE 表名(
列名 字符串类型 [CHARACTER SET 字符集名称] [COLLATE 比较规则名称],
其他列...
);

ALTER TABLE 表名 MODIFY 列名 字符串类型 [CHARACTER SET 字符集名称] [COLLATE 比较规则名称];
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>对于某个列来说，如果在创建和修改的语句中没有指明字符集和比较规则，将使用该列所在表的字符集和比较规则作为该列的字符集和比较规则。</strong></p><blockquote><p>提示</p><p>在转换列的字符集时需要注意，如果转换前列中存储的数据不能用转换后的字符集进行表示会发生错误。比方说原先列使用的字符集是utf 8 ，列中存储了一些汉字，现在把列的字符集转换为ascii的话就会出错，因为ascii字符集并不能表示汉字字符。</p></blockquote><h4 id="_5-小结" tabindex="-1"><a class="header-anchor" href="#_5-小结" aria-hidden="true">#</a> 5. 小结</h4><p>我们介绍的这 4 个级别字符集和比较规则的联系如下：</p><ul><li>如果创建或修改列时没有显式的指定字符集和比较规则，则该列默认用表的字符集和比较规则</li><li>如果创建表时没有显式的指定字符集和比较规则，则该表默认用数据库的字符集和比较规则</li><li>如果创建数据库时没有显式的指定字符集和比较规则，则该数据库默认用服务器的字符集和比较规则</li></ul><p>知道了这些规则之后，对于给定的表，我们应该知道它的各个列的字符集和比较规则是什么，从而根据这个列的类型来确定存储数据时每个列的实际数据占用的存储空间大小了。比方说我们向表t中插入一条记录：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>mysql&gt; INSERT INTO t(col) VALUES(&#39;我们&#39;);
Query OK, 1 row affected (0.00 sec)

mysql&gt; SELECT * FROM t;
+--------+
| s |
+--------+
| 我们 |
+--------+
1 row in set (0.00 sec)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先列<code>col</code>使用的字符集是<code>gbk</code>，一个字符&#39;<code>我</code>&#39;在<code>gbk</code>中的编码为<code>0xCED2</code>，占用两个字节，两个字符的实际数据就占用 4 个字节。如果把该列的字符集修改为<code>utf8</code>的话，这两个字符就实际占用 6 个字节</p><h3 id="_5-3-字符集与比较规则-了解" tabindex="-1"><a class="header-anchor" href="#_5-3-字符集与比较规则-了解" aria-hidden="true">#</a> 5. 3 字符集与比较规则(了解)</h3><h4 id="_1-utf-8-与-utf-8-mb-4" tabindex="-1"><a class="header-anchor" href="#_1-utf-8-与-utf-8-mb-4" aria-hidden="true">#</a> 1. utf 8 与 utf 8 mb 4</h4><p><code>utf8</code>字符集表示一个字符需要使用 1 ～ 4 个字节，但是我们常用的一些字符使用 1 ～ 3 个字节就可以表示了。而字符集表示一个字符所用的最大字节长度，在某些方面会影响系统的存储和性能，所以设计MySQL的设计者偷偷的定义了两个概念：</p><ul><li><code>utf8mb3</code>：阉割过的<code>utf8</code>字符集，只使用 1 ～ 3 个字节表示字符。</li><li><code>utf8mb4</code>：正宗的<code>utf8</code>字符集，使用 1 ～ 4 个字节表示字符。</li></ul><h4 id="_2-比较规则" tabindex="-1"><a class="header-anchor" href="#_2-比较规则" aria-hidden="true">#</a> 2. 比较规则</h4><p>上表中，MySQL版本一共支持 41 种字符集，其中的<code>Default collation</code>列表示这种字符集中一种默认的比较规则，里面包含着该比较规则主要作用于哪种语言，比如<code>utf8_polish_ci</code>表示以波兰语的规则比较，<code>utf8_spanish_ci</code>是以西班牙语的规则比较，<code>utf8_general_ci</code>是一种通用的比较规则。</p><p>后缀表示该比较规则是否区分语言中的重音、大小写。具体如下：</p><table><thead><tr><th>后缀</th><th>英文释义</th><th>描述</th></tr></thead><tbody><tr><td><code>_ai</code></td><td><code>accent insensitive</code></td><td>不区分重音</td></tr><tr><td><code>_as</code></td><td><code>accent sensitive</code></td><td>区分重音</td></tr><tr><td><code>_ci</code></td><td><code>case insensitive</code></td><td>不区分大小写</td></tr><tr><td><code>_cs</code></td><td><code>case sensitive</code></td><td>区分大小写</td></tr><tr><td><code>_bin</code></td><td><code>binary</code></td><td>以二进制方式比较</td></tr></tbody></table><p>最后一列<code>Maxlen</code>，它代表该种字符集表示一个字符最多需要几个字节。</p><p><strong>常用操作 1 ：</strong></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>#查看GBK字符集的比较规则
SHOW COLLATION LIKE &#39;gbk%&#39;;

#查看UTF-8字符集的比较规则
SHOW COLLATION LIKE &#39;utf8%&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>常用操作 2 ：</strong></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>#查看服务器的字符集和比较规则
SHOW VARIABLES LIKE &#39;%_server&#39;;

#查看数据库的字符集和比较规则
SHOW VARIABLES LIKE &#39;%_database&#39;;

#查看具体数据库的字符集
SHOW CREATE DATABASE dbtest1;

#修改具体数据库的字符集
ALTER DATABASE dbtest1 DEFAULT CHARACTER SET &#39;utf8&#39; COLLATE &#39;utf8_general_ci&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>常用操作 3 ：</strong></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>#查看表的字符集
show create table employees;

#查看表的比较规则
show table status from atguigudb like &#39;employees&#39;;

#修改表的字符集和比较规则
ALTER TABLE emp1 DEFAULT CHARACTER SET &#39;utf8&#39; COLLATE &#39;utf8_general_ci&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-4-请求到响应过程中字符集的变化" tabindex="-1"><a class="header-anchor" href="#_5-4-请求到响应过程中字符集的变化" aria-hidden="true">#</a> 5. 4 请求到响应过程中字符集的变化</h3><table><thead><tr><th>系统变量</th><th>描述</th></tr></thead><tbody><tr><td><code>character_set_client</code></td><td>服务器解码请求时使用的字符集</td></tr><tr><td><code>character_set_connection</code></td><td>服务器处理请求时会把请求字符串从character_set_client转为character_set_connection</td></tr><tr><td><code>character_set_results</code></td><td>服务器向客户端返回数据时使用的字符集</td></tr></tbody></table><p>这几个系统变量在我的计算机上的默认值如下（不同操作系统的默认值可能不同）：</p><p><img src="`+j+`" alt="image-20221214233040431"></p><p>为了体现出字符集在请求处理过程中的变化，我们这里特意修改一个系统变量的值：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>mysql&gt; set character_set_connection = gbk;
Query OK, 0 rows affected (0.00 sec)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>现在假设我们客户端发送的请求是下边这个字符串：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SELECT * FROM t WHERE s = &#39;我&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>为了方便大家理解这个过程，我们只分析字符&#39;我&#39;在这个过程中字符集的转换。</p><p>现在看一下在请求从发送到结果返回过程中字符集的变化：</p><ol><li><p>客户端发送请求所使用的字符集</p><p>一般情况下客户端所使用的字符集和当前操作系统一致，不同操作系统使用的字符集可能不一样，如下：</p><ul><li>类<code>Unix</code>系统使用的是<code>utf8</code></li><li><code>Windows</code>使用的是<code>gbk</code></li></ul><p>当客户端使用的是utf8字符集，字符&#39;<code>我</code>&#39;在发送给服务器的请求中的字节形式就是： <code>0xE68891</code></p></li></ol><blockquote><p>提示</p><p>如果你使用的是可视化工具，比如navicat之类的，这些工具可能会使用自定义的字符集来编码发送到服务器的字符串，而不采用操作系统默认的字符集（所以在学习的时候还是尽量用命令行窗口）。</p></blockquote><ol start="2"><li><p>服务器接收到客户端发送来的请求其实是一串二进制的字节，它会认为这串字节采用的字符集是<code>character_set_client</code>，然后把这串字节转换为<code>character_set_connection</code>字符集编码的字符。</p><p>由于我的计算机上<code>character_set_client</code>的值是<code>utf8</code>，首先会按照<code>utf8</code>字符集对字节串<code>0xE68891</code>进行解码，得到的字符串就是&#39;<code>我</code>&#39;，然后按照<code>character_set_connection</code>代表的字符集，也就是<code>gbk</code>进行编码，得到的结果就是字节串<code>0xCED2</code>。</p></li><li><p>因为表<code>t</code>的列<code>col</code>采用的是<code>gbk</code>字符集，与<code>character_set_connection</code>一致，所以直接到列中找字节值为<code>0xCED2</code>的记录，最后找到了一条记录。</p></li></ol><blockquote><p>提示</p><p>如果某个列使用的字符集和character_set_connection代表的字符集不一致的话，还需要进行一次字符集转换。</p></blockquote><ol start="4"><li>上一步骤找到的记录中的<code>col</code>列其实是一个字节串<code>0xCED2</code>，<code>col</code>列是采用<code>gbk</code>进行编码的，所以首先会将这个字节串使用<code>gbk</code>进行解码，得到字符串&#39;<code>我</code>&#39;，然后再把这个字符串使用<code>character_set_results</code>代表的字符集，也就是<code>utf8</code>进行编码，得到了新的字节串：<code>0xE68891</code>，然后发送给客户端。</li><li>由于客户端是用的字符集是<code>utf8</code>，所以可以顺利的将<code>0xE68891</code>解释成字符<code>我</code>，从而显示到我们的显示器上，所以我们人类也读懂了返回的结果。</li></ol><p>总结图示如下：</p><p><img src="`+X+`" alt="image-20221215020932180"></p><h2 id="_6-sql大小写规范" tabindex="-1"><a class="header-anchor" href="#_6-sql大小写规范" aria-hidden="true">#</a> 6. SQL大小写规范</h2><h3 id="_6-1-windows和linux平台区别" tabindex="-1"><a class="header-anchor" href="#_6-1-windows和linux平台区别" aria-hidden="true">#</a> 6. 1 Windows和Linux平台区别</h3><p>在 SQL 中，关键字和函数名是不用区分字母大小写的，比如 SELECT、WHERE、ORDER、GROUP BY 等关键字，以及 ABS、MOD、ROUND、MAX 等函数名。</p><p>不过在 SQL 中，你还是要确定大小写的规范，因为在 Linux 和 Windows 环境下，你可能会遇到不同的大小写问题。<code>windows系统默认大小写不敏感</code>，但是<code>linux系统是大小写敏感的</code>。</p><p>通过如下命令查看：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SHOW VARIABLES LIKE &#39;%lower_case_table_names%&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>Windows系统下：</li></ul><p><img src="`+J+'" alt="image-20221215021050909"></p><ul><li>Linux系统下：</li></ul><p><img src="'+$+`" alt="image-20221215021107377"></p><ul><li>lower_case_table_names参数值的设置： <ul><li>默认为 0 ，大小写敏感。</li><li>设置 1 ，大小写不敏感。创建的表，数据库都是以小写形式存放在磁盘上，对于sql语句都是转换为小写对表和数据库进行查找。</li><li>设置 2 ，创建的表和数据库依据语句上格式存放，凡是查找都是转换为小写进行。</li></ul></li><li>两个平台上SQL大小写的区别具体来说：</li></ul><blockquote><p>MySQL在Linux下数据库名、表名、列名、别名大小写规则是这样的：</p><p>1 、数据库名、表名、表的别名、变量名是严格区分大小写的；</p><p>2 、关键字、函数名称在 SQL 中不区分大小写；</p><p>3 、列名（或字段名）与列的别名（或字段别名）在所有的情况下均是忽略大小写的；</p><p><strong><code>MySQL在Windows的环境下全部不区分大小写</code></strong></p></blockquote><h3 id="_6-2-linux下大小写规则设置" tabindex="-1"><a class="header-anchor" href="#_6-2-linux下大小写规则设置" aria-hidden="true">#</a> 6. 2 Linux下大小写规则设置</h3><p>当想设置为大小写不敏感时，要在my.cnf这个配置文件 [mysqld] 中加入</p><p>lower_case_table_names=1 ，然后重启服务器。</p><ul><li>但是要在重启数据库实例之前就需要将原来的数据库和表转换为小写，否则将找不到数据库名。</li><li>此参数适用于MySQL5.7。在MySQL 8下禁止在重新启动 MySQL 服务时将lower_case_table_names 设置成不同于初始化 MySQL 服务时设置的lower_case_table_names 值。如果非要将MySQL8设置为大小写不敏感，具体步骤为：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">1</span> 、停止MySQL服务
<span class="token number">2</span> 、删除数据目录，即删除 /var/lib/mysql 目录
<span class="token number">3</span> 、在MySQL配置文件（ /etc/my.cnf ）中添加 <span class="token assign-left variable">lower_case_table_names</span><span class="token operator">=</span><span class="token number">1</span>
<span class="token number">4</span> 、启动MySQL服务
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-3-sql编写建议" tabindex="-1"><a class="header-anchor" href="#_6-3-sql编写建议" aria-hidden="true">#</a> 6.3 SQL编写建议</h3><p>如果你的变量名命名规范没有统一，就可能产生错误。这里有一个有关命名规范的建议：</p><blockquote><p>1、关键字和函数名称全部大写；</p><p>2、数据库名、表名、表别名、字段名、字段别名等全部小写；</p><p>3、SQL 语句必须以分号结尾。</p></blockquote><p>数据库名、表名和字段名在 Linux MySQL 环境下是区分大小写的，因此建议你统一这些字段的命名规则，比如全部采用小写的方式。</p><p>虽然关键字和函数名称在 SQL 中不区分大小写，也就是如果小写的话同样可以执行。但是同时将关键词和函数名称全部大写，以便于区分数据库名、表名、字段名。</p><h2 id="_7-sql-mode的合理设置" tabindex="-1"><a class="header-anchor" href="#_7-sql-mode的合理设置" aria-hidden="true">#</a> 7. sql_mode的合理设置</h2><h3 id="_7-1-宽松模式-vs-严格模式" tabindex="-1"><a class="header-anchor" href="#_7-1-宽松模式-vs-严格模式" aria-hidden="true">#</a> 7.1 宽松模式 vs 严格模式</h3><p><strong>宽松模式：</strong></p><p>如果设置的是宽松模式，那么我们在插入数据的时候，即便是给了一个错误的数据，也可能会被接受，并且不报错。</p><p><code>举例</code>：我在创建一个表时，该表中有一个字段为name，给name设置的字段类型时<code>char(10)</code>，如果我在插入数据的时候，其中name这个字段对应的有一条数据的<code>长度超过了 10</code> ，例如&#39;1234567890abc&#39;，超过了设定的字段长度 10 ，那么不会报错，并且取前 10 个字符存上，也就是说你这个数据被存为了&#39;1234567890&#39;，而&#39;abc&#39;就没有了。但是，我们给的这条数据是错误的，因为超过了字段长度，但是并没有报错，并且mysql自行处理并接受了，这就是宽松模式的效果。</p><p><code>应用场景</code>：通过设置sql mode为宽松模式，来保证大多数sql符合标准的sql语法，这样应用在不同数据库之间进行<code>迁移</code>时，则不需要对业务sql 进行较大的修改。</p><p><strong>严格模式：</strong></p><p>出现上面宽松模式的错误，应该报错才对，所以MySQL5.7版本就将sql_mode默认值改为了严格模式。所以在<code>生产等环境</code>中，我们必须采用的是严格模式，进而<code>开发、测试环境</code>的数据库也必须要设置，这样在开发测试阶段就可以发现问题。并且我们即便是用的MySQL5.6，也应该自行将其改为严格模式。</p><p><code>开发经验</code>：MySQL等数据库总想把关于数据的所有操作都自己包揽下来，包括数据的校验，其实开发中，我们应该在自己<code>开发的项目程序级别将这些校验给做了</code>，虽然写项目的时候麻烦了一些步骤，但是这样做之后，我们在进行数据库迁移或者在项目的迁移时，就会方便很多。</p><p>改为严格模式后可能会存在的问题：</p><p>若设置模式中包含了<code>NO_ZERO_DATE</code>，那么MySQL数据库不允许插入零日期，插入零日期会抛出错误而不是警告。例如，表中含字段TIMESTAMP列（如果未声明为NULL或显示DEFAULT子句）将自动分配DEFAULT &#39;0000-00-00 00:00:00&#39;（零时间戳），这显然是不满足sql_mode中的NO_ZERO_DATE而报错。</p><h3 id="_7-2-宽松模式再举例" tabindex="-1"><a class="header-anchor" href="#_7-2-宽松模式再举例" aria-hidden="true">#</a> 7. 2 宽松模式再举例</h3><p><strong>宽松模式举例 1 ：</strong></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select * from employees group by department_id limit 10 ;

set sql_mode = ONLY_FULL_GROUP_BY;

select * from employees group by department_id limit 10 ;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+ee+'" alt="image-20221215021929376"></p><p><strong>宽松模式举例 2 ：</strong></p><p><img src="'+se+'" alt="image-20221215022013549"></p><p><img src="'+ae+'" alt="image-20221215022025999"></p><p><img src="'+ie+'" alt="image-20221215022043722"></p><p>设置 sql_mode 模式为 STRICT_TRANS_TABLES ，然后插入数据：</p><p><img src="'+ne+`" alt="image-20221215022104430"></p><h3 id="_7-3-模式查看和设置" tabindex="-1"><a class="header-anchor" href="#_7-3-模式查看和设置" aria-hidden="true">#</a> 7. 3 模式查看和设置</h3><ul><li><code>查看当前的sql_mode</code></li></ul><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select @@session.sql_mode

select @@global.sql_mode

#或者

show variables like &#39;sql_mode&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+le+'" alt="image-20221215022218551"></p><p><img src="'+de+`" alt="image-20221215022232849"></p><ul><li><code>临时设置方式：设置当前窗口中设置sql_mode</code></li></ul><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SET GLOBAL sql_mode = &#39;modes...&#39;; #全局

SET SESSION sql_mode = &#39;modes...&#39;; #当前会话
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>举例：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>#改为严格模式。此方法只在当前会话中生效，关闭当前会话就不生效了。
set SESSION sql_mode=&#39;STRICT_TRANS_TABLES&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>#改为严格模式。此方法在当前服务中生效，重启MySQL服务后失效。
set GLOBAL sql_mode=&#39;STRICT_TRANS_TABLES&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>永久设置方式：在/etc/my.cnf中配置sql_mode</code></li></ul><p>在<code>my.cnf</code>文件(windows系统是<code>my.ini</code>文件)，新增：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>[mysqld]
sql_mode=ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后<code>重启MySQL</code>。</p><p>当然生产环境上是禁止重启MySQL服务的，所以采用<code>临时设置方式 + 永久设置方式</code>来解决线上的问题，那么即便是有一天真的重启了MySQL服务，也会永久生效了。</p>`,184);function he(_e,ye){const i=t("ExternalLinkIcon");return d(),r("div",null,[te,e("p",null,[s("官网： "),e("strong",null,[e("a",ce,[s("https://www.mysql.com"),n(i)])])]),oe,e("ul",null,[me,e("li",null,[e("a",pe,[s("https://downloads.mysql.com/archives/community/直接点Download下载RPM"),n(i)]),s(" Bundle全量 包。包括了所有下面的组件。不需要一个一个下载了。")])]),ue,e("blockquote",null,[e("p",null,[s("说明 1 ： plugin library中的validate_password文件名的后缀名根据平台不同有所差异。 对于Unix和Unix-like系统而言，"),e("a",ve,[s("它的文件后缀名是.so"),n(i)]),s("，对于Windows系统而言，它的文件后缀名是.dll。")]),be]),ge])}const Se=l(re,[["render",he],["__file","第01章_Linux下MySQL的安装与使用.html.vue"]]);export{Se as default};
