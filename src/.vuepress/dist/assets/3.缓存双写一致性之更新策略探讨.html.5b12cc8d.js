import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as t,c as e,d as n,e as o,b as c,a as s,r as l}from"./app.9b10ba0a.js";const i="/assets/image-20230501215453126.99c6a9c7.png",u="/assets/image-20230501220720441.9b07fede.png",r="/assets/image-20230501221247379.ef47c13e.png",d="/assets/image-20230501222640612.aaa6f9c5.png",k="/assets/image-20230501222818158.105db5d8.png",m="/assets/image-20230501223241068.80f2301b.png",v="/assets/image-20230501223251216.fa7059a3.png",b="/assets/image-20230501223447797.26a3a02e.png",g="/assets/image-20230501224019445.152fd703.png",y={},h=s('<h2 id="_01、反馈回来的面试题" tabindex="-1"><a class="header-anchor" href="#_01、反馈回来的面试题" aria-hidden="true">#</a> 01、反馈回来的面试题</h2><p><strong>一图</strong></p><p><img src="'+i+'" alt="image-20230501215453126"></p><ul><li><p>问题，上面业务逻辑你用java代码如何写？</p></li><li><p>你只要用缓存，就可能会涉及到redis缓存与数据库双存储双写，你只要是双写，就一定会有数据一致性问题，那么你如何解决一致性问题？</p></li><li><p>双写一致性，你先动缓存redis还是数据库mysql哪一个？why？</p></li><li><p><strong>延时双删</strong>你做过吗？会有哪些问题？</p></li><li><p>有这么一种情况，微服务查询redis无mysql有，为保证数据双写一致性回写redis你需要注意什么？<strong>双检加锁</strong>策略你了解过吗？如何尽量避免缓存击穿？</p></li><li><p>redis和mysql双写100%会出纰漏，做不到强一致性，你如何保证<strong>最终一致性</strong>？</p></li><li><p>。。。。。。</p></li></ul><h2 id="_02、缓存双写一致性-谈谈你的理解" tabindex="-1"><a class="header-anchor" href="#_02、缓存双写一致性-谈谈你的理解" aria-hidden="true">#</a> 02、缓存双写一致性，谈谈你的理解</h2><p>如果redis中<strong>有数据</strong>：需要和数据库中的值相同</p><p>如果reids中<strong>无数据</strong>：数据库中的值要是最新值，且准备回写redis</p><blockquote><p>缓存按照步骤来分，细分2种</p></blockquote><ul><li><p>只读缓存</p></li><li><p>读写缓存</p></li></ul><ol><li>同步直写策略</li></ol><p>写数据库后也同步到redis缓存，缓存和数据库中的数据一致；</p><p>对于读写缓存来说，要想保证缓存和数据库中的数据一致，就要采用同步直写策略</p><ol start="2"><li>异步缓写策略</li></ol><p>正常情况下，mysql数据发生变动，但是可以在业务上容许出现一定时间后才作用于redis，比如仓库，物流系统</p><p>异常情况出现了，不得不将失败的动作重新修补，有可能需啊哟借助kafka或者RabbitMQ等消息中间件，实现重试重写</p><p><strong>一图代码你如何写？</strong></p><blockquote><p>问题》》？</p></blockquote><p><img src="'+u+`" alt="image-20230501220720441"></p><p><strong>问题，上面业务逻辑你用java代码如何写？</strong></p><blockquote><p>采用双检加锁策略</p></blockquote><p>多个线程同时去查询数据库的这条数据，那么我们可以在第一个查询数据的请求上<strong>使用一个 互斥锁来锁住它</strong>。</p><p>其他的线程走到这一步拿不到锁就等着，等第一个线程查询到了数据，然后做缓存。</p><p>后面的线程进来发现已经有缓存了，就直接走缓存。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> value  <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 查询缓存</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 缓存存在直接返回</span>
        <span class="token keyword">return</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 缓存不存在则对方法加锁</span>
        <span class="token comment">// 假设请求量很大，缓存过期</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">TestFuture</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            value <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在查一遍redis</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 查到数据直接返回</span>
                <span class="token keyword">return</span> value<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// 二次查询缓存不存在，直接插DB</span>
                value <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 数据缓存</span>
                redis<span class="token punctuation">.</span><span class="token function">setnx</span><span class="token punctuation">(</span>key <span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 返回</span>
                <span class="token keyword">return</span> value<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+r+`" alt="image-20230501221247379"></p><blockquote><p>Code编码</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>entities<span class="token punctuation">.</span></span><span class="token class-name">User</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">UserMapper</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>models<span class="token punctuation">.</span>auth<span class="token punctuation">.</span></span><span class="token class-name">In</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RedisTemplate</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">ValueOperations</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PathVariable</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@auther</span> zzyy
 * <span class="token keyword">@create</span> 2021-05-01 14:58
 */</span>
<span class="token annotation punctuation">@Service</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">CACHE_KEY_USER</span> <span class="token operator">=</span> <span class="token string">&quot;user:&quot;</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">UserMapper</span> userMapper<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span> redisTemplate<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 业务逻辑没有写错，对于小厂中厂(QPS《=1000)可以使用，但是大厂不行
     * <span class="token keyword">@param</span> <span class="token parameter">id</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">findUserById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token constant">CACHE_KEY_USER</span><span class="token operator">+</span>id<span class="token punctuation">;</span>

        <span class="token comment">//1 先从redis里面查询，如果有直接返回结果，如果没有再去查询mysql</span>
        user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>user <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//2 redis里面无，继续查询mysql</span>
            user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectByPrimaryKey</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>user <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//3.1 redis+mysql 都无数据</span>
                <span class="token comment">//你具体细化，防止多次穿透，我们业务规定，记录下导致穿透的这个key回写redis</span>
                <span class="token keyword">return</span> user<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                <span class="token comment">//3.2 mysql有，需要将数据写回redis，保证下一次的缓存命中率</span>
                redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> user<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token doc-comment comment">/**
     * 加强补充，避免突然key失效了，打爆mysql，做一下预防，尽量不出现击穿的情况。
     * <span class="token keyword">@param</span> <span class="token parameter">id</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">findUserById2</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token constant">CACHE_KEY_USER</span><span class="token operator">+</span>id<span class="token punctuation">;</span>

        <span class="token comment">//1 先从redis里面查询，如果有直接返回结果，如果没有再去查询mysql，</span>
        <span class="token comment">// 第1次查询redis，加锁前</span>
        user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>user <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//2 大厂用，对于高QPS的优化，进来就先加锁，保证一个请求操作，让外面的redis等待一下，避免击穿mysql</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token comment">//第2次查询redis，加锁后</span>
                user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//3 二次查redis还是null，可以去查mysql了(mysql默认有数据)</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">//4 查询mysql拿数据(mysql默认有数据)</span>
                    user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectByPrimaryKey</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                        <span class="token comment">//5 mysql里面有数据的，需要回写redis，完成数据一致性的同步工作</span>
                        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>user<span class="token punctuation">,</span><span class="token number">7L</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">DAYS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> user<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_03、数据库和缓存一致性的几种更新策略" tabindex="-1"><a class="header-anchor" href="#_03、数据库和缓存一致性的几种更新策略" aria-hidden="true">#</a> 03、数据库和缓存一致性的几种更新策略</h2><h3 id="目的" tabindex="-1"><a class="header-anchor" href="#目的" aria-hidden="true">#</a> 目的</h3><p><strong>总之，我们要达到最终一致性！</strong></p><p><strong>给缓存设置过期时间，定期清理缓存并回写，是保证最终一致性的解决方案。</strong></p><p>我们可以对存入缓存的数据设置过期时间，所有的<strong>写操作以数据库为准</strong>，对缓存操作只是尽最大努力即可。也就是说如果数据库写成功，缓存更新失败，那么只要到达过期时间，则后面的读请求自然会从数据库中读取新值然后回填缓存，达到一致性，<strong>切记，要以mysql的数据库写入库为准。</strong></p><p>上述方案和后续落地案例是调研后的主流+成熟的做法，但是考虑到各个公司业务系统的差距，</p><p><code>不是100%绝对正确，不保证绝对适配全部情况</code>，请同学们自行酌情选择打法，合适自己的最好。</p><h3 id="可以停机的情况" tabindex="-1"><a class="header-anchor" href="#可以停机的情况" aria-hidden="true">#</a> 可以停机的情况，^ _ ^</h3><p>挂牌报错，凌晨升级，温馨提示，服务降级</p><p>单线程，这样重量级的数据库操作最好不要多线程</p><h3 id="我们讨论4中更新策略" tabindex="-1"><a class="header-anchor" href="#我们讨论4中更新策略" aria-hidden="true">#</a> 我们讨论4中更新策略</h3><ul><li>❌先更新数据库，在更新缓存</li></ul><p><strong>异常情况1：</strong></p><p>1 先更新mysql的某商品的库存，当前商品的库存是100，更新为99个。</p><p>2 先更新mysql修改为99成功，然后更新redis。</p><p>3 <code>此时假设异常出现</code>，更新redis失败了，这导致mysql里面的库存是99而redis里面的还是100 。</p><p>4 上述发生，会让数据库里面和缓存redis里面数据不一致，<code>读到redis脏数据</code></p><p><strong>异常情况2：</strong></p><p>【先更新数据库，再更新缓存】，A、B两个线程发起调用</p><p><strong>【正常逻辑】</strong></p><p>1 A update mysql 100</p><p>2 A update redis 100</p><p>3 B update mysql 80</p><p>4 B update redis 80</p><p><code>============================</code></p><p><strong>【异常逻辑】多线程环境下，A、B两个线程有快有慢，有前有后有并行</strong></p><p>1 A update mysql 100</p><p>3 B update mysql 80</p><p>4 B update redis 80</p><p>2 A update redis 100</p><p><code>=============================</code></p><p>最终结果，mysql和redis数据不一致，o(╥﹏╥)o，</p><p>mysql80,redis100</p><ul><li>❌先更新缓存，在更新数据库</li></ul><p>❌不太推荐：业务上一般把mysql作物<code>底单数据库</code>，保证最后解释</p><p>异常情况2：</p><p>【先更新缓存，再更新数据库】，A、B两个线程发起调用</p><p><strong>【正常逻辑】</strong></p><p>1 A update redis 100</p><p>2 A update mysql 100</p><p>3 B update redis 80</p><p>4 B update mysql 80</p><p><code>====================================</code></p><p><strong>【异常逻辑】多线程环境下，A、B两个线程有快有慢有并行</strong></p><p>A update redis 100</p><p>B update redis 80</p><p>B update mysql 80</p><p>A update mysql 100</p><p>----mysql100,redis80</p><ul><li>❌先删除缓存，在更新数据库</li></ul><blockquote><p>异常问题</p></blockquote><ol><li>步骤分析1：先删除缓存，在更新数据库</li></ol><p><strong>阳哥自己这里写20秒，是自己故意乱写的，表示更新数据库可能失败，实际中不可能...O(∩_∩)O哈哈~</strong></p><p>1 A线程先成功删除了redis里面的数据，然后去更新mysql，此时mysql正在更新中，还没有结束。（比如网络延时）</p><p><strong>B突然出现要来读取缓存数据。</strong></p><p><img src="`+d+'" alt="image-20230501222640612"></p><ol start="2"><li>步骤分析2：先删除缓存，在更新数据库</li></ol><p>2 此时redis里面的数据是空的，B线程来读取，先去读redis里数据(已经被A线程delete掉了)，此处出来2个问题：</p><p><strong>2.1 B从mysql获得了旧值</strong></p><p>​ B线程发现redis里没有(缓存缺失)马上去mysql里面读取，<strong>从数据库里面读取来的是旧值。</strong></p><p><strong>2.2 B会把获得的旧值写回redis</strong></p><p><strong>获得旧值数据后返回前台并回写进redis(刚被A线程删除的旧数据有极大可能又被写回了)。</strong></p><p><img src="'+k+'" alt="image-20230501222818158"></p><ol start="3"><li>步骤分析3：先删除缓存，在更新数据库</li></ol><p>3 A线程更新完mysql，发现redis里面的缓存是脏数据，A线程直接懵逼了，o(╥﹏╥)o</p><p>两个并发操作，一个是更新操作，另一个是查询操作，</p><p>A删除缓存后，B查询操作没有命中缓存，B先把老数据读出来后放到缓存中，然后A更新操作更新了数据库。</p><p>于是，在缓存中的数据还是老的数据，导致缓存中的数据是脏的，而且还一直这样脏下去了。</p><ol start="4"><li>上面3步骤串讲梳理</li></ol><p>4 总结流程：</p><p>（1）请求A进行写操作，删除redis缓存后，工作正在进行中，更新mysql......A还么有彻底更新完mysql，还没commit</p><p>（2）请求B开工查询，查询redis发现缓存不存在(被A从redis中删除了)</p><p>（3）请求B继续，去数据库查询得到了mysql中的旧值(A还没有更新完)</p><p>（4）请求B将旧值写回redis缓存</p><p>（5）请求A将新值写入mysql数据库</p><p><strong>上述情况就会导致不一致的情形出现。</strong></p><table><thead><tr><th>时间</th><th>线程A</th><th>线程B</th><th>出现的问题</th></tr></thead><tbody><tr><td>t1</td><td>请求A进行写操作，删除缓存成功后，工作正在mysql进行中......</td><td></td><td></td></tr><tr><td>t2</td><td></td><td>1 缓存中读取不到，立刻读mysql，由于A还没有对mysql更新完，读到的是旧值 2 还把从mysql读取的旧值，写回了redis</td><td>1 A还没有更新完mysql，导致B读到了旧值 2 线程B遵守回写机制，把旧值写回redis，导致其它请求读取的还是旧值，A白干了。</td></tr><tr><td>t3</td><td>A更新完mysql数据库的值，over</td><td></td><td><strong>redis是被B写回的旧值，mysql是被A更新的新值。出现了，数据不一致问题。</strong></td></tr></tbody></table><p>总结一下：</p><table><thead><tr><th>先删除缓存，再更新数据库</th><th>如果数据库更新失败或超时或返回不及时，导致B线程请求访问缓存时发现redis里面没数据，缓存缺失，B再去读取mysql时，<strong>从数据库中读取到旧值，还写回redis，导致A白干了，o(╥﹏╥)o</strong></th></tr></thead></table><blockquote><p>解决方案</p></blockquote><ul><li><strong>采用延时双删策略</strong></li></ul><p><img src="'+m+'" alt="image-20230501223241068"></p><p><img src="'+v+'" alt="image-20230501223251216"></p><ul><li>双删方案面试题</li></ul><p><strong>这个删除该休眠多久呢？</strong></p><p>线程A sleep的时间，就需要大于线程B读取数据再写入缓存的时间。</p><p><code>这个时间怎么确定呢？</code></p><p><code>第一种方法：</code></p><p>在业务程序运行的时候，统计下线程读数据和写缓存的操作时间，自行评估自己的项目的读数据业务逻辑的耗时，</p><p>以此为基础来进行估算。然后写数据的休眠时间则在读数据业务逻辑的耗时基础上加<code>百毫秒</code>即可。</p><p>这么做的目的，就是确保读请求结束，写请求可以删除读请求造成的缓存脏数据。</p><p><code>第二种方法：</code></p><p><code>新启动一个后台监控程序，比如后面要讲解的WatchDog监控程序，会加时</code></p><p><strong>这种同步淘汰策略，吞吐量降低怎么办？</strong></p><p><img src="'+b+'" alt="image-20230501223447797"></p><p><strong>后续看门狗WatchDog源码分析</strong></p><ul><li>⚠️先更新数据库，在删除缓存</li></ul><blockquote><p>异常问题</p></blockquote><p><strong>先更新数据库，再删除缓存</strong></p><table><thead><tr><th>时间</th><th>线程A</th><th>线程B</th><th>出现的问题</th></tr></thead><tbody><tr><td>t1</td><td>更新数据库中的值......</td><td></td><td></td></tr><tr><td>t2</td><td></td><td>缓存中立刻命中，此时B读取的是缓存旧值。</td><td>A还没有来得及删除缓存的值，导致B缓存命中读到旧值。</td></tr><tr><td>t3</td><td>更新缓存的数据，over</td><td></td><td></td></tr></tbody></table><table><thead><tr><th>先更新数据库，再删除缓存</th><th>假如缓存删除失败或者来不及，导致请求再次访问redis时缓存命中，<code>读取到的是缓存旧值</code>。</th></tr></thead></table><blockquote><p>业务指导思想</p></blockquote>',129),q={href:"https://docs.microsoft.com/en-us/azure/architecture/patterns/cache-aside",target:"_blank",rel:"noopener noreferrer"},w=s('<p>我们后面的阿里巴巴canal也是类似的思想</p><p>上面的订阅binlog程序在mysql中有现成的中间件canal，可以完成订阅binlog日志的功能。</p><blockquote><p>解决方案</p></blockquote><p><img src="'+g+'" alt="image-20230501224019445"></p><p>1 可以把要删除的缓存值或者是要更新的数据库值暂存到消息队列中（例如使用Kafka/RabbitMQ等）。</p><p>2 当程序没有能够成功地删除缓存值或者是更新数据库值时，可以从消息队列中重新读取这些值，然后再次进行删除或更新。</p><p>3 如果能够成功地删除或更新，我们就要把这些值从消息队列中去除，以免重复操作，此时，我们也可以保证数据库和缓存的数据一致了，否则还需要再次进行重试</p><p>4 如果重试超过的一定次数后还是没有成功，我们就需要向业务层发送报错信息了，通知运维人员。</p><blockquote><p>类似经典的分布式事务问题，只有一个权威答案</p></blockquote><p><strong>最终一致性</strong></p><p>流量充值，先下发短信实际充值可能滞后5分钟，可以接收</p><p>电商发货，短信下单但是物流明天见</p><h2 id="_04、小总结" tabindex="-1"><a class="header-anchor" href="#_04、小总结" aria-hidden="true">#</a> 04、小总结</h2><blockquote><p><strong>如何选择方案？利弊如何？</strong></p></blockquote><p>在大多数业务场景下，</p><p>阳哥个人建议是(仅代表我个人，不权威)，优先<strong>使用先更新数据库，再删除缓存的方案(先更库→后删存)</strong>。理由如下：</p><p>1 先删除缓存值再更新数据库，有可能导致请求因缓存缺失而访问数据库，给数据库带来压力导致打满mysql。</p><p>2 如果业务应用中读取数据库和写缓存的时间不好估算，那么，延迟双删中的等待时间就不好设置。</p><p>多补充一句：如果<strong>使用先更新数据库，再删除缓存的方案</strong></p><table><thead><tr><th>如果业务层要求必须读取一致性的数据，那么我们就需要在更新数据库时，先在Redis缓存客户端暂停并发读请求，等数据库更新完、缓存值删除后，再读取数据，从而保证数据一致性，这是理论可以达到的效果，但实际，不推荐，因为真实生产环境中，分布式下很难做到实时一致性，<code>一般都是最终一致性，请大家参考。</code></th></tr></thead></table><blockquote><p><strong>一图总结</strong></p></blockquote><table><thead><tr><th>策略</th><th>高并发多线程条件下</th><th>问题</th><th>现象</th><th>解决方案</th></tr></thead><tbody><tr><td>先删除redis缓存，再更新mysql</td><td>无</td><td>缓存删除成功但数据库更新失败</td><td>Java程序从数据库中读到旧值</td><td>再次更新数据库，重试</td></tr><tr><td></td><td>有</td><td>缓存删除成功但数据库更新中......有并发读请求</td><td>并发请求从数据库读到旧值并回写到redis，导致后续都是从redis读取到旧值</td><td>延迟双删</td></tr><tr><td><strong>先更新mysql，再删除redis缓存</strong></td><td>无</td><td>数据库更新成功，但缓存删除失败</td><td>Java程序从redis中读到旧值</td><td>再次删除缓存，重试</td></tr><tr><td></td><td>有</td><td>数据库更新成功但缓存删除中......有并发读请求</td><td>并发请求从缓存读到旧值</td><td>等待redis删除完成，这段时间有数据不一致，短暂存在。</td></tr></tbody></table>',22);function _(f,A){const a=l("ExternalLinkIcon");return t(),e("div",null,[h,n("p",null,[n("a",q,[o("微软云"),c(a)])]),w])}const U=p(y,[["render",_],["__file","3.缓存双写一致性之更新策略探讨.html.vue"]]);export{U as default};
