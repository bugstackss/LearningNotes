import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as r,d as n,e,b as t,a,r as i}from"./app.9b10ba0a.js";const c="/assets/image-20230315023116619.44860110.png",l="/assets/image-20230315023056364.c7fe93b1.png",m="/assets/image-20230315142702693.8cdf7236.png",g="/assets/image-20230315142801242.ed7ff16e.png",u={},d=a('<h2 id="第一节-why-为什么要学习-maven" tabindex="-1"><a class="header-anchor" href="#第一节-why-为什么要学习-maven" aria-hidden="true">#</a> 第一节 Why？为什么要学习 Maven？</h2><h3 id="_1、maven-作为依赖管理工具" tabindex="-1"><a class="header-anchor" href="#_1、maven-作为依赖管理工具" aria-hidden="true">#</a> 1、Maven 作为依赖管理工具</h3><h4 id="_1-jar-包的规模" tabindex="-1"><a class="header-anchor" href="#_1-jar-包的规模" aria-hidden="true">#</a> ① jar 包的规模</h4><p>随着我们使用越来越多的框架，或者框架封装程度越来越高，项目中使用的jar包也越来越多。项目中，一个模块里面用到上百个jar包是非常正常的。</p><p>比如下面的例子，我们只用到 SpringBoot、SpringCloud 框架中的三个功能：</p><ul><li>Nacos 服务注册发现</li><li>Web 框架环境</li><li>图模板技术 Thymeleaf</li></ul><p>最终却导入了 106 个 jar 包：</p>',7),j=a("<p>org.springframework.security:spring-security-rsa:jar:1.0.9.RELEASE:compile</p><p>com.netflix.ribbon: ribbon:jar:2.3.0:compile</p><p>org.springframework.boot:spring-boot-starter-thymeleaf:jar:2.3.6.RELEASE:compile</p><p>commons-configuration:commons-configuration:jar:1.8:compile</p><p>org.apache.logging.log4j:log4j-api:jar:2.13.3:compile</p><p>org.springframework:spring-beans:jar:5.2.11.RELEASE:compile</p><p>org.springframework.cloud:spring-cloud-starter-netflix-ribbon:jar:2.2.6.RELEASE:compile</p><p>org.apache.tomcat.embed:tomcat-embed-websocket:jar:9.0.39:compile</p><p>com.alibaba.cloud:spring-cloud-alibaba-commons:jar:2.2.6.RELEASE:compile</p><p>org.bouncycastle:bcprov-jdk15on:jar:1.64:compile</p><p>org.springframework.security:spring-security-crypto:jar:5.3.5.RELEASE:compile</p><p>org.apache.httpcomponents:httpasyncclient:jar:4.1.4:compile</p><p>com.google.j2objc:j2objc-annotations:jar:1.3:compile</p><p>com.fasterxml.jackson.core:jackson-databind:jar:2.11.3:compile</p><p>io.reactivex:rxjava:jar:1.3.8:compile</p><p>ch.qos.logback:logback-classic:jar:1.2.3:compile</p><p>org.springframework:spring-web:jar:5.2.11.RELEASE:compile</p><p>io.reactivex:rxnetty-servo:jar:0.4.9:runtime</p><p>org.springframework:spring-core:jar:5.2.11.RELEASE:compile</p><p>io.github.openfeign.form:feign-form-spring:jar:3.8.0:compile</p><p>io.github.openfeign.form:feign-form:jar:3.8.0:compile</p><p>com.netflix.ribbon:ribbon-loadbalancer:jar:2.3.0:compile</p><p>org.apache.httpcomponents:httpcore:jar:4.4.13:compile</p><p>org.thymeleaf.extras:thymeleaf-extras-java8time:jar:3.0.4.RELEASE:compile</p><p>org.slf4j:jul-to-slf4j:jar:1.7.30:compile</p><p>com.atguigu.demo:demo09-base-entity:jar:1.0-SNAPSHOT:compile</p><p>org.yaml:snakeyaml:jar:1.26:compile</p><p>org.springframework.boot:spring-boot-starter-logging:jar:2.3.6.RELEASE:compile</p><p>io.reactivex:rxnetty-contexts:jar:0.4.9:runtime</p><p>org.apache.httpcomponents:httpclient:jar:4.5.13:compile</p><p>io.github.openfeign:feign-core:jar:10.10.1:compile</p><p>org.springframework.boot:spring-boot-starter-aop:jar:2.3.6.RELEASE:compile</p><p>org.hdrhistogram:HdrHistogram:jar:2.1.9:compile</p><p>org.springframework:spring-context:jar:5.2.11.RELEASE:compile</p><p>commons-lang:commons-lang:jar:2.6:compile</p><p>io.prometheus:simpleclient:jar:0.5.0:compile</p><p>ch.qos.logback:logback-core:jar:1.2.3:compile</p><p>org.springframework:spring-webmvc:jar:5.2.11.RELEASE:compile</p><p>com.sun.jersey:jersey-core:jar:1.19.1:runtime</p>",39),h={href:"http://javax.ws.rs",target:"_blank",rel:"noopener noreferrer"},b=a("<p>javax.inject:javax.inject:jar:1:runtime</p><p>org.springframework.cloud:spring-cloud-openfeign-core:jar:2.2.6.RELEASE:compile</p><p>com.netflix.ribbon:ribbon-core:jar:2.3.0:compile</p><p>com.netflix.hystrix:hystrix-core:jar:1.5.18:compile</p><p>com.netflix.ribbon:ribbon-transport:jar:2.3.0:runtime</p><p>org.springframework.boot:spring-boot-starter-json:jar:2.3.6.RELEASE:compile</p><p>org.springframework.cloud:spring-cloud-starter-openfeign:jar:2.2.6.RELEASE:compile</p><p>com.fasterxml.jackson.module:jackson-module-parameter-names:jar:2.11.3:compile</p><p>com.sun.jersey.contribs:jersey-apache-client4:jar:1.19.1:runtime</p><p>io.github.openfeign:feign-hystrix:jar:10.10.1:compile</p><p>io.github.openfeign:feign-slf4j:jar:10.10.1:compile</p><p>com.alibaba.nacos:nacos-client:jar:1.4.2:compile</p><p>org.apache.httpcomponents:httpcore-nio:jar:4.4.13:compile</p><p>com.sun.jersey:jersey-client:jar:1.19.1:runtime</p><p>org.springframework.cloud:spring-cloud-context:jar:2.2.6.RELEASE:compile</p><p>org.glassfish:jakarta.el:jar:3.0.3:compile</p><p>org.apache.logging.log4j:log4j-to-slf4j:jar:2.13.3:compile</p><p>com.fasterxml.jackson.datatype:jackson-datatype-jsr310:jar:2.11.3:compile</p><p>org.springframework.cloud:spring-cloud-commons:jar:2.2.6.RELEASE:compile</p><p>org.aspectj:aspectjweaver:jar:1.9.6:compile</p><p>com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-discovery:jar:2.2.6.RELEASE:compile</p><p>com.google.guava:listenablefuture:jar:9999.0-empty-to-avoid-conflict-with-guava:compile</p><p>com.alibaba.spring:spring-context-support:jar:1.0.10:compile</p><p>jakarta.annotation:jakarta.annotation-api:jar:1.3.5:compile</p><p>org.bouncycastle:bcpkix-jdk15on:jar:1.64:compile</p><p>com.netflix.netflix-commons:netflix-commons-util:jar:0.3.0:runtime</p><p>com.fasterxml.jackson.core:jackson-annotations:jar:2.11.3:compile</p><p>com.google.guava:guava:jar:29.0-jre:compile</p><p>com.google.guava:failureaccess:jar:1.0.1:compile</p><p>org.springframework.boot:spring-boot:jar:2.3.6.RELEASE:compile</p><p>com.fasterxml.jackson.datatype:jackson-datatype-jdk8:jar:2.11.3:compile</p><p>com.atguigu.demo:demo08-base-api:jar:1.0-SNAPSHOT:compile</p><p>org.springframework.cloud:spring-cloud-starter-netflix-archaius:jar:2.2.6.RELEASE:compile</p><p>org.springframework.boot:spring-boot-autoconfigure:jar:2.3.6.RELEASE:compile</p><p>org.slf4j:slf4j-api:jar:1.7.30:compile</p><p>commons-io:commons-io:jar:2.7:compile</p><p>org.springframework.cloud:spring-cloud-starter:jar:2.2.6.RELEASE:compile</p><p>org.apache.tomcat.embed:tomcat-embed-core:jar:9.0.39:compile</p><p>io.reactivex:rxnetty:jar:0.4.9:runtime</p><p>com.fasterxml.jackson.core:jackson-core:jar:2.11.3:compile</p><p>com.google.code.findbugs:jsr305:jar:3.0.2:compile</p><p>com.netflix.archaius:archaius-core:jar:0.7.6:compile</p><p>org.springframework.boot:spring-boot-starter-web:jar:2.3.6.RELEASE:compile</p><p>commons-codec:commons-codec:jar:1.14:compile</p><p>com.netflix.servo:servo-core:jar:0.12.21:runtime</p><p>com.google.errorprone:error_prone_annotations:jar:2.3.4:compile</p><p>org.attoparser:attoparser:jar:2.0.5.RELEASE:compile</p><p>com.atguigu.demo:demo10-base-util:jar:1.0-SNAPSHOT:compile</p><p>org.checkerframework:checker-qual:jar:2.11.1:compile</p><p>org.thymeleaf:thymeleaf-spring5:jar:3.0.11.RELEASE:compile</p><p>commons-fileupload:commons-fileupload:jar:1.4:compile</p><p>com.netflix.ribbon:ribbon-httpclient:jar:2.3.0:compile</p><p>com.netflix.netflix-commons:netflix-statistics:jar:0.1.1:runtime</p><p>org.unbescape:unbescape:jar:1.1.6.RELEASE:compile</p><p>org.springframework:spring-jcl:jar:5.2.11.RELEASE:compile</p><p>com.alibaba.nacos:nacos-common:jar:1.4.2:compile</p><p>commons-collections:commons-collections:jar:3.2.2:runtime</p><p>javax.persistence:persistence-api:jar:1.0:compile</p><p>com.alibaba.nacos:nacos-api:jar:1.4.2:compile</p><p>org.thymeleaf:thymeleaf:jar:3.0.11.RELEASE:compile</p><p>org.springframework:spring-aop:jar:5.2.11.RELEASE:compile</p><p>org.springframework.boot:spring-boot-starter:jar:2.3.6.RELEASE:compile</p><p>org.springframework.boot:spring-boot-starter-tomcat:jar:2.3.6.RELEASE:compile</p><p>org.springframework.cloud:spring-cloud-netflix-ribbon:jar:2.2.6.RELEASE:compile</p><p>org.springframework:spring-expression:jar:5.2.11.RELEASE:compile</p><p>org.springframework.cloud:spring-cloud-netflix-archaius:jar:2.2.6.RELEASE:compile</p>",66),k=a(`<p>而如果使用 Maven 来引入这些 jar 包只需要配置三个『<strong>依赖</strong>』：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>    <span class="token comment">&lt;!-- Nacos 服务注册发现启动器 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- web启动器依赖 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- 视图模板技术 thymeleaf --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-jar-包的来源" tabindex="-1"><a class="header-anchor" href="#_2-jar-包的来源" aria-hidden="true">#</a> ② jar 包的来源</h4><ul><li>这个jar包所属技术的官网。官网通常是英文界面，网站的结构又不尽相同，甚至找到下载链接还发现需要通过特殊的工具下载。</li><li>第三方网站提供下载。问题是不规范，在使用过程中会出现各种问题。 <ul><li>jar包的名称</li><li>jar包的版本</li><li>jar包内的具体细节</li></ul></li><li>而使用 Maven 后，依赖对应的 jar 包能够<strong>自动下载</strong>，方便、快捷又规范。</li></ul><h4 id="_3-jar-包之间的依赖关系" tabindex="-1"><a class="header-anchor" href="#_3-jar-包之间的依赖关系" aria-hidden="true">#</a> ③ jar 包之间的依赖关系</h4><p>框架中使用的 jar 包，不仅数量庞大，而且彼此之间存在错综复杂的依赖关系。依赖关系的复杂程度，已经上升到了完全不能靠人力手动解决的程度。另外，jar 包之间有可能产生冲突。进一步增加了我们在 jar 包使用过程中的难度。</p><p>下面是前面例子中 jar 包之间的依赖关系：</p><p><img src="`+c+'" alt="image-20230315023116619"></p><p>而实际上 jar 包之间的依赖关系是普遍存在的，如果要由程序员手动梳理无疑会增加极高的学习成本，而这些工作又对实现业务功能毫无帮助。</p><p>而使用 Maven 则几乎不需要管理这些关系，极个别的地方调整一下即可，极大的减轻了我们的工作量。</p><h3 id="_2、maven-作为构建管理工具" tabindex="-1"><a class="header-anchor" href="#_2、maven-作为构建管理工具" aria-hidden="true">#</a> 2、Maven 作为构建管理工具</h3><h4 id="_1你没有注意过的构建" tabindex="-1"><a class="header-anchor" href="#_1你没有注意过的构建" aria-hidden="true">#</a> ①你没有注意过的构建</h4><p>你可以不使用 Maven，但是构建必须要做。当我们使用 IDEA 进行开发时，构建是 IDEA 替我们做的。</p><h4 id="_2脱离-ide-环境仍需构建" tabindex="-1"><a class="header-anchor" href="#_2脱离-ide-环境仍需构建" aria-hidden="true">#</a> ②脱离 IDE 环境仍需构建</h4><p><img src="'+l+'" alt="image-20230315023056364"></p><h3 id="_3、结论" tabindex="-1"><a class="header-anchor" href="#_3、结论" aria-hidden="true">#</a> 3、结论</h3><ul><li><strong>管理规模庞大的 jar 包，需要专门工具。</strong></li><li><strong>脱离 IDE 环境执行构建操作，需要专门工具。</strong></li></ul><h2 id="第二节-what-什么是-maven" tabindex="-1"><a class="header-anchor" href="#第二节-what-什么是-maven" aria-hidden="true">#</a> 第二节 What？什么是 Maven？</h2><p>Maven 是 Apache 软件基金会组织维护的一款专门为 Java 项目提供<strong>构建</strong>和<strong>依赖</strong>管理支持的工具。</p><p><img src="'+m+'" alt="image-20230315142702693"></p><h3 id="_1、构建" tabindex="-1"><a class="header-anchor" href="#_1、构建" aria-hidden="true">#</a> 1、构建</h3><p>Java 项目开发过程中，构建指的是使用**『原材料生产产品』**的过程。</p><ul><li><p>原材料</p><ul><li>Java 源代码</li><li>基于 HTML 的 Thymeleaf 文件</li><li>图片</li><li>配置文件</li><li>……</li></ul></li><li><p>产品</p><ul><li>一个可以在服务器上运行的项目</li></ul></li></ul><p>构建过程包含的主要的环节：</p><ul><li>清理：删除上一次构建的结果，为下一次构建做好准备</li><li>编译：Java 源程序编译成 *.class 字节码文件</li><li>测试：运行提前准备好的测试程序</li><li>报告：针对刚才测试的结果生成一个全面的信息</li><li>打包 <ul><li>Java工程：jar包</li><li>Web工程：war包</li></ul></li><li>安装：把一个 Maven 工程经过打包操作生成的 jar 包或 war 包存入 Maven 仓库</li><li>部署 <ul><li>部署 jar 包：把一个 jar 包部署到 Nexus 私服服务器上</li><li>部署 war 包：借助相关 Maven 插件（例如 cargo），将 war 包部署到 Tomcat 服务器上</li></ul></li></ul><h3 id="_2、依赖" tabindex="-1"><a class="header-anchor" href="#_2、依赖" aria-hidden="true">#</a> 2、依赖</h3><p>如果 A 工程里面用到了 B 工程的类、接口、配置文件等等这样的资源，那么我们就可以说 A 依赖 B。例如：</p><ul><li>junit-4.12 依赖 hamcrest-core-1.3</li><li>thymeleaf-3.0.12.RELEASE 依赖 ognl-3.1.26 <ul><li>ognl-3.1.26 依赖 javassist-3.20.0-GA</li></ul></li><li>thymeleaf-3.0.12.RELEASE 依赖 attoparser-2.0.5.RELEASE</li><li>thymeleaf-3.0.12.RELEASE 依赖 unbescape-1.1.6.RELEASE</li><li>thymeleaf-3.0.12.RELEASE 依赖 slf4j-api-1.7.26</li></ul><p>依赖管理中要解决的具体问题：</p><ul><li>jar 包的下载：使用 Maven 之后，jar 包会从规范的远程仓库下载到本地</li><li>jar 包之间的依赖：通过依赖的传递性自动完成</li><li>jar 包之间的冲突：通过对依赖的配置进行调整，让某些jar包不会被导入</li></ul><h3 id="_3、maven-的工作机制" tabindex="-1"><a class="header-anchor" href="#_3、maven-的工作机制" aria-hidden="true">#</a> 3、Maven 的工作机制</h3><p><img src="'+g+'" alt="image-20230315142801242"></p>',32);function f(E,v){const o=i("ExternalLinkIcon");return s(),r("div",null,[d,n("blockquote",null,[j,n("p",null,[n("a",h,[e("javax.ws.rs"),t(o)]),e(":jsr311-api:jar:1.1.1:runtime")]),b]),k])}const y=p(u,[["render",f],["__file","第一章 Maven 概述.html.vue"]]);export{y as default};
