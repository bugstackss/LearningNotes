import{_ as a}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as e,c,a as i}from"./app.9b10ba0a.js";const t="/assets/612b4d83-7eba-475c-b563-005a053f1e2e.bb136e49.png",s="/assets/b07babe0-dd9d-466c-ac9e-ec003c9dcf10.4064c3df.png",l="/assets/6092cece-68f5-4670-8335-0d161c71bf62.7cdca34a.png",r="/assets/e90df598-7a2c-48e0-bdc9-3ace87967c89.0a942f2f.png",d="/assets/e3226b08-1aac-4129-9809-c216078ed873.330fd517.png",n={},o=i('<h1 id="_01、jdbc简介" tabindex="-1"><a class="header-anchor" href="#_01、jdbc简介" aria-hidden="true">#</a> 01、JDBC简介</h1><h2 id="_1-1-数据的持久化" tabindex="-1"><a class="header-anchor" href="#_1-1-数据的持久化" aria-hidden="true">#</a> 1.1 数据的持久化</h2><ul><li>持久化(persistence)：把数据保存到可掉电式存储设备中以供之后使用。大多数情况下，特别是企业级应用，数据持久化意味着将内存中的数据保存到硬盘上加以”固化”，而持久化的实现过程大多通过各种关系数据库来完成。</li><li>持久化的主要应用是将内存中的数据存储在关系型数据库中，当然也可以存储在磁盘文件、XML数据文件中。</li></ul><p><img src="'+t+'" alt="612b4d83-7eba-475c-b563-005a053f1e2e"></p><h2 id="_1-2-java中的数据存储技术" tabindex="-1"><a class="header-anchor" href="#_1-2-java中的数据存储技术" aria-hidden="true">#</a> 1.2 Java中的数据存储技术</h2><ul><li><p>在Java中，数据库存取技术可分为如下几类：</p><ul><li>JDBC直接访问数据库</li><li>JDO (Java Data Object )技术</li><li>第三方O/R工具，如Hibernate, Mybatis 等</li></ul></li><li><p>JDBC是java访问数据库的基石，JDO、Hibernate、MyBatis等只是更好的封装了JDBC。</p></li></ul><h2 id="_1-3-jdbc介绍" tabindex="-1"><a class="header-anchor" href="#_1-3-jdbc介绍" aria-hidden="true">#</a> 1.3 JDBC介绍</h2><ul><li>JDBC(Java Database Connectivity)是一个<strong>独立于特定数据库管理系统、通用的SQL数据库存取和操作的公共接口</strong>（一组API），定义了用来访问数据库的标准Java类库，<code>（java.sql,javax.sql</code>）使用这些类库可以以一种标准的方法、方便地访问数据库资源。</li><li>JDBC为访问不同的数据库提供了一种统一的途径，为开发者屏蔽了一些细节问题。</li><li>JDBC的目标是使Java程序员使用JDBC可以连接任何提供了JDBC驱动程序的数据库系统，这样就使得程序员无需对特定的数据库系统的特点有过多的了解，从而大大简化和加快了开发过程。</li><li>如果没有JDBC，那么Java程序访问数据库时是这样的：</li></ul><p><img src="'+s+'" alt="b07babe0-dd9d-466c-ac9e-ec003c9dcf10"></p><ul><li>有了JDBC，Java程序访问数据库时是这样的：</li></ul><p><img src="'+l+'" alt="6092cece-68f5-4670-8335-0d161c71bf62"></p><ul><li>总结如下：</li></ul><p><img src="'+r+'" alt="e90df598-7a2c-48e0-bdc9-3ace87967c89"></p><h2 id="_1-4-jdbc体系结构" tabindex="-1"><a class="header-anchor" href="#_1-4-jdbc体系结构" aria-hidden="true">#</a> 1.4 JDBC体系结构</h2><ul><li>JDBC接口（API）包括两个层次： <ul><li><strong>面向应用的API</strong>：Java API，抽象接口，供应用程序开发人员使用（连接数据库，执行SQL语句，获得结果）。</li><li><strong>面向数据库的API</strong>：Java Driver API，供开发商开发数据库驱动程序用。</li></ul></li></ul><blockquote><p><strong>JDBC是sun公司提供一套用于数据库操作的接口，java程序员只需要面向这套接口编程即可。</strong></p><p><strong>不同的数据库厂商，需要针对这套接口，提供不同实现。不同的实现的集合，即为不同数据库的驱动。 ————面向接口编程</strong></p></blockquote><h2 id="_1-5-jdbc程序编写步骤" tabindex="-1"><a class="header-anchor" href="#_1-5-jdbc程序编写步骤" aria-hidden="true">#</a> 1.5 JDBC程序编写步骤</h2><p><img src="'+d+'" alt="e3226b08-1aac-4129-9809-c216078ed873"></p><blockquote><p>补充：ODBC(<strong>Open Database Connectivity</strong>，开放式数据库连接)，是微软在Windows平台下推出的。使用者在程序中只需要调用ODBC API，由 ODBC 驱动程序将调用转换成为对特定的数据库的调用请求。</p></blockquote>',19),b=[o];function _(h,p){return e(),c("div",null,b)}const f=a(n,[["render",_],["__file","01、JDBC简介.html.vue"]]);export{f as default};
