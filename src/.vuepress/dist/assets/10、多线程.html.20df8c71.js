const e=JSON.parse('{"key":"v-4806eb30","path":"/notes/javacore/java/10%E3%80%81%E5%A4%9A%E7%BA%BF%E7%A8%8B.html","title":"10、多线程","lang":"zh-CN","frontmatter":{"title":"10、多线程","category":["Java"],"tag":["Java"],"sticky":false,"star":false,"article":true,"timeline":true,"description":"01、基本概念：程序、进程、线程 程序(program)：为完成特定任务、用某种语言编写的一组指令的集合。即指一段静态的代码，静态对象。; 进程(process)：程序的一次执行过程，或是正在运行的一个程序。是一个动态的过程：有它自身的产生、存在和消亡的过程。——生命周期; 如：运行中的QQ，运行中的MP3播放器程序是静态的，进程是动态的; 进程作为资...","head":[["meta",{"property":"og:url","content":"https://Ragnarokoo.github.io/LearningNotes/notes/javacore/java/10%E3%80%81%E5%A4%9A%E7%BA%BF%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"📚全栈开发学习指南"}],["meta",{"property":"og:title","content":"10、多线程"}],["meta",{"property":"og:description","content":"01、基本概念：程序、进程、线程 程序(program)：为完成特定任务、用某种语言编写的一组指令的集合。即指一段静态的代码，静态对象。; 进程(process)：程序的一次执行过程，或是正在运行的一个程序。是一个动态的过程：有它自身的产生、存在和消亡的过程。——生命周期; 如：运行中的QQ，运行中的MP3播放器程序是静态的，进程是动态的; 进程作为资..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://Ragnarokoo.github.io/LearningNotes/"}],["meta",{"property":"og:updated_time","content":"2023-05-31T09:16:41.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"10、多线程"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:modified_time","content":"2023-05-31T09:16:41.000Z"}]]},"excerpt":"","headers":[{"level":2,"title":"01、基本概念：程序、进程、线程","slug":"_01、基本概念-程序、进程、线程","link":"#_01、基本概念-程序、进程、线程","children":[{"level":3,"title":"1.1、进程与线程","slug":"_1-1、进程与线程","link":"#_1-1、进程与线程","children":[]},{"level":3,"title":"1.2、使用多线程的优点","slug":"_1-2、使用多线程的优点","link":"#_1-2、使用多线程的优点","children":[]},{"level":3,"title":"1.3、何时需要多线程","slug":"_1-3、何时需要多线程","link":"#_1-3、何时需要多线程","children":[]}]},{"level":2,"title":"02、线程的创建和使用","slug":"_02、线程的创建和使用","link":"#_02、线程的创建和使用","children":[{"level":3,"title":"2.1、线程的创建和启动","slug":"_2-1、线程的创建和启动","link":"#_2-1、线程的创建和启动","children":[]},{"level":3,"title":"2.2、Thread类","slug":"_2-2、thread类","link":"#_2-2、thread类","children":[]},{"level":3,"title":"2.3、API中创建线程的两种方式","slug":"_2-3、api中创建线程的两种方式","link":"#_2-3、api中创建线程的两种方式","children":[]}]},{"level":2,"title":"03、线程的生命周期","slug":"_03、线程的生命周期","link":"#_03、线程的生命周期","children":[]},{"level":2,"title":"04、线程的同步","slug":"_04、线程的同步","link":"#_04、线程的同步","children":[{"level":3,"title":"4.1、同步代码块处理实现Runnable的线程安全问题","slug":"_4-1、同步代码块处理实现runnable的线程安全问题","link":"#_4-1、同步代码块处理实现runnable的线程安全问题","children":[]},{"level":3,"title":"4.2、同步代码块处理继承Thread类的线程安全问题","slug":"_4-2、同步代码块处理继承thread类的线程安全问题","link":"#_4-2、同步代码块处理继承thread类的线程安全问题","children":[]},{"level":3,"title":"4.3、同步方法处理实现Runnable的线程安全问题","slug":"_4-3、同步方法处理实现runnable的线程安全问题","link":"#_4-3、同步方法处理实现runnable的线程安全问题","children":[]},{"level":3,"title":"4.4、同步方法处理继承Thread类的线程安全问题","slug":"_4-4、同步方法处理继承thread类的线程安全问题","link":"#_4-4、同步方法处理继承thread类的线程安全问题","children":[]},{"level":3,"title":"4.5、线程安全的单例模式之懒汉式","slug":"_4-5、线程安全的单例模式之懒汉式","link":"#_4-5、线程安全的单例模式之懒汉式","children":[]},{"level":3,"title":"4.6、死锁的问题","slug":"_4-6、死锁的问题","link":"#_4-6、死锁的问题","children":[]},{"level":3,"title":"4.7、Lock锁方式解决线程安全问题","slug":"_4-7、lock锁方式解决线程安全问题","link":"#_4-7、lock锁方式解决线程安全问题","children":[]}]},{"level":2,"title":"05、线程的通信","slug":"_05、线程的通信","link":"#_05、线程的通信","children":[{"level":3,"title":"5.1、sleep()和wait()的异同","slug":"_5-1、sleep-和wait-的异同","link":"#_5-1、sleep-和wait-的异同","children":[]},{"level":3,"title":"5.2、经典例题：生产者/消费者问题","slug":"_5-2、经典例题-生产者-消费者问题","link":"#_5-2、经典例题-生产者-消费者问题","children":[]}]},{"level":2,"title":"6、JDK5.0新增线程创建方式","slug":"_6、jdk5-0新增线程创建方式","link":"#_6、jdk5-0新增线程创建方式","children":[{"level":3,"title":"6.1、创建多线程的方式三：实现Callable接口","slug":"_6-1、创建多线程的方式三-实现callable接口","link":"#_6-1、创建多线程的方式三-实现callable接口","children":[]},{"level":3,"title":"6.2、使用线程池的好处","slug":"_6-2、使用线程池的好处","link":"#_6-2、使用线程池的好处","children":[]},{"level":3,"title":"6.3、创建多线程的方式四：使用线程池","slug":"_6-3、创建多线程的方式四-使用线程池","link":"#_6-3、创建多线程的方式四-使用线程池","children":[]}]}],"git":{"createdTime":1685524601000,"updatedTime":1685524601000,"contributors":[{"name":"kirito","email":"2724964601@qq.com","commits":1}]},"readingTime":{"minutes":26.07,"words":7822},"filePathRelative":"notes/javacore/java/10、多线程.md","localizedDate":"2023年5月31日"}');export{e as data};
