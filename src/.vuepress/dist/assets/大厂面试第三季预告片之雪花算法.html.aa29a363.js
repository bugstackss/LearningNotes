import{_ as o}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as p,c as l,d as n,e as s,b as e,a as t,r as c}from"./app.9b10ba0a.js";const i="/assets/795b3d1fa01bbd15d8b7b85c2724bf42.575c02df.png",r={},u=t('<h2 id="_01、大厂面试第三季预告片之雪花算法-上" tabindex="-1"><a class="header-anchor" href="#_01、大厂面试第三季预告片之雪花算法-上" aria-hidden="true">#</a> 01、大厂面试第三季预告片之雪花算法(上)</h2><p><strong>为什么需要分布式全局唯一ID以及分布式ID的业务需求？集群高并发情况下如何保证分布式唯一全局Id生成？</strong></p><p>在复杂分布式系统中，往往需婴对大量的数据和消息进行唯一标识，如在美团点评的金融、支付、餐饮、酒店，猫眼电影等产品的系统中数据日渐增长，对数据分库分表后需要有一个唯一ID来标识一条数据或消息。特别一点的如订单、骑手、优惠券也都雷要有唯一ID做标识。此时一个能够生成全局唯一ID的系统是非常必要的。</p><p><strong>D生成规则部分硬性要求</strong></p><ul><li><p><em>全局唯一</em>：不能出现重复的ID号，既然是唯一-标识，这是最基本的要求</p></li><li><p><em>趋势递增</em>：在MySQL的InnoDB引擎中使用的是聚集索引，由于多数RDBMS使用Btree的数据结构来存储索引数据，在主键的选择上面我们应该尽量使用有序的主键保证写入性能。</p></li><li><p>单调递增：保证下一个ID一定大于上一个ID，例如事务版本号、IM增量消息、排序等特殊需求</p></li><li><p>信息安全：如果ID是连续的，恶意用户的扒取工作就非常容易做了，直接按照顺序下载指定URL即可。如果是订单号就更危险了，竞对可以直接知道我们一天的单量。所以在一些应用场景下，需要ID无规则不规则，让竞争对手否好猜。</p></li><li><p><em>含时间戳</em>：这样就能够在开发中快速了解这个分布式id的生成时间。</p></li></ul><p><strong>ID号生成系统的可用性要求</strong></p><ul><li><em>高可用</em>：发一个获取分布式ID的请求，服务器就要保证99.999%的情况下给我创建一个唯一分布式ID。</li><li><em>低延迟</em>：发一个获取分布式ID的请求，服务器就要快，极速。</li><li><em>高QPS</em>：假如并发一口气10万个创建分布式ID请求同时杀过来，服务器要顶的住且一下子成功创建10万个分布式ID。</li></ul><p><strong>一般通用方案</strong></p><p><em>UUID</em></p><p>UUID(Universally Unique ldentifer)的标准型式包含32个16进制数字，以连了号分为五段，形式为8-4-4-4-12的36个字符， 示例：550e8400-e29b-41d4-a716-446655440000</p><p>性能非常高：本地生成，没有网络消耗</p><p>如果只是考虑唯一性，那就选用它吧</p><p>但是，入数据库性能差</p><p><strong>为什么无序的UUID会导致入库性能变差呢？</strong></p><ol><li><p>无序，无法预测他的生成顺序，不能生成递增有序的数字。首先分布式ID一般都会作为主键， 但是安装MySQL官方推荐主键要尽量越短越好，UUID每一个都很长，所以不是很推荐。</p></li><li><p>主键，ID作为主键时在特定的环境会存在一些问题。比如做DB主键的场景下，UUID就非常不适用MySQL官方有明确的建议主键要尽量越短越好36个字符长度的UUID不符合要求。</p></li><li><p>索引，既然分布式ID是主键，然后主键是包含索引的，然后MySQL的索引是通过B+树来实现的，每一次新的UUID数据的插入，为了查询的优化，都会对索引底层的B+树进行修改，因为UUID数据是无序的，所以每一次UUID数据的插入都会对主键地械的B+树进行很大的修改，这一点很不好。 插入完全无序，不但会导致一-些中间节点产生分裂，也会白白创造出很多不饱和的节点，这样大大降低了数据库插入的性能。</p></li></ol>',15),d={href:"https://dev.mysql.com/doc/refman/8.0/en/glossary.html#glos_secondary_index",target:"_blank",rel:"noopener noreferrer"},k=n("code",null,"InnoDB",-1),m=n("code",null,"InnoDB",-1),v=n("p",null,"If the primary key is long, the secondary indexes use more space, so it is advantageous to have a short primary key.",-1),b={href:"https://dev.mysql.com/doc/refman/8.0/en/innodb-index-types.html",target:"_blank",rel:"noopener noreferrer"},_=t(`<p><strong>数据库自增主键</strong></p><p><em>单机</em></p><p>在单机里面，数据库的自增ID机制的主要原理是：数据库自增ID和MySQL数据库的replace into实现的。</p><p>REPLACE INTO的含义是插入一条记录，如果表中唯一索引的值遇到冲突，则替换老数据。</p><p>这里的replace into跟inset功能类似，不同点在于：replace into首先尝试插入数据列表中，如果发现表中已经有此行数据（根据主键或唯一索引判断）则先删除，再插入。否则直接插入新数据。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t_test<span class="token punctuation">(</span>
    id <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>
    stub <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
    <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> stub<span class="token punctuation">(</span>stub<span class="token punctuation">)</span>
<span class="token punctuation">)</span>

<span class="token keyword">SELECT</span> <span class="token operator">*</span> FROMt_ test<span class="token punctuation">;</span>

<span class="token keyword">REPLACE</span> <span class="token keyword">INTO</span> t_test <span class="token punctuation">(</span>stub<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">SELECT</span> LAST_INSERT_ID<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>集群分布式</em></p><p>那数据库自增ID机制适合作分布式ID吗？答案是不太适合</p><p>1：系统水平扩展比较困难，比如定义好了步长和机器台数之后，如果要添加机器该怎么做？假设现在只有一台机器发号是1，2，3，4，5（步长是1），这个时候需要扩容机器一台。可以这样做：把第二台机器的初始值设置得比第一台超过很多，貌似还好，现在想象一下如果我们线上有100台机器，这个时候要扩容该怎么做？简直是噩梦，所以系统水平扩展方案复杂难以实现。</p><p>2：数据库压力还是很大，每次获取ID都得读写一次数据库， 非常影响性能，不符合分布式ID里面的延迟低和要高QPS的规则（在高并发下，如果都去数据库里面获取id，那是非常影响性能的）</p><p><em>基于Redis生成全局ID策略</em></p><p>因为Redis是单线的天生保证原子性，可以使用原子操作INCR和INCRBY来实现</p><p>注意：在Redis集群情况下，同样和MySQL一样需要设置不同的增长步长，同时key一定要设置有效期可以使用Redis集群来获取更高的吞吐量。</p><p>假如一个集群中有5台Redis。可以初始化每台Redis的值分别是1,2,3,4,5，然后步长都是5。</p><p>各个Redis生成的ID为:</p><p>A：1, 6, 11, 16, 21</p><p>B：2, 7 , 12, 17, 22</p><p>C：3, 8, 13, 18, 23</p><p>D：4, 9, 14, 19, 24</p><p>E：5, 10, 15, 20, 25</p><h2 id="_02、大厂面试第三季预告片之雪花算法-下" tabindex="-1"><a class="header-anchor" href="#_02、大厂面试第三季预告片之雪花算法-下" aria-hidden="true">#</a> 02、大厂面试第三季预告片之雪花算法(下)</h2><p>Twitter的分布式自增ID算法snowflake</p><p>概述</p><p>Twitter的snowflake解决了这种需求，最初Twitter把存储系统从MySQL迁移到Cassandra（由Facebook开发一套开源分布式NoSQL数据库系统）。因为Cassandra没有顺序ID生成机制，所以开发了这样一套全局唯一生成服务。</p><p>Twitter的分布式雪花算法SnowFlake ，经测试snowflake 每秒能够产生26万个自增可排序的ID</p><ol><li>Twitter的SnowFlake生成ID能够按照时间有序生成。</li><li>SnowFlake算法生成ID的结果是一个64bit大小的整数， 为一个Long型（转换成字符串后长度最多19）。</li><li>分布式系统内不会产生ID碰撞（由datacenter和workerld作区分）并且效率较高。</li></ol><p>分布式系统中，有一些需要使用全局唯一ID的场景， 生成ID的基本要求：</p><ol><li>在分布式的环境下必须全局且唯一 。</li><li>一般都需要单调递增，因为一般唯一ID都会存到数据库，而Innodb的特性就是将内容存储在主键索引树上的叶子节点而且是从左往右，递增的，所以考虑到数据库性能，一般生成的ID也最好是单调递增。 为了防止ID冲突可以使用36位的UUID，但是UUID有一些缺点， 首先他相对比较长， 另外UUID一般是无序的。</li><li>可能还会需要无规则，因为如果使用唯一ID作为订单号这种，为了不然别人知道一天的订单量是多少，就需要这个规则。</li></ol><p><strong>结构</strong></p><p>雪花算法的几个核心组成部分：</p><p><img src="`+i+`" alt="img"></p><p>号段解析：</p><p>1bit：</p><p>不用，因为二进制中最高位是符号位，1表示负数，0表示正数。生成的id一般都是用整数，所以最高位固定为0。</p><p>41bit - 时间戳，用来记录时间戳，毫秒级：</p><ul><li>41位可以表示2^41 -1个数字。</li><li>如果只用来表示正整数（计算机中正数包含0），可以表示的数值范围是：0至2^ 41 − 1，<strong>减1是因为可表示的数值范围是从0开始算的，而不是1</strong>。</li><li>也就是说41位可以表示<code>2^41</code>−1个毫秒的值，转化成单位年则是( 2^41 − 1 ) / ( 1000 ∗ 60 ∗ 60 ∗ 24 ∗ 365 ) = =69年。</li></ul><p>10bit - 工作机器ID，用来记录工作机器ID：</p><ul><li><p>可以部署在2^10 = =1024个节点，包括5位DataCenterId和5位Workerld。</p></li><li><p>5位(bit) 可以表示的最大正整数是2^5-1=31,即可以用0、1、2、3、…31这32个数字，来表示不同的DataCenterld或Workerld。</p></li></ul><p>12bit - 序列号，用来记录同毫秒内产生的不同id。</p><ul><li>12位(bit) 可以表示的最大正整数是2^12 − 1 = 4095， 即可以用0、1、2、 3、…4094这4095个数字，来表示同一机器同一时间截(毫秒)内产生的4095个ID序号。</li></ul><p>SnowFlake可以保证：</p><ul><li>所有生成的ID按时间趋势递增。</li><li>整个分布式系统内不会产生重复id（因为有DataCenterId和Workerld来做区分)</li></ul><p><strong>源码</strong></p><p>以下代码仅供学习：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Twitter_Snowflake
 * SnowFlake的结构如下(每部分用-分开):
 * 0 - 0000000000 0000000000 0000000000 0000000000 0 - 00000 - 00000 - 000000000000
 * 1位标识，由于long基本类型在Java中是带符号的，最高位是符号位，正数是0，负数是1，所以id一般是正数，最高位是0
 * 41位时间戳(毫秒级)，注意，41位时间戳不是存储当前时间的时间戳，而是存储时间戳的差值（当前时间戳 - 开始时间戳)
 * 得到的值），这里的的开始时间戳，一般是我们的id生成器开始使用的时间，由我们程序来指定的（如下面程序SnowflakeIdWorker类的startTime属性）。41位的时间戳，可以使用69年，年T = (1L &lt;&lt; 41) / (1000L * 60 * 60 * 24 * 365) = 69
 * 10位的数据机器位，可以部署在1024个节点，包括5位datacenterId和5位workerId
 * 12位序列，毫秒内的计数，12位的计数顺序号支持每个节点每毫秒(同一机器，同一时间戳)产生4096个ID序号
 * 加起来刚好64位，为一个Long型。
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SnowflakeIdWorker</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/** 开始时间戳 (2015-01-01) */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> twepoch <span class="token operator">=</span> <span class="token number">1420041600000L</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/** 机器id所占的位数 */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> workerIdBits <span class="token operator">=</span> <span class="token number">5L</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/** 数据标识id所占的位数 */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> datacenterIdBits <span class="token operator">=</span> <span class="token number">5L</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/** 支持的最大机器id，结果是31 (这个移位算法可以很快的计算出几位二进制数所能表示的最大十进制数) */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> maxWorkerId <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1L</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1L</span> <span class="token operator">&lt;&lt;</span> workerIdBits<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/** 支持的最大数据标识id，结果是31 */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> maxDatacenterId <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1L</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1L</span> <span class="token operator">&lt;&lt;</span> datacenterIdBits<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/** 序列在id中占的位数 */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> sequenceBits <span class="token operator">=</span> <span class="token number">12L</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/** 机器ID向左移12位 */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> workerIdShift <span class="token operator">=</span> sequenceBits<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/** 数据标识id向左移17位(12+5) */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> datacenterIdShift <span class="token operator">=</span> sequenceBits <span class="token operator">+</span> workerIdBits<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/** 时间戳向左移22位(5+5+12) */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> timestampLeftShift <span class="token operator">=</span> sequenceBits <span class="token operator">+</span> workerIdBits <span class="token operator">+</span> datacenterIdBits<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/** 生成序列的掩码，这里为4095 (0b111111111111=0xfff=4095) */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> sequenceMask <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1L</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1L</span> <span class="token operator">&lt;&lt;</span> sequenceBits<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/** 工作机器ID(0~31) */</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> workerId<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/** 数据中心ID(0~31) */</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> datacenterId<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/** 毫秒内序列(0~4095) */</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> sequence <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/** 上次生成ID的时间戳 */</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> lastTimestamp <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1L</span><span class="token punctuation">;</span>

    <span class="token comment">//==============================Constructors=====================================</span>
    <span class="token doc-comment comment">/**
     * 构造函数
     * <span class="token keyword">@param</span> <span class="token parameter">workerId</span> 工作ID (0~31)
     * <span class="token keyword">@param</span> <span class="token parameter">datacenterId</span> 数据中心ID (0~31)
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">SnowflakeIdWorker</span><span class="token punctuation">(</span><span class="token keyword">long</span> workerId<span class="token punctuation">,</span> <span class="token keyword">long</span> datacenterId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>workerId <span class="token operator">&gt;</span> maxWorkerId <span class="token operator">||</span> workerId <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;worker Id can&#39;t be greater than %d or less than 0&quot;</span><span class="token punctuation">,</span> maxWorkerId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>datacenterId <span class="token operator">&gt;</span> maxDatacenterId <span class="token operator">||</span> datacenterId <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;datacenter Id can&#39;t be greater than %d or less than 0&quot;</span><span class="token punctuation">,</span> maxDatacenterId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>workerId <span class="token operator">=</span> workerId<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>datacenterId <span class="token operator">=</span> datacenterId<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// ==============================Methods==========================================</span>
    <span class="token doc-comment comment">/**
     * 获得下一个ID (该方法是线程安全的)
     * <span class="token keyword">@return</span> SnowflakeId
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">long</span> <span class="token function">nextId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> timestamp <span class="token operator">=</span> <span class="token function">timeGen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//如果当前时间小于上一次ID生成的时间戳，说明系统时钟回退过这个时候应当抛出异常</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>timestamp <span class="token operator">&lt;</span> lastTimestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>
                    <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;Clock moved backwards.  Refusing to generate id for %d milliseconds&quot;</span><span class="token punctuation">,</span> lastTimestamp <span class="token operator">-</span> timestamp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//如果是同一时间生成的，则进行毫秒内序列</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>lastTimestamp <span class="token operator">==</span> timestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            sequence <span class="token operator">=</span> <span class="token punctuation">(</span>sequence <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> sequenceMask<span class="token punctuation">;</span>
            <span class="token comment">//毫秒内序列溢出</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>sequence <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">//阻塞到下一个毫秒,获得新的时间戳</span>
                timestamp <span class="token operator">=</span> <span class="token function">tilNextMillis</span><span class="token punctuation">(</span>lastTimestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//时间戳改变，毫秒内序列重置</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            sequence <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//上次生成ID的时间戳</span>
        lastTimestamp <span class="token operator">=</span> timestamp<span class="token punctuation">;</span>

        <span class="token comment">//移位并通过或运算拼到一起组成64位的ID</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>timestamp <span class="token operator">-</span> twepoch<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> timestampLeftShift<span class="token punctuation">)</span> <span class="token comment">//</span>
                <span class="token operator">|</span> <span class="token punctuation">(</span>datacenterId <span class="token operator">&lt;&lt;</span> datacenterIdShift<span class="token punctuation">)</span> <span class="token comment">//</span>
                <span class="token operator">|</span> <span class="token punctuation">(</span>workerId <span class="token operator">&lt;&lt;</span> workerIdShift<span class="token punctuation">)</span> <span class="token comment">//</span>
                <span class="token operator">|</span> sequence<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 阻塞到下一个毫秒，直到获得新的时间戳
     * <span class="token keyword">@param</span> <span class="token parameter">lastTimestamp</span> 上次生成ID的时间戳
     * <span class="token keyword">@return</span> 当前时间戳
     */</span>
    <span class="token keyword">protected</span> <span class="token keyword">long</span> <span class="token function">tilNextMillis</span><span class="token punctuation">(</span><span class="token keyword">long</span> lastTimestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> timestamp <span class="token operator">=</span> <span class="token function">timeGen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>timestamp <span class="token operator">&lt;=</span> lastTimestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            timestamp <span class="token operator">=</span> <span class="token function">timeGen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> timestamp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 返回以毫秒为单位的当前时间
     * <span class="token keyword">@return</span> 当前时间(毫秒)
     */</span>
    <span class="token keyword">protected</span> <span class="token keyword">long</span> <span class="token function">timeGen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/** 测试 */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;开始：&quot;</span><span class="token operator">+</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">SnowflakeIdWorker</span> idWorker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SnowflakeIdWorker</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">long</span> id <span class="token operator">=</span> idWorker<span class="token punctuation">.</span><span class="token function">nextId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//            System.out.println(Long.toBinaryString(id));</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;结束：&quot;</span><span class="token operator">+</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>工程落地经验</strong></p>`,46),h={href:"https://www.hutool.cn/docs/#/core/%E5%B7%A5%E5%85%B7%E7%B1%BB/%E5%94%AF%E4%B8%80ID%E5%B7%A5%E5%85%B7-IdUtil?id=snowflake",target:"_blank",rel:"noopener noreferrer"},g=t(`<p>添加依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>cn.hutool<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>hutool-captcha<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.6.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例程序：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Snowflake</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">NetUtil</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">IdUtil</span></span><span class="token punctuation">;</span> 
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PostConstruct</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IdGeneratorSnowflake</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> workerId <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> datacenterId <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Snowflake</span> snowflake <span class="token operator">=</span> <span class="token class-name">IdUtil</span><span class="token punctuation">.</span><span class="token function">createSnowflake</span><span class="token punctuation">(</span>workerId<span class="token punctuation">,</span> datacenterId<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">long</span> <span class="token function">snowflakeId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> snowflake<span class="token punctuation">.</span><span class="token function">nextId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">long</span> <span class="token function">snowflakeId</span><span class="token punctuation">(</span><span class="token keyword">long</span> workerId<span class="token punctuation">,</span> <span class="token keyword">long</span> datacenterId<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Snowflake</span> snowflake <span class="token operator">=</span> <span class="token class-name">IdUtil</span><span class="token punctuation">.</span><span class="token function">createSnowflake</span><span class="token punctuation">(</span>workerId<span class="token punctuation">,</span> datacenterId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> snowflake<span class="token punctuation">.</span><span class="token function">nextId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">IdGeneratorSnowflake</span> idGenerator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IdGeneratorSnowflake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>idGenerator<span class="token punctuation">.</span><span class="token function">snowflakeId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">ExecutorService</span> threadPool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            threadPool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print1n</span><span class="token punctuation">(</span>idGenerator<span class="token punctuation">.</span><span class="token function">snowflakeId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        threadPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>优缺点</strong></p><p>优点：</p><p>毫秒数在高位，自增序列在低位，整个ID都是趋势递增的。</p><p>不依赖数据库等第三方系统，以服务的方式部署，稳定性更高，生成ID的性能也是非常高的。</p><p>可以根据自身业务特性分配bit位，非常灵活。</p><p>缺点：</p><p>依赖机器时钟，如果机器时钟回拨，会导致重复ID生成。</p><p>在单机上是递增的，但是由于设计到分布式环境，每台机器上的时钟不可能完全同步，有时候会出现不是全局递增的情况。</p><p>（此缺点可以认为无所谓，一般分布式ID只要求趋势递增，并不会严格要求递增，90%的需求都只要求趋势递增）</p><p><strong>其他补充</strong></p><p>百度开源的分布式唯一ID生成器UidGenerator</p><p>美团点评分布式ID生成系统Leaf</p><h2 id="spring-cloud组件总结" tabindex="-1"><a class="header-anchor" href="#spring-cloud组件总结" aria-hidden="true">#</a> Spring Cloud组件总结</h2>`,17),w=n("thead",null,[n("tr",null,[n("th",null,"组件"),n("th",null,"简介"),n("th",null,"分类"),n("th",null,"官网"),n("th",null,"笔记"),n("th",null,"备注")])],-1),f=n("td",null,"Eureka",-1),y=n("td",null,"Eureka is the Netflix Service Discovery Server and Client.",-1),I=n("td",null,"服务注册中心",-1),S={href:"https://docs.spring.io/spring-cloud-netflix/docs/2.2.7.RELEASE/reference/html/#service-discovery-eureka-clients",target:"_blank",rel:"noopener noreferrer"},D={href:"https://blog.csdn.net/u011863024/article/details/114298270#15_Eureka_1148",target:"_blank",rel:"noopener noreferrer"},E=n("td",null,"eureka中文解释：int.(因找到某物，尤指问题的答案而高兴)我发现了，我找到了",-1),x=n("td",null,"Zookeeper",-1),L=n("td",null,"ZooKeeper is a centralized service for maintaining configuration information, naming, providing distributed synchronization, and providing group services.",-1),U=n("td",null,"服务注册中心",-1),B={href:"https://zookeeper.apache.org/",target:"_blank",rel:"noopener noreferrer"},T={href:"https://blog.csdn.net/u011863024/article/details/107434932",target:"_blank",rel:"noopener noreferrer"},C=n("td",null,"zookeeper中文解释：n.动物园管理员",-1),R=n("td",null,"Consul",-1),q=n("td",null,"Consul is a service mesh solution providing a full featured control plane with service discovery, configuration, and segmentation functionality.",-1),N=n("td",null,"服务注册中心",-1),A={href:"https://www.consul.io/",target:"_blank",rel:"noopener noreferrer"},M={href:"https://blog.csdn.net/u011863024/article/details/114298270#31_Consul_2333",target:"_blank",rel:"noopener noreferrer"},G=n("td",null,"consul中文解释：n.领事",-1),W=n("td",null,"Ribbon",-1),F=n("td",null,"Ribbon is a client-side load balancer that gives you a lot of control over the behavior of HTTP and TCP clients.",-1),P=n("td",null,"服务调用",-1),z={href:"https://docs.spring.io/spring-cloud-netflix/docs/2.2.7.RELEASE/reference/html/#spring-cloud-ribbon",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://blog.csdn.net/u011863024/article/details/114298270#36_Ribbon_2780",target:"_blank",rel:"noopener noreferrer"},j=n("td",null,"ribbon中文解释：n.(用于捆绑或装饰的)带子;丝带;带状物;",-1),O=n("td",null,"OpenFeign",-1),H=n("td",null,"Feign is a declarative web service client. It makes writing web service clients easier.",-1),V=n("td",null,"服务调用",-1),Y={href:"https://docs.spring.io/spring-cloud-openfeign/docs/2.2.7.RELEASE/reference/html/",target:"_blank",rel:"noopener noreferrer"},K={href:"https://blog.csdn.net/u011863024/article/details/114298270#43_OpenFeign_3304",target:"_blank",rel:"noopener noreferrer"},Z=n("td",null,"feign中文意思：v.假装，装作，佯装(有某种感觉或生病、疲倦等)",-1),J=n("td",null,"Hystrix",-1),X=n("td",null,"Netflix has created a library called Hystrix that implements the circuit breaker pattern.",-1),$=n("td",null,"服务降级",-1),nn={href:"https://docs.spring.io/spring-cloud-netflix/docs/2.2.7.RELEASE/reference/html/#circuit-breaker-spring-cloud-circuit-breaker-with-hystrix",target:"_blank",rel:"noopener noreferrer"},sn={href:"https://blog.csdn.net/u011863024/article/details/114298270#47_Hystrix_3696",target:"_blank",rel:"noopener noreferrer"},an=n("td",null,"hystrix中文意思：n.豪猪属;猬草属;豪猪;豪猪亚属",-1),en=n("td",null,"GateWay",-1),tn=n("td",null,"Spring Cloud Gateway aims to provide a simple, yet effective way to route to APIs and provide cross cutting concerns to them such as: security, monitoring/metrics, and resiliency.",-1),on=n("td",null,"服务网关",-1),pn={href:"https://docs.spring.io/spring-cloud-gateway/docs/2.2.7.RELEASE/reference/html/",target:"_blank",rel:"noopener noreferrer"},ln={href:"https://blog.csdn.net/u011863024/article/details/114298282#66_GateWay_771",target:"_blank",rel:"noopener noreferrer"},cn=n("td",null,"gateway中文意思：n.网关;途径;门道;手段",-1),rn=n("td",null,"Config",-1),un=n("td",null,"Spring Cloud Config provides server-side and client-side support for externalized configuration in a distributed system.",-1),dn=n("td",null,"服务配置",-1),kn={href:"https://docs.spring.io/spring-cloud-config/docs/2.2.7.RELEASE/reference/html/",target:"_blank",rel:"noopener noreferrer"},mn={href:"https://blog.csdn.net/u011863024/article/details/114298282#74_Config_1524",target:"_blank",rel:"noopener noreferrer"},vn=n("td",null,"-",-1),bn=n("td",null,"Bus",-1),_n=n("td",null,"Spring Cloud Bus links nodes of a distributed system with a lightweight message broker.",-1),hn=n("td",null,"服务总线",-1),gn={href:"https://docs.spring.io/spring-cloud-bus/docs/2.2.3.RELEASE/reference/html/",target:"_blank",rel:"noopener noreferrer"},wn={href:"https://blog.csdn.net/u011863024/article/details/114298282#78_Bus_2078",target:"_blank",rel:"noopener noreferrer"},fn=n("td",null,"-",-1),yn=n("td",null,"Stream",-1),In=n("td",null,"Spring Cloud Stream is a framework for building message-driven microservice applications.",-1),Sn=n("td",null,"消息队列",-1),Dn={href:"https://docs.spring.io/spring-cloud-stream/docs/3.0.10.RELEASE/reference/html/spring-cloud-stream.html#spring-cloud-stream-overview-introducing",target:"_blank",rel:"noopener noreferrer"},En={href:"https://blog.csdn.net/u011863024/article/details/114298282#83_Stream_2576",target:"_blank",rel:"noopener noreferrer"},xn=n("td",null,"-",-1),Ln=n("td",null,"Sleuth",-1),Un=n("td",null,"Spring Cloud Sleuth implements a distributed tracing solution for Spring Cloud.",-1),Bn=n("td",null,"服务跟踪",-1),Tn={href:"https://docs.spring.io/spring-cloud-sleuth/docs/2.2.7.RELEASE/reference/html/",target:"_blank",rel:"noopener noreferrer"},Cn={href:"https://blog.csdn.net/u011863024/article/details/114298282#92_Sleuth_3191",target:"_blank",rel:"noopener noreferrer"},Rn=n("td",null,"sleuth中文意思：n.侦探",-1),qn=n("td",null,"Nacos",-1),Nn=n("td",null,"Nacos致力于帮助您发现、配置和管理微服务。",-1),An=n("td",null,"服务注册中心、服务配置、服务总线",-1),Mn={href:"https://nacos.io/zh-cn/docs/what-is-nacos.html",target:"_blank",rel:"noopener noreferrer"},Gn={href:"https://blog.csdn.net/u011863024/article/details/114298282#96_Nacos_3488",target:"_blank",rel:"noopener noreferrer"},Wn=n("td",null,"NAme + COnfiguration + Service",-1),Fn=n("td",null,"Sentinel",-1),Pn=n("td",null,"Sentinel是面向分布式服务架构的流量控制组件，主要以流量为切入点，从流量控制、熔断降级、系统自适应保护等多个维度来帮助您保障微服务的稳定性。",-1),zn=n("td",null,"服务降级",-1),Qn={href:"https://sentinelguard.io/zh-cn/docs/introduction.html",target:"_blank",rel:"noopener noreferrer"},jn={href:"https://blog.csdn.net/u011863024/article/details/114298288#111_Sentinel_240",target:"_blank",rel:"noopener noreferrer"},On=n("td",null,"sentinel中文意思：n.哨兵",-1),Hn=n("td",null,"Seata",-1),Vn=n("td",null,"Seata 是一款开源的分布式事务解决方案，致力于在微服务架构下提供高性能和简单易用的分布式事务服务。",-1),Yn=n("td",null,"分布式事务",-1),Kn={href:"https://seata.io/zh-cn/",target:"_blank",rel:"noopener noreferrer"},Zn={href:"https://blog.csdn.net/u011863024/article/details/114298288#139_Seata_2287",target:"_blank",rel:"noopener noreferrer"},Jn=n("td",null,"-",-1);function Xn($n,ns){const a=c("ExternalLinkIcon");return p(),l("div",null,[u,n("blockquote",null,[n("p",null,[s("All indexes other than the clustered index are known as "),n("a",d,[s("secondary indexes"),e(a)]),s(". In "),k,s(", each record in a secondary index contains the primary key columns for the row, as well as the columns specified for the secondary index. "),m,s(" uses this primary key value to search for the row in the clustered index.")]),v,n("p",null,[n("a",b,[s("link"),e(a)])])]),_,n("p",null,[n("a",h,[s("Hutool的Snowflake文档"),e(a)])]),g,n("table",null,[w,n("tbody",null,[n("tr",null,[f,y,I,n("td",null,[n("a",S,[s("link"),e(a)])]),n("td",null,[n("a",D,[s("link"),e(a)])]),E]),n("tr",null,[x,L,U,n("td",null,[n("a",B,[s("link"),e(a)])]),n("td",null,[n("a",T,[s("link"),e(a)])]),C]),n("tr",null,[R,q,N,n("td",null,[n("a",A,[s("link"),e(a)])]),n("td",null,[n("a",M,[s("link"),e(a)])]),G]),n("tr",null,[W,F,P,n("td",null,[n("a",z,[s("link"),e(a)])]),n("td",null,[n("a",Q,[s("link"),e(a)])]),j]),n("tr",null,[O,H,V,n("td",null,[n("a",Y,[s("link"),e(a)])]),n("td",null,[n("a",K,[s("link"),e(a)])]),Z]),n("tr",null,[J,X,$,n("td",null,[n("a",nn,[s("link"),e(a)])]),n("td",null,[n("a",sn,[s("link"),e(a)])]),an]),n("tr",null,[en,tn,on,n("td",null,[n("a",pn,[s("link"),e(a)])]),n("td",null,[n("a",ln,[s("link"),e(a)])]),cn]),n("tr",null,[rn,un,dn,n("td",null,[n("a",kn,[s("link"),e(a)])]),n("td",null,[n("a",mn,[s("link"),e(a)])]),vn]),n("tr",null,[bn,_n,hn,n("td",null,[n("a",gn,[s("link"),e(a)])]),n("td",null,[n("a",wn,[s("link"),e(a)])]),fn]),n("tr",null,[yn,In,Sn,n("td",null,[n("a",Dn,[s("link"),e(a)])]),n("td",null,[n("a",En,[s("link"),e(a)])]),xn]),n("tr",null,[Ln,Un,Bn,n("td",null,[n("a",Tn,[s("link"),e(a)])]),n("td",null,[n("a",Cn,[s("link"),e(a)])]),Rn]),n("tr",null,[qn,Nn,An,n("td",null,[n("a",Mn,[s("link"),e(a)])]),n("td",null,[n("a",Gn,[s("link"),e(a)])]),Wn]),n("tr",null,[Fn,Pn,zn,n("td",null,[n("a",Qn,[s("link"),e(a)])]),n("td",null,[n("a",jn,[s("link"),e(a)])]),On]),n("tr",null,[Hn,Vn,Yn,n("td",null,[n("a",Kn,[s("link"),e(a)])]),n("td",null,[n("a",Zn,[s("link"),e(a)])]),Jn])])])])}const es=o(r,[["render",Xn],["__file","大厂面试第三季预告片之雪花算法.html.vue"]]);export{es as default};
