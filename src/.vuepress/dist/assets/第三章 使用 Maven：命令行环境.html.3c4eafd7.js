import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as c,c as o,d as a,e as n,b as e,a as s,r as l}from"./app.9b10ba0a.js";const i="/assets/image-20230315154756521.aaae99b2.png",u="/assets/image-20230315154932187.c866ade3.png",r="/assets/image-20230315154944592.4a5c9b3a.png",d="/assets/image-20230315155101316.c9a40151.png",k="/assets/image-20230315155200287.030ef6f4.png",g="/assets/image-20230315155218512.ecd7683f.png",v="/assets/image-20230315155503740.a09f359d.png",m="/assets/image-20230315155551111.fec346fe.png",h="/assets/image-20230315155622362.40941982.png",b="/assets/image-20230315155637162.85d0aca3.png",x="/assets/image-20230315155813597.e1450d60.png",f="/assets/image-20230315155828960.db73d21e.png",_="/assets/image-20230315155851558.36c52a8d.png",j="/assets/image-20230315155916149.956ae6ef.png",I="/assets/image-20230315155933379.af0c42cc.png",y="/assets/image-20230315155944495.15ebae2c.png",w="/assets/image-20230315160116315.418e6884.png",S="/assets/image-20230315160130220.0e2dd3ef.png",E="/assets/image-20230315160444244.5471b8ea.png",A="/assets/image-20230315160732213.5057e986.png",O="/assets/image-20230315160944529.1de08a1c.png",N="/assets/image-20230315161101996.33bcc55d.png",T="/assets/image-20230315161152988.86adbe24.png",M={},F=s('<h2 id="第一节-实验一-根据坐标创建-maven-工程" tabindex="-1"><a class="header-anchor" href="#第一节-实验一-根据坐标创建-maven-工程" aria-hidden="true">#</a> <strong>第一节 实验一：根据坐标创建 Maven 工程</strong></h2><h3 id="_1、maven-核心概念-坐标" tabindex="-1"><a class="header-anchor" href="#_1、maven-核心概念-坐标" aria-hidden="true">#</a> 1、Maven 核心概念：坐标</h3><h4 id="_1数学中的坐标" tabindex="-1"><a class="header-anchor" href="#_1数学中的坐标" aria-hidden="true">#</a> ①数学中的坐标</h4><img src="'+i+`" alt="image-20230315154756521" style="zoom:50%;"><p>使用 x、y、z 三个**『向量』<strong>作为空间的坐标系，可以在</strong>『空间』<strong>中唯一的定位到一个</strong>『点』**。</p><h4 id="_2maven中的坐标" tabindex="-1"><a class="header-anchor" href="#_2maven中的坐标" aria-hidden="true">#</a> ②Maven中的坐标</h4><h5 id="_1-向量说明" tabindex="-1"><a class="header-anchor" href="#_1-向量说明" aria-hidden="true">#</a> [1]向量说明</h5><p>使用三个**『向量』<strong>在</strong>『Maven的仓库』<strong>中</strong>唯一<strong>的定位到一个</strong>『jar』**包。</p><ul><li><strong>groupId</strong>：公司或组织的 id</li><li><strong>artifactId</strong>：一个项目或者是项目中的一个模块的 id</li><li><strong>version</strong>：版本号</li></ul><h5 id="_2-三个向量的取值方式" tabindex="-1"><a class="header-anchor" href="#_2-三个向量的取值方式" aria-hidden="true">#</a> [2]三个向量的取值方式</h5><ul><li>groupId：公司或组织域名的倒序，通常也会加上项目名称 <ul><li>例如：com.atguigu.maven</li></ul></li><li>artifactId：模块的名称，将来作为 Maven 工程的工程名</li><li>version：模块的版本号，根据自己的需要设定 <ul><li>例如：SNAPSHOT 表示快照版本，正在迭代过程中，不稳定的版本</li><li>例如：RELEASE 表示正式版本</li></ul></li></ul><p>举例：</p><ul><li>groupId：com.atguigu.maven</li><li>artifactId：pro01-atguigu-maven</li><li>version：1.0-SNAPSHOT</li></ul><h4 id="_3坐标和仓库中-jar-包的存储路径之间的对应关系" tabindex="-1"><a class="header-anchor" href="#_3坐标和仓库中-jar-包的存储路径之间的对应关系" aria-hidden="true">#</a> ③坐标和仓库中 jar 包的存储路径之间的对应关系</h4><p>坐标：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面坐标对应的 jar 包在 Maven 本地仓库中的位置：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Maven本地仓库根目录\\javax\\servlet\\servlet-api\\2.5\\servlet-api-2.5.jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>一定要学会根据坐标到本地仓库中找到对应的 jar 包。</p><h3 id="_2、实验操作" tabindex="-1"><a class="header-anchor" href="#_2、实验操作" aria-hidden="true">#</a> 2、实验操作</h3><h4 id="_1创建目录作为后面操作的工作空间" tabindex="-1"><a class="header-anchor" href="#_1创建目录作为后面操作的工作空间" aria-hidden="true">#</a> ①创建目录作为后面操作的工作空间</h4><p>例如：D:\\maven-workspace\\space201026</p><blockquote><p>WARNING</p><p>此时我们已经有了三个目录，分别是：</p><ul><li>Maven 核心程序：中军大帐</li><li>Maven 本地仓库：兵营</li><li>本地工作空间：战场</li></ul></blockquote><h4 id="_2在工作空间目录下打开命令行窗口" tabindex="-1"><a class="header-anchor" href="#_2在工作空间目录下打开命令行窗口" aria-hidden="true">#</a> ②在工作空间目录下打开命令行窗口</h4><p><img src="`+u+'" alt="image-20230315154932187"></p><h4 id="_3使用命令生成maven工程" tabindex="-1"><a class="header-anchor" href="#_3使用命令生成maven工程" aria-hidden="true">#</a> ③使用命令生成Maven工程</h4><p><img src="'+r+`" alt="image-20230315154944592"></p><p>运行 <strong>mvn archetype:generate</strong> 命令</p><p>下面根据提示操作</p><blockquote><p>TIP</p><p>Choose a number or apply filter (format: [groupId:]artifactId, case sensitive contains): 7:【直接回车，使用默认值】</p><p>Define value for property &#39;groupId&#39;: com.atguigu.maven</p><p>Define value for property &#39;artifactId&#39;: pro01-maven-java</p><p>Define value for property &#39;version&#39; 1.0-SNAPSHOT: :【直接回车，使用默认值】</p><p>Define value for property &#39;package&#39; com.atguigu.maven: :【直接回车，使用默认值】</p><p>Confirm properties configuration: groupId: com.atguigu.maven artifactId: pro01-maven-java version: 1.0-SNAPSHOT package: com.atguigu.maven Y: :【直接回车，表示确认。如果前面有输入错误，想要重新输入，则输入 N 再回车。】</p></blockquote><h4 id="_4调整" tabindex="-1"><a class="header-anchor" href="#_4调整" aria-hidden="true">#</a> ④调整</h4><p>Maven 默认生成的工程，对 junit 依赖的是较低的 3.8.1 版本，我们可以改成较适合的 4.12 版本。</p><p>自动生成的 App.java 和 AppTest.java 可以删除。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 依赖信息配置 --&gt;</span>
<span class="token comment">&lt;!-- dependencies复数标签：里面包含dependency单数标签 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
	<span class="token comment">&lt;!-- dependency单数标签：配置一个具体的依赖 --&gt;</span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
		<span class="token comment">&lt;!-- 通过坐标来依赖其他jar包 --&gt;</span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
		
		<span class="token comment">&lt;!-- 依赖的范围 --&gt;</span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5自动生成的-pom-xml-解读" tabindex="-1"><a class="header-anchor" href="#_5自动生成的-pom-xml-解读" aria-hidden="true">#</a> ⑤自动生成的 pom.xml 解读</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>  <span class="token comment">&lt;!-- 当前Maven工程的坐标 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.atguigu.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>pro01-maven-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
  
  <span class="token comment">&lt;!-- 当前Maven工程的打包方式，可选值有下面三种： --&gt;</span>
  <span class="token comment">&lt;!-- jar：表示这个工程是一个Java工程  --&gt;</span>
  <span class="token comment">&lt;!-- war：表示这个工程是一个Web工程 --&gt;</span>
  <span class="token comment">&lt;!-- pom：表示这个工程是“管理其他工程”的工程 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>pro01-maven-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>http://maven.apache.org<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
	<span class="token comment">&lt;!-- 工程构建过程中读取源码时使用的字符集 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>

  <span class="token comment">&lt;!-- 当前工程所依赖的jar包 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
	<span class="token comment">&lt;!-- 使用dependency配置一个具体的依赖 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
	
	  <span class="token comment">&lt;!-- 在dependency标签内使用具体的坐标依赖我们需要的一个jar包 --&gt;</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
	  
	  <span class="token comment">&lt;!-- scope标签配置依赖的范围 --&gt;</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、maven核心概念-pom" tabindex="-1"><a class="header-anchor" href="#_3、maven核心概念-pom" aria-hidden="true">#</a> 3、Maven核心概念：POM</h3><h4 id="_1含义" tabindex="-1"><a class="header-anchor" href="#_1含义" aria-hidden="true">#</a> ①含义</h4><p>POM：<strong>P</strong>roject <strong>O</strong>bject <strong>M</strong>odel，项目对象模型。和 POM 类似的是：DOM（Document Object Model），文档对象模型。它们都是模型化思想的具体体现。</p><h4 id="_2模型化思想" tabindex="-1"><a class="header-anchor" href="#_2模型化思想" aria-hidden="true">#</a> ②模型化思想</h4><p>POM 表示将工程抽象为一个模型，再用程序中的对象来描述这个模型。这样我们就可以用程序来管理项目了。我们在开发过程中，最基本的做法就是将现实生活中的事物抽象为模型，然后封装模型相关的数据作为一个对象，这样就可以在程序中计算与现实事物相关的数据。</p><h4 id="_3对应的配置文件" tabindex="-1"><a class="header-anchor" href="#_3对应的配置文件" aria-hidden="true">#</a> ③对应的配置文件</h4><p>POM 理念集中体现在 Maven 工程根目录下 <strong>pom.xml</strong> 这个配置文件中。所以这个 pom.xml 配置文件就是 Maven 工程的核心配置文件。其实学习 Maven 就是学这个文件怎么配置，各个配置有什么用。</p><h3 id="_4、maven核心概念-约定的目录结构" tabindex="-1"><a class="header-anchor" href="#_4、maven核心概念-约定的目录结构" aria-hidden="true">#</a> 4、Maven核心概念：约定的目录结构</h3><h4 id="_1各个目录的作用" tabindex="-1"><a class="header-anchor" href="#_1各个目录的作用" aria-hidden="true">#</a> ①各个目录的作用</h4><p><img src="`+d+'" alt="image-20230315155101316"></p><p>另外还有一个 target 目录专门存放构建操作输出的结果。</p><h4 id="_2约定目录结构的意义" tabindex="-1"><a class="header-anchor" href="#_2约定目录结构的意义" aria-hidden="true">#</a> ②约定目录结构的意义</h4><p>Maven 为了让构建过程能够尽可能自动化完成，所以必须约定目录结构的作用。例如：Maven 执行编译操作，必须先去 Java 源程序目录读取 Java 源代码，然后执行编译，最后把编译结果存放在 target 目录。</p><h4 id="_3约定大于配置" tabindex="-1"><a class="header-anchor" href="#_3约定大于配置" aria-hidden="true">#</a> ③约定大于配置</h4><p>Maven 对于目录结构这个问题，没有采用配置的方式，而是基于约定。这样会让我们在开发过程中非常方便。如果每次创建 Maven 工程后，还需要针对各个目录的位置进行详细的配置，那肯定非常麻烦。</p><p>目前开发领域的技术发展趋势就是：约定大于配置，配置大于编码。</p><hr><h2 id="第二节-实验二-在-maven-工程中编写代码" tabindex="-1"><a class="header-anchor" href="#第二节-实验二-在-maven-工程中编写代码" aria-hidden="true">#</a> 第二节 实验二：在 Maven 工程中编写代码</h2><h3 id="_1、主体程序" tabindex="-1"><a class="header-anchor" href="#_1、主体程序" aria-hidden="true">#</a> 1、主体程序</h3><p><img src="'+k+`" alt="image-20230315155200287"></p><p>主体程序指的是被测试的程序，同时也是将来在项目中真正要使用的程序。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>maven</span><span class="token punctuation">;</span>
	
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Calculator</span> <span class="token punctuation">{</span>
	
	<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">return</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、测试程序" tabindex="-1"><a class="header-anchor" href="#_2、测试程序" aria-hidden="true">#</a> 2、测试程序</h3><p><img src="`+g+`" alt="image-20230315155218512"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>maven</span><span class="token punctuation">;</span>
	
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>maven<span class="token punctuation">.</span></span><span class="token class-name">Calculator</span></span><span class="token punctuation">;</span>
	
<span class="token comment">// 静态导入的效果是将Assert类中的静态资源导入当前类</span>
<span class="token comment">// 这样一来，在当前类中就可以直接使用Assert类中的静态资源，不需要写类名</span>
<span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token operator">*</span></span><span class="token punctuation">;</span>
	
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CalculatorTest</span><span class="token punctuation">{</span>
	
	<span class="token annotation punctuation">@Test</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		
		<span class="token comment">// 1.创建Calculator对象</span>
		<span class="token class-name">Calculator</span> calculator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		<span class="token comment">// 2.调用Calculator对象的方法，获取到程序运行实际的结果</span>
		<span class="token keyword">int</span> actualResult <span class="token operator">=</span> calculator<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		<span class="token comment">// 3.声明一个变量，表示程序运行期待的结果</span>
		<span class="token keyword">int</span> expectedResult <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
		
		<span class="token comment">// 4.使用断言来判断实际结果和期待结果是否一致</span>
		<span class="token comment">// 如果一致：测试通过，不会抛出异常</span>
		<span class="token comment">// 如果不一致：抛出异常，测试失败</span>
		<span class="token function">assertEquals</span><span class="token punctuation">(</span>expectedResult<span class="token punctuation">,</span> actualResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
		
	<span class="token punctuation">}</span>	
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="第三节-实验三-执行-maven-的构建命令" tabindex="-1"><a class="header-anchor" href="#第三节-实验三-执行-maven-的构建命令" aria-hidden="true">#</a> 第三节 实验三：执行 Maven 的构建命令</h2><h3 id="_1、要求" tabindex="-1"><a class="header-anchor" href="#_1、要求" aria-hidden="true">#</a> 1、要求</h3><p>运行 Maven 中和构建操作相关的命令时，必须进入到 pom.xml 所在的目录。如果没有在 pom.xml 所在的目录运行 Maven 的构建命令，那么会看到下面的错误信息：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">The</span> goal you specified <span class="token keyword">requires</span> <span class="token namespace">a</span> project <span class="token keyword">to</span> <span class="token namespace">execute</span> but there is no <span class="token constant">POM</span> in <span class="token keyword">this</span> direct
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>TIP</p><p>mvn -v 命令和构建操作无关，只要正确配置了 PATH，在任何目录下执行都可以。而构建相关的命令要在 pom.xml 所在目录下运行——操作哪个工程，就进入这个工程的 pom.xml 目录。</p></blockquote><h3 id="_2、清理操作" tabindex="-1"><a class="header-anchor" href="#_2、清理操作" aria-hidden="true">#</a> 2、清理操作</h3><p>mvn clean</p><p>效果：删除 target 目录</p><h3 id="_3、编译操作" tabindex="-1"><a class="header-anchor" href="#_3、编译操作" aria-hidden="true">#</a> 3、编译操作</h3><p>主程序编译：mvn compile</p><p>测试程序编译：mvn test-compile</p><p>主体程序编译结果存放的目录：target/classes</p><p>测试程序编译结果存放的目录：target/test-classes</p><h3 id="_4、测试操作" tabindex="-1"><a class="header-anchor" href="#_4、测试操作" aria-hidden="true">#</a> 4、测试操作</h3><p>mvn test</p><p>测试的报告存放的目录：target/surefire-reports</p><h3 id="_5、打包操作" tabindex="-1"><a class="header-anchor" href="#_5、打包操作" aria-hidden="true">#</a> 5、打包操作</h3><p>mvn package</p><p>打包的结果——jar 包，存放的目录：target</p><h3 id="_6、安装操作" tabindex="-1"><a class="header-anchor" href="#_6、安装操作" aria-hidden="true">#</a> 6、安装操作</h3><p>mvn install</p><div class="language-log line-numbers-mode" data-ext="log"><pre class="language-log"><code><span class="token punctuation">[</span><span class="token level info keyword">INFO</span><span class="token punctuation">]</span> Installing <span class="token file-path string">D:\\maven-workspace\\space201026\\pro01-maven-java\\target\\pro01-maven-java-1.0-SNAPSHOT.jar</span> to <span class="token file-path string">D:\\maven-rep1026\\com\\atguigu\\maven\\pro01-maven-java\\1.0-SNAPSHOT\\pro01-maven-java-1.0-SNAPSHOT.jar</span>
<span class="token punctuation">[</span><span class="token level info keyword">INFO</span><span class="token punctuation">]</span> Installing <span class="token file-path string">D:\\maven-workspace\\space201026\\pro01-maven-java\\pom.xml</span> to <span class="token file-path string">D:\\maven-rep1026\\com\\atguigu\\maven\\pro01-maven-java\\1.0-SNAPSHOT\\pro01-maven-java-1.0-SNAPSHOT.pom</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>安装的效果是将本地构建过程中生成的 jar 包存入 Maven 本地仓库。这个 jar 包在 Maven 仓库中的路径是根据它的坐标生成的。</p><p>坐标信息如下：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.atguigu.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>pro01-maven-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Maven 仓库中生成的路径如下：</p><div class="language-log line-numbers-mode" data-ext="log"><pre class="language-log"><code><span class="token file-path string">D:\\maven-rep1026\\com\\atguigu\\maven\\pro01-maven-java\\1.0-SNAPSHOT\\pro01-maven-java-1.0-SNAPSHOT.jar</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>另外，安装操作还会将 pom.xml 文件转换为 XXX.pom 文件一起存入本地仓库。所以我们在 Maven 的本地仓库中想看一个 jar 包原始的 pom.xml 文件时，查看对应 XXX.pom 文件即可，它们是名字发生了改变，本质上是同一个文件。</p><hr><h2 id="第四节-实验四-创建-maven-版的-web-工程" tabindex="-1"><a class="header-anchor" href="#第四节-实验四-创建-maven-版的-web-工程" aria-hidden="true">#</a> 第四节 实验四：创建 Maven 版的 Web 工程</h2><h3 id="_1、说明" tabindex="-1"><a class="header-anchor" href="#_1、说明" aria-hidden="true">#</a> 1、说明</h3><p>使用 mvn archetype:generate 命令生成 Web 工程时，需要使用一个专门的 archetype。这个专门生成 Web 工程骨架的 archetype 可以参照官网看到它的用法：</p><p><img src="`+v+`" alt="image-20230315155503740"></p><p>参数 archetypeGroupId、archetypeArtifactId、archetypeVersion 用来指定现在使用的 maven-archetype-webapp 的坐标。</p><h3 id="_2、操作" tabindex="-1"><a class="header-anchor" href="#_2、操作" aria-hidden="true">#</a> 2、操作</h3><p>注意：如果在上一个工程的目录下执行 mvn archetype:generate 命令，那么 Maven 会报错：不能在一个非 pom 的工程下再创建其他工程。所以不要再刚才创建的工程里再创建新的工程，<strong>请回到工作空间根目录</strong>来操作。</p><p>然后运行生成工程的命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mvn archetype:generate <span class="token parameter variable">-DarchetypeGroupId</span><span class="token operator">=</span>org.apache.maven.archetypes <span class="token parameter variable">-DarchetypeArtifactId</span><span class="token operator">=</span>maven-archetype-webapp <span class="token parameter variable">-DarchetypeVersion</span><span class="token operator">=</span><span class="token number">1.4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下面的操作按照提示执行：</p><blockquote><p>TIP</p><p>Define value for property &#39;groupId&#39;: com.atguigu.maven Define value for property &#39;artifactId&#39;: pro02-maven-web Define value for property &#39;version&#39; 1.0-SNAPSHOT: :【直接回车，使用默认值】</p><p>Define value for property &#39;package&#39; com.atguigu.maven: :【直接回车，使用默认值】 Confirm properties configuration: groupId: com.atguigu.maven artifactId: pro02-maven-web version: 1.0-SNAPSHOT package: com.atguigu.maven Y: :【直接回车，表示确认】</p></blockquote><h3 id="_3、生成的pom-xml" tabindex="-1"><a class="header-anchor" href="#_3、生成的pom-xml" aria-hidden="true">#</a> 3、生成的pom.xml</h3><p>确认打包的方式是war包形式</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>war<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4、生成的web工程的目录结构" tabindex="-1"><a class="header-anchor" href="#_4、生成的web工程的目录结构" aria-hidden="true">#</a> 4、生成的Web工程的目录结构</h3><img src="`+m+'" alt="image-20230315155551111" style="zoom:50%;"><p>webapp 目录下有 index.jsp</p><p>WEB-INF 目录下有 web.xml</p><h3 id="_5、创建-servlet" tabindex="-1"><a class="header-anchor" href="#_5、创建-servlet" aria-hidden="true">#</a> 5、创建 Servlet</h3><h4 id="_1在-main-目录下创建-java-目录" tabindex="-1"><a class="header-anchor" href="#_1在-main-目录下创建-java-目录" aria-hidden="true">#</a> ①在 main 目录下创建 java 目录</h4><img src="'+h+'" alt="image-20230315155622362" style="zoom:50%;"><h4 id="_2在-java-目录下创建-servlet-类所在的包的目录" tabindex="-1"><a class="header-anchor" href="#_2在-java-目录下创建-servlet-类所在的包的目录" aria-hidden="true">#</a> ②在 java 目录下创建 Servlet 类所在的包的目录</h4><img src="'+b+`" alt="image-20230315155637162" style="zoom:50%;"><h4 id="_3在包下创建-servlet-类" tabindex="-1"><a class="header-anchor" href="#_3在包下创建-servlet-类" aria-hidden="true">#</a> ③在包下创建 Servlet 类</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>maven</span><span class="token punctuation">;</span>
	
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
	
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span><span class="token punctuation">{</span>
	
	<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
		
		response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;hello maven web&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
	<span class="token punctuation">}</span>
	
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4在-web-xml-中注册-servlet" tabindex="-1"><a class="header-anchor" href="#_4在-web-xml-中注册-servlet" aria-hidden="true">#</a> ④在 web.xml 中注册 Servlet</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>helloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>com.atguigu.maven.HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>helloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/helloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6、在-index-jsp-页面编写超链接" tabindex="-1"><a class="header-anchor" href="#_6、在-index-jsp-页面编写超链接" aria-hidden="true">#</a> 6、在 index.jsp 页面编写超链接</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>Hello World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>helloServlet<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Access Servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>TIP</p><p>JSP全称是 Java Server Page，和 Thymeleaf 一样，是服务器端页面渲染技术。这里我们不必关心 JSP 语法细节，编写一个超链接标签即可。</p></blockquote><h3 id="_7、编译" tabindex="-1"><a class="header-anchor" href="#_7、编译" aria-hidden="true">#</a> 7、编译</h3><p>此时直接执行 mvn compile 命令出错：</p><blockquote><p>DANGER</p><p>程序包 javax.servlet.http 不存在</p><p>程序包 javax.servlet 不存在</p><p>找不到符号</p><p>符号: 类 HttpServlet</p><p>……</p></blockquote><p>上面的错误信息说明：我们的 Web 工程用到了 HttpServlet 这个类，而 HttpServlet 这个类属于 servlet-api.jar 这个 jar 包。此时我们说，Web 工程需要依赖 servlet-api.jar 包。</p><p><img src="`+x+'" alt="image-20230315155813597"></p><h3 id="_8、配置对-servlet-api-jar-包的依赖" tabindex="-1"><a class="header-anchor" href="#_8、配置对-servlet-api-jar-包的依赖" aria-hidden="true">#</a> 8、配置对 servlet-api.jar 包的依赖</h3>',127),P={href:"https://mvnrepository.com/%E7%BD%91%E7%AB%99%E6%9F%A5%E8%AF%A2%E3%80%82%E4%BD%BF%E7%94%A8%E5%85%B3%E9%94%AE%E8%AF%8D%E6%90%9C%E7%B4%A2%EF%BC%8C%E7%84%B6%E5%90%8E%E5%9C%A8%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C%E5%88%97%E8%A1%A8%E4%B8%AD%E9%80%89%E6%8B%A9%E9%80%82%E5%90%88%E7%9A%84%E4%BD%BF%E7%94%A8%E3%80%82",target:"_blank",rel:"noopener noreferrer"},H=s('<img src="'+f+`" alt="image-20230315155828960" style="zoom:50%;"><p>比如，我们找到的 servlet-api 的依赖信息：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就可以把上面的信息加入 pom.xml。重新执行 mvn compile 命令。</p><h3 id="_9、将-web-工程打包为-war-包" tabindex="-1"><a class="header-anchor" href="#_9、将-web-工程打包为-war-包" aria-hidden="true">#</a> 9、将 Web 工程打包为 war 包</h3><p>运行 mvn package 命令，生成 war 包的位置如下图所示：</p><img src="`+_+'" alt="image-20230315155851558" style="zoom:50%;"><h3 id="_10、将-war-包部署到-tomcat-上运行" tabindex="-1"><a class="header-anchor" href="#_10、将-war-包部署到-tomcat-上运行" aria-hidden="true">#</a> 10、将 war 包部署到 Tomcat 上运行</h3><p>将 war 包复制到 Tomcat/webapps 目录下</p><img src="'+j+'" alt="image-20230315155916149" style="zoom:50%;"><p>启动 Tomcat：</p><img src="'+I+'" alt="image-20230315155933379" style="zoom:50%;"><img src="'+y+'" alt="image-20230315155944495" style="zoom:50%;">',13),R={href:"http://localhost:8080/pro02-maven-web/index.jsp",target:"_blank",rel:"noopener noreferrer"},q=s(`<hr><h2 id="第五节-实验五-让-web-工程依赖-java-工程" tabindex="-1"><a class="header-anchor" href="#第五节-实验五-让-web-工程依赖-java-工程" aria-hidden="true">#</a> 第五节 实验五：让 Web 工程依赖 Java 工程</h2><h3 id="_1、观念" tabindex="-1"><a class="header-anchor" href="#_1、观念" aria-hidden="true">#</a> 1、观念</h3><p>明确一个意识：从来只有 Web 工程依赖 Java 工程，没有反过来 Java 工程依赖 Web 工程。本质上来说，Web 工程依赖的 Java 工程其实就是 Web 工程里导入的 jar 包。最终 Java 工程会变成 jar 包，放在 Web 工程的 WEB-INF/lib 目录下。</p><h3 id="_2、操作-1" tabindex="-1"><a class="header-anchor" href="#_2、操作-1" aria-hidden="true">#</a> 2、操作</h3><p>在 pro02-maven-web 工程的 pom.xml 中，找到 dependencies 标签，在 dependencies 标签中做如下配置：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 配置对Java工程pro01-maven-java的依赖 --&gt;</span>
<span class="token comment">&lt;!-- 具体的配置方式：在dependency标签内使用坐标实现依赖 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.atguigu.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>pro01-maven-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、在-web-工程中-编写测试代码" tabindex="-1"><a class="header-anchor" href="#_3、在-web-工程中-编写测试代码" aria-hidden="true">#</a> 3、在 Web 工程中，编写测试代码</h3><h4 id="_1补充创建目录" tabindex="-1"><a class="header-anchor" href="#_1补充创建目录" aria-hidden="true">#</a> ①补充创建目录</h4><p>pro02-maven-web**\\src\\test\\java\\com\\atguigu\\maven**</p><h4 id="_2确认-web-工程依赖了-junit" tabindex="-1"><a class="header-anchor" href="#_2确认-web-工程依赖了-junit" aria-hidden="true">#</a> ②确认 Web 工程依赖了 junit</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3创建测试类" tabindex="-1"><a class="header-anchor" href="#_3创建测试类" aria-hidden="true">#</a> ③创建测试类</h4><p>把 Java 工程的 CalculatorTest.java 类复制到 pro02-maven-wb**\\src\\test\\java\\com\\atguigu\\maven** 目录下</p><h3 id="_4、执行maven命令" tabindex="-1"><a class="header-anchor" href="#_4、执行maven命令" aria-hidden="true">#</a> 4、执行Maven命令</h3><h4 id="_1测试命令" tabindex="-1"><a class="header-anchor" href="#_1测试命令" aria-hidden="true">#</a> ①测试命令</h4><p>mvn test</p><p>说明：测试操作中会提前自动执行编译操作，测试成功就说明编译也是成功的。</p><h4 id="_2打包命令" tabindex="-1"><a class="header-anchor" href="#_2打包命令" aria-hidden="true">#</a> ②打包命令</h4><p>mvn package</p><img src="`+w+'" alt="image-20230315160116315" style="zoom:50%;"><p>通过查看 war 包内的结构，我们看到被 Web 工程依赖的 Java 工程确实是会变成 Web 工程的 WEB-INF/lib 目录下的 jar 包。</p><img src="'+S+`" alt="image-20230315160130220" style="zoom:50%;"><h4 id="_3查看当前-web-工程所依赖的-jar-包的列表" tabindex="-1"><a class="header-anchor" href="#_3查看当前-web-工程所依赖的-jar-包的列表" aria-hidden="true">#</a> ③查看当前 Web 工程所依赖的 jar 包的列表</h4><p>mvn dependency:list</p><blockquote><p>TIP</p><p>[INFO] The following files have been resolved:</p><p>[INFO] org.hamcrest:hamcrest-core:jar:1.3:test</p><p>[INFO] javax.servlet:javax.servlet-api:jar:3.1.0:provided</p><p>[INFO] com.atguigu.maven:pro01-maven-java:jar:1.0-SNAPSHOT:compile</p><p>[INFO] junit:junit:jar:4.12:test</p></blockquote><p>说明：javax.servlet:javax.servlet-api:jar:3.1.0:provided 格式显示的是一个 jar 包的坐标信息。格式是：</p><blockquote><p>TIP</p><p>groupId:artifactId:打包方式:version:依赖的范围</p></blockquote><p>这样的格式虽然和我们 XML 配置文件中坐标的格式不同，但是本质上还是坐标信息，大家需要能够认识这样的格式，将来从 Maven 命令的日志或错误信息中看到这样格式的信息，就能够识别出来这是坐标。进而根据坐标到Maven 仓库找到对应的jar包，用这样的方式解决我们遇到的报错的情况。</p><h4 id="_4以树形结构查看当前-web-工程的依赖信息" tabindex="-1"><a class="header-anchor" href="#_4以树形结构查看当前-web-工程的依赖信息" aria-hidden="true">#</a> ④以树形结构查看当前 Web 工程的依赖信息</h4><p>mvn dependency:tree</p><blockquote><p>TIP</p><p>[INFO] com.atguigu.maven:pro02-maven-web:war:1.0-SNAPSHOT</p><p>[INFO] +- junit:junit:jar:4.12:test</p><p>[INFO] | - org.hamcrest:hamcrest-core:jar:1.3:test</p><p>[INFO] +- javax.servlet:javax.servlet-api:jar:3.1.0:provided</p><p>[INFO] - com.atguigu.maven:pro01-maven-java:jar:1.0-SNAPSHOT:compile</p></blockquote><p>我们在 pom.xml 中并没有依赖 hamcrest-core，但是它却被加入了我们依赖的列表。原因是：junit 依赖了hamcrest-core，然后基于依赖的传递性，hamcrest-core 被传递到我们的工程了。</p><hr><h2 id="第六节-实验六-测试依赖的范围" tabindex="-1"><a class="header-anchor" href="#第六节-实验六-测试依赖的范围" aria-hidden="true">#</a> 第六节 实验六：测试依赖的范围</h2><h3 id="_1、依赖范围" tabindex="-1"><a class="header-anchor" href="#_1、依赖范围" aria-hidden="true">#</a> 1、依赖范围</h3><p>标签的位置：dependencies/dependency/<strong>scope</strong></p><p>标签的可选值：<strong>compile</strong>/<strong>test</strong>/<strong>provided</strong>/system/runtime/<strong>import</strong></p><h4 id="_1compile-和-test-对比" tabindex="-1"><a class="header-anchor" href="#_1compile-和-test-对比" aria-hidden="true">#</a> ①compile 和 test 对比</h4><table><thead><tr><th></th><th style="text-align:center;">main目录（空间）</th><th style="text-align:center;">test目录（空间）</th><th style="text-align:center;">开发过程（时间）</th><th style="text-align:center;">部署到服务器（时间）</th></tr></thead><tbody><tr><td>compile</td><td style="text-align:center;">有效</td><td style="text-align:center;">有效</td><td style="text-align:center;">有效</td><td style="text-align:center;">有效</td></tr><tr><td>test</td><td style="text-align:center;">无效</td><td style="text-align:center;">有效</td><td style="text-align:center;">有效</td><td style="text-align:center;">无效</td></tr></tbody></table><h4 id="_2compile-和-provided-对比" tabindex="-1"><a class="header-anchor" href="#_2compile-和-provided-对比" aria-hidden="true">#</a> ②compile 和 provided 对比</h4><table><thead><tr><th></th><th style="text-align:center;">main目录（空间）</th><th style="text-align:center;">test目录（空间）</th><th style="text-align:center;">开发过程（时间）</th><th style="text-align:center;">部署到服务器（时间）</th></tr></thead><tbody><tr><td>compile</td><td style="text-align:center;">有效</td><td style="text-align:center;">有效</td><td style="text-align:center;">有效</td><td style="text-align:center;">有效</td></tr><tr><td>provided</td><td style="text-align:center;">有效</td><td style="text-align:center;">有效</td><td style="text-align:center;">有效</td><td style="text-align:center;">无效</td></tr></tbody></table><h4 id="_3结论" tabindex="-1"><a class="header-anchor" href="#_3结论" aria-hidden="true">#</a> ③结论</h4><p>compile：通常使用的第三方框架的 jar 包这样在项目实际运行时真正要用到的 jar 包都是以 compile 范围进行依赖的。比如 SSM 框架所需jar包。</p><p>test：测试过程中使用的 jar 包，以 test 范围依赖进来。比如 junit。</p><p>provided：在开发过程中需要用到的“服务器上的 jar 包”通常以 provided 范围依赖进来。比如 servlet-api、jsp-api。而这个范围的 jar 包之所以不参与部署、不放进 war 包，就是避免和服务器上已有的同类 jar 包产生冲突，同时减轻服务器的负担。说白了就是：“<strong>服务器上已经有了，你就别带啦！</strong>”</p><h3 id="_2、测试" tabindex="-1"><a class="header-anchor" href="#_2、测试" aria-hidden="true">#</a> 2、测试</h3><h4 id="_1验证-compile-范围对-main-目录有效" tabindex="-1"><a class="header-anchor" href="#_1验证-compile-范围对-main-目录有效" aria-hidden="true">#</a> ①验证 compile 范围对 main 目录有效</h4><blockquote><p>TIP</p><p>main目录下的类：HelloServlet 使用compile范围导入的依赖：pro01-atguigu-maven</p><p>验证：使用compile范围导入的依赖对main目录下的类来说是有效的</p><p>有效：HelloServlet 能够使用 pro01-atguigu-maven 工程中的 Calculator 类</p><p>验证方式：在 HelloServlet 类中导入 Calculator 类，然后编译就说明有效。</p></blockquote><h4 id="_2验证test范围对main目录无效" tabindex="-1"><a class="header-anchor" href="#_2验证test范围对main目录无效" aria-hidden="true">#</a> ②验证test范围对main目录无效</h4><p>测试方式：在主体程序中导入org.junit.Test这个注解，然后执行编译。</p><p>具体操作：在pro01-maven-java\\src\\main\\java\\com\\atguigu\\maven目录下修改Calculator.java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>maven</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Calculator</span> <span class="token punctuation">{</span>
	
	<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">return</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行Maven编译命令：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">[</span><span class="token constant">ERROR</span><span class="token punctuation">]</span> <span class="token operator">/</span><span class="token class-name">D</span><span class="token operator">:</span><span class="token operator">/</span>maven<span class="token operator">-</span>workspace<span class="token operator">/</span>space201026<span class="token operator">/</span>pro01<span class="token operator">-</span>maven<span class="token operator">-</span>java<span class="token operator">/</span>src<span class="token operator">/</span>main<span class="token operator">/</span>java<span class="token operator">/</span>com<span class="token operator">/</span>atguigu<span class="token operator">/</span>maven<span class="token operator">/</span><span class="token class-name">Calculator</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">]</span> 程序包org<span class="token punctuation">.</span>junit不存在
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3验证test和provided范围不参与服务器部署" tabindex="-1"><a class="header-anchor" href="#_3验证test和provided范围不参与服务器部署" aria-hidden="true">#</a> ③验证test和provided范围不参与服务器部署</h4><p>其实就是验证：通过compile范围依赖的jar包会放入war包，通过test范围依赖的jar包不会放入war包。</p><p><img src="`+E+`" alt="image-20230315160444244"></p><h4 id="_4验证provided范围对测试程序有效" tabindex="-1"><a class="header-anchor" href="#_4验证provided范围对测试程序有效" aria-hidden="true">#</a> ④验证provided范围对测试程序有效</h4><p>测试方式是在pro02-maven-web的测试程序中加入servlet-api.jar包中的类。</p><p>修改：<strong>pro02-maven-web</strong>\\src*<em>test</em>*\\java\\com\\atguigu\\maven*<em>CalculatorTest.java</em>*</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>maven</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>maven<span class="token punctuation">.</span></span><span class="token class-name">Calculator</span></span><span class="token punctuation">;</span>

<span class="token comment">// 静态导入的效果是将Assert类中的静态资源导入当前类</span>
<span class="token comment">// 这样一来，在当前类中就可以直接使用Assert类中的静态资源，不需要写类名</span>
<span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CalculatorTest</span><span class="token punctuation">{</span>
	
	<span class="token annotation punctuation">@Test</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		
		<span class="token comment">// 1.创建Calculator对象</span>
		<span class="token class-name">Calculator</span> calculator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		<span class="token comment">// 2.调用Calculator对象的方法，获取到程序运行实际的结果</span>
		<span class="token keyword">int</span> actualResult <span class="token operator">=</span> calculator<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		<span class="token comment">// 3.声明一个变量，表示程序运行期待的结果</span>
		<span class="token keyword">int</span> expectedResult <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
		
		<span class="token comment">// 4.使用断言来判断实际结果和期待结果是否一致</span>
		<span class="token comment">// 如果一致：测试通过，不会抛出异常</span>
		<span class="token comment">// 如果不一致：抛出异常，测试失败</span>
		<span class="token function">assertEquals</span><span class="token punctuation">(</span>expectedResult<span class="token punctuation">,</span> actualResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
		
	<span class="token punctuation">}</span>
	
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后运行Maven的编译命令：mvn compile</p><p>然后看到编译成功。</p><hr><h2 id="第七节-实验七-测试依赖的传递性" tabindex="-1"><a class="header-anchor" href="#第七节-实验七-测试依赖的传递性" aria-hidden="true">#</a> 第七节 实验七：测试依赖的传递性</h2><h3 id="_1、依赖的传递性" tabindex="-1"><a class="header-anchor" href="#_1、依赖的传递性" aria-hidden="true">#</a> 1、依赖的传递性</h3><h4 id="_1概念" tabindex="-1"><a class="header-anchor" href="#_1概念" aria-hidden="true">#</a> ①概念</h4><p>A 依赖 B，B 依赖 C，那么在 A 没有配置对 C 的依赖的情况下，A 里面能不能直接使用 C？</p><h4 id="_2传递的原则" tabindex="-1"><a class="header-anchor" href="#_2传递的原则" aria-hidden="true">#</a> ②传递的原则</h4><p>在 A 依赖 B，B 依赖 C 的前提下，C 是否能够传递到 A，取决于 B 依赖 C 时使用的依赖范围。</p><ul><li>B 依赖 C 时使用 compile 范围：可以传递</li><li>B 依赖 C 时使用 test 或 provided 范围：不能传递，所以需要这样的 jar 包时，就必须在需要的地方明确配置依赖才可以。</li></ul><h3 id="_2、使用-compile-范围依赖-spring-core" tabindex="-1"><a class="header-anchor" href="#_2、使用-compile-范围依赖-spring-core" aria-hidden="true">#</a> 2、使用 compile 范围依赖 spring-core</h3><p>测试方式：让 pro01-maven-java 工程依赖 spring-core</p><p>具体操作：编辑 pro01-maven-java 工程根目录下 pom.xml</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-core --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.0.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 mvn dependency:tree 命令查看效果：</p><blockquote><p>TIP</p><p>[INFO] com.atguigu.maven:pro01-maven-java:jar:1.0-SNAPSHOT</p><p>[INFO] +- junit:junit:jar:4.12:test</p><p>[INFO] | - org.hamcrest:hamcrest-core:jar:1.3:test</p><p>[INFO] - org.springframework:spring-core:jar:4.0.0.RELEASE:compile</p><p>[INFO] - commons-logging:commons-logging:jar:1.1.1:compile</p></blockquote><p>还可以在 Web 工程中，使用 mvn dependency:tree 命令查看效果（需要重新将 pro01-maven-java 安装到仓库）：</p><blockquote><p>TIP</p><p>[INFO] com.atguigu.maven:pro02-maven-web:war:1.0-SNAPSHOT</p><p>[INFO] +- junit:junit:jar:4.12:test</p><p>[INFO] | - org.hamcrest:hamcrest-core:jar:1.3:test</p><p>[INFO] +- javax.servlet:javax.servlet-api:jar:3.1.0:provided</p><p>[INFO] - com.atguigu.maven:pro01-maven-java:jar:1.0-SNAPSHOT:compile</p><p>[INFO] - org.springframework:spring-core:jar:4.0.0.RELEASE:compile</p><p>[INFO] - commons-logging:commons-logging:jar:1.1.1:compile</p></blockquote><h3 id="_3、验证-test-和-provided-范围不能传递" tabindex="-1"><a class="header-anchor" href="#_3、验证-test-和-provided-范围不能传递" aria-hidden="true">#</a> 3、验证 test 和 provided 范围不能传递</h3><p>从上面的例子已经能够看到，pro01-maven-java 依赖了 junit，但是在 pro02-maven-web 工程中查看依赖树的时候并没有看到 junit。</p><p>要验证 provided 范围不能传递，可以在 pro01-maven-java 工程中加入 servlet-api 的依赖。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果还是和之前一样：</p><blockquote><p>TIP</p><p>[INFO] com.atguigu.maven:pro02-maven-web:war:1.0-SNAPSHOT</p><p>[INFO] +- junit:junit:jar:4.12:test</p><p>[INFO] | - org.hamcrest:hamcrest-core:jar:1.3:test</p><p>[INFO] +- javax.servlet:javax.servlet-api:jar:3.1.0:provided</p><p>[INFO] - com.atguigu.maven:pro01-maven-java:jar:1.0-SNAPSHOT:compile</p><p>[INFO] - org.springframework:spring-core:jar:4.0.0.RELEASE:compile</p><p>[INFO] - commons-logging:commons-logging:jar:1.1.1:compile</p></blockquote><hr><h2 id="第八节-实验八-测试依赖的排除" tabindex="-1"><a class="header-anchor" href="#第八节-实验八-测试依赖的排除" aria-hidden="true">#</a> 第八节 实验八：测试依赖的排除</h2><h3 id="_1、概念" tabindex="-1"><a class="header-anchor" href="#_1、概念" aria-hidden="true">#</a> 1、概念</h3><p>当 A 依赖 B，B 依赖 C 而且 C 可以传递到 A 的时候，A 不想要 C，需要在 A 里面把 C 排除掉。而往往这种情况都是为了避免 jar 包之间的冲突。</p><p><img src="`+A+`" alt="image-20230315160732213"></p><p>所以配置依赖的排除其实就是阻止某些 jar 包的传递。因为这样的 jar 包传递过来会和其他 jar 包冲突。</p><h3 id="_2、配置方式" tabindex="-1"><a class="header-anchor" href="#_2、配置方式" aria-hidden="true">#</a> 2、配置方式</h3><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.atguigu.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>pro01-maven-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
	<span class="token comment">&lt;!-- 使用excludes标签配置依赖的排除	--&gt;</span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>
		<span class="token comment">&lt;!-- 在exclude标签中配置一个具体的排除 --&gt;</span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>
			<span class="token comment">&lt;!-- 指定要排除的依赖的坐标（不需要写version） --&gt;</span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、测试" tabindex="-1"><a class="header-anchor" href="#_3、测试" aria-hidden="true">#</a> 3、测试</h3><p>测试的方式：在 pro02-maven-web 工程中配置对 commons-logging 的排除</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.atguigu.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>pro01-maven-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
	<span class="token comment">&lt;!-- 使用excludes标签配置依赖的排除	--&gt;</span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>
		<span class="token comment">&lt;!-- 在exclude标签中配置一个具体的排除 --&gt;</span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>
			<span class="token comment">&lt;!-- 指定要排除的依赖的坐标（不需要写version） --&gt;</span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行 mvn dependency:tree 命令查看效果：</p><blockquote><p>TIP</p><p>[INFO] com.atguigu.maven:pro02-maven-web:war:1.0-SNAPSHOT</p><p>[INFO] +- junit:junit:jar:4.12:test</p><p>[INFO] | - org.hamcrest:hamcrest-core:jar:1.3:test</p><p>[INFO] +- javax.servlet:javax.servlet-api:jar:3.1.0:provided</p><p>[INFO] - com.atguigu.maven:pro01-maven-java:jar:1.0-SNAPSHOT:compile</p><p>[INFO] - org.springframework:spring-core:jar:4.0.0.RELEASE:compile</p></blockquote><p>发现在 spring-core 下面就没有 commons-logging 了。</p><hr><h2 id="第九节-实验九-继承" tabindex="-1"><a class="header-anchor" href="#第九节-实验九-继承" aria-hidden="true">#</a> 第九节 实验九：继承</h2><h3 id="_1、概念-1" tabindex="-1"><a class="header-anchor" href="#_1、概念-1" aria-hidden="true">#</a> 1、概念</h3><p>Maven工程之间，A 工程继承 B 工程</p><ul><li>B 工程：父工程</li><li>A 工程：子工程</li></ul><p>本质上是 A 工程的 pom.xml 中的配置继承了 B 工程中 pom.xml 的配置。</p><h3 id="_2、作用" tabindex="-1"><a class="header-anchor" href="#_2、作用" aria-hidden="true">#</a> 2、作用</h3><p>在父工程中统一管理项目中的依赖信息，具体来说是管理依赖信息的版本。</p><p>它的背景是：</p><ul><li>对一个比较大型的项目进行了模块拆分。</li><li>一个 project 下面，创建了很多个 module。</li><li>每一个 module 都需要配置自己的依赖信息。</li></ul><p>它背后的需求是：</p><ul><li>在每一个 module 中各自维护各自的依赖信息很容易发生出入，不易统一管理。</li><li>使用同一个框架内的不同 jar 包，它们应该是同一个版本，所以整个项目中使用的框架版本需要统一。</li><li>使用框架时所需要的 jar 包组合（或者说依赖信息组合）需要经过长期摸索和反复调试，最终确定一个可用组合。这个耗费很大精力总结出来的方案不应该在新的项目中重新摸索。</li></ul><p>通过在父工程中为整个项目维护依赖信息的组合既<strong>保证了整个项目使用规范、准确的 jar 包</strong>；又能够将<strong>以往的经验沉淀</strong>下来，节约时间和精力。</p><h3 id="_3、举例" tabindex="-1"><a class="header-anchor" href="#_3、举例" aria-hidden="true">#</a> 3、举例</h3><p>在一个工程中依赖多个 Spring 的 jar 包</p><blockquote><p>TIP</p><p>[INFO] +- org.springframework:<strong>spring-core</strong>:jar:<strong>4.0.0</strong>.RELEASE:compile</p><p>[INFO] | - commons-logging:commons-logging:jar:1.1.1:compile</p><p>[INFO] +- org.springframework:<strong>spring-beans</strong>:jar:<strong>4.0.0</strong>.RELEASE:compile</p><p>[INFO] +- org.springframework:<strong>spring-context</strong>:jar:<strong>4.0.0</strong>.RELEASE:compile</p><p>[INFO] +- org.springframework:<strong>spring-expression</strong>:jar:4.0.0.RELEASE:compile</p><p>[INFO] +- org.springframework:<strong>spring-aop</strong>:jar:<strong>4.0.0</strong>.RELEASE:compile</p><p>[INFO] | - aopalliance:aopalliance:jar:1.0:compile</p></blockquote><p>使用 Spring 时要求所有 Spring 自己的 jar 包版本必须一致。为了能够对这些 jar 包的版本进行统一管理，我们使用继承这个机制，将所有版本信息统一在父工程中进行管理。</p><h3 id="_4、操作" tabindex="-1"><a class="header-anchor" href="#_4、操作" aria-hidden="true">#</a> 4、操作</h3><h4 id="_1创建父工程" tabindex="-1"><a class="header-anchor" href="#_1创建父工程" aria-hidden="true">#</a> ①创建父工程</h4><p>创建的过程和前面创建 pro01-maven-java 一样。</p><p>工程名称：pro03-maven-parent</p><p>工程创建好之后，要修改它的打包方式：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.atguigu.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>pro03-maven-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>

  <span class="token comment">&lt;!-- 当前工程作为父工程，它要去管理子工程，所以打包方式必须是 pom --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只有打包方式为 pom 的 Maven 工程能够管理其他 Maven 工程。打包方式为 pom 的 Maven 工程中不写业务代码，它是专门管理其他 Maven 工程的工程。</p><h4 id="_2创建模块工程" tabindex="-1"><a class="header-anchor" href="#_2创建模块工程" aria-hidden="true">#</a> ②创建模块工程</h4><p>模块工程类似于 IDEA 中的 module，所以需要<strong>进入 pro03-maven-parent 工程的根目录</strong>，然后运行 mvn archetype:generate 命令来创建模块工程。</p><p>假设，我们创建三个模块工程：</p><img src="`+O+`" alt="image-20230315160944529" style="zoom:50%;"><h4 id="_3查看被添加新内容的父工程-pom-xml" tabindex="-1"><a class="header-anchor" href="#_3查看被添加新内容的父工程-pom-xml" aria-hidden="true">#</a> ③查看被添加新内容的父工程 pom.xml</h4><p>下面 modules 和 module 标签是聚合功能的配置</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">&gt;</span></span>  
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>pro04-maven-module<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>pro05-maven-module<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>pro06-maven-module<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4解读子工程的pom-xml" tabindex="-1"><a class="header-anchor" href="#_4解读子工程的pom-xml" aria-hidden="true">#</a> ④解读子工程的pom.xml</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 使用parent标签指定当前工程的父工程 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>
	<span class="token comment">&lt;!-- 父工程的坐标 --&gt;</span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.atguigu.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>pro03-maven-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 子工程的坐标 --&gt;</span>
<span class="token comment">&lt;!-- 如果子工程坐标中的groupId和version与父工程一致，那么可以省略 --&gt;</span>
<span class="token comment">&lt;!-- &lt;groupId&gt;com.atguigu.maven&lt;/groupId&gt; --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>pro04-maven-module<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; --&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5在父工程中配置依赖的统一管理" tabindex="-1"><a class="header-anchor" href="#_5在父工程中配置依赖的统一管理" aria-hidden="true">#</a> ⑤在父工程中配置依赖的统一管理</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 使用dependencyManagement标签配置对依赖的管理 --&gt;</span>
<span class="token comment">&lt;!-- 被管理的依赖并没有真正被引入到工程 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.0.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-beans<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.0.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.0.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-expression<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.0.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.0.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6子工程中引用那些被父工程管理的依赖" tabindex="-1"><a class="header-anchor" href="#_6子工程中引用那些被父工程管理的依赖" aria-hidden="true">#</a> ⑥子工程中引用那些被父工程管理的依赖</h4><p>关键点：省略版本号</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 子工程引用父工程中的依赖信息时，可以把版本号去掉。	--&gt;</span>
<span class="token comment">&lt;!-- 把版本号去掉就表示子工程中这个依赖的版本由父工程决定。 --&gt;</span>
<span class="token comment">&lt;!-- 具体来说是由父工程的dependencyManagement来决定。 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-beans<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-expression<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7在父工程中升级依赖信息的版本" tabindex="-1"><a class="header-anchor" href="#_7在父工程中升级依赖信息的版本" aria-hidden="true">#</a> ⑦在父工程中升级依赖信息的版本</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>……
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
				<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
				<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-beans<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
				<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.1.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
……
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在子工程中运行mvn dependency:list，效果如下：</p><blockquote><p>TIP</p><p>[INFO] org.springframework:spring-aop:jar:4.1.4.RELEASE:compile</p><p>[INFO] org.springframework:spring-core:jar:4.1.4.RELEASE:compile</p><p>[INFO] org.springframework:spring-context:jar:4.1.4.RELEASE:compile</p><p>[INFO] org.springframework:spring-beans:jar:4.1.4.RELEASE:compile</p><p>[INFO] org.springframework:spring-expression:jar:4.1.4.RELEASE:compile</p></blockquote><h4 id="_8在父工程中声明自定义属性" tabindex="-1"><a class="header-anchor" href="#_8在父工程中声明自定义属性" aria-hidden="true">#</a> ⑧在父工程中声明自定义属性</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 通过自定义属性，统一指定Spring的版本 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>
	
	<span class="token comment">&lt;!-- 自定义标签，维护Spring版本数据 --&gt;</span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>atguigu.spring.version</span><span class="token punctuation">&gt;</span></span>4.3.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>atguigu.spring.version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在需要的地方使用\${}的形式来引用自定义的属性名：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
				<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
				<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
				<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${atguigu.spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>真正实现“一处修改，处处生效”。</p><h3 id="_5、实际意义" tabindex="-1"><a class="header-anchor" href="#_5、实际意义" aria-hidden="true">#</a> 5、实际意义</h3><p><img src="`+N+'" alt="image-20230315161101996"></p><p>编写一套符合要求、开发各种功能都能正常工作的依赖组合并不容易。如果公司里已经有人总结了成熟的组合方案，那么再开发新项目时，如果不使用原有的积累，而是重新摸索，会浪费大量的时间。为了提高效率，我们可以使用工程继承的机制，让成熟的依赖组合方案能够保留下来。</p><p>如上图所示，公司级的父工程中管理的就是成熟的依赖组合方案，各个新项目、子系统各取所需即可。</p><hr><h2 id="第十节-实验十-聚合" tabindex="-1"><a class="header-anchor" href="#第十节-实验十-聚合" aria-hidden="true">#</a> 第十节 实验十：聚合</h2><h3 id="_1、聚合本身的含义" tabindex="-1"><a class="header-anchor" href="#_1、聚合本身的含义" aria-hidden="true">#</a> 1、聚合本身的含义</h3><p>部分组成整体</p><p><img src="'+T+`" alt="image-20230315161152988"></p><p>动画片《战神金刚》中的经典台词：“我来组成头部！我来组成手臂！”就是聚合关系最生动的体现。</p><h3 id="_2、maven-中的聚合" tabindex="-1"><a class="header-anchor" href="#_2、maven-中的聚合" aria-hidden="true">#</a> 2、Maven 中的聚合</h3><p>使用一个“总工程”将各个“模块工程”汇集起来，作为一个整体对应完整的项目。</p><ul><li>项目：整体</li><li>模块：部分</li></ul><blockquote><p>TIP</p><p>概念的对应关系：</p><p>从继承关系角度来看：</p><ul><li>父工程</li><li>子工程</li></ul><p>从聚合关系角度来看：</p><ul><li>总工程</li><li>模块工程</li></ul></blockquote><h3 id="_3、好处" tabindex="-1"><a class="header-anchor" href="#_3、好处" aria-hidden="true">#</a> 3、好处</h3><ul><li><p>一键执行 Maven 命令：很多构建命令都可以在“总工程”中一键执行。</p><p>以 mvn install 命令为例：Maven 要求有父工程时先安装父工程；有依赖的工程时，先安装被依赖的工程。我们自己考虑这些规则会很麻烦。但是工程聚合之后，在总工程执行 mvn install 可以一键完成安装，而且会自动按照正确的顺序执行。</p></li><li><p>配置聚合之后，各个模块工程会在总工程中展示一个列表，让项目中的各个模块一目了然。</p></li></ul><h3 id="_4、聚合的配置" tabindex="-1"><a class="header-anchor" href="#_4、聚合的配置" aria-hidden="true">#</a> 4、聚合的配置</h3><p>在总工程中配置 modules 即可：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">&gt;</span></span>  
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>pro04-maven-module<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>pro05-maven-module<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">&gt;</span></span>pro06-maven-module<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5、依赖循环问题" tabindex="-1"><a class="header-anchor" href="#_5、依赖循环问题" aria-hidden="true">#</a> 5、依赖循环问题</h3><p>如果 A 工程依赖 B 工程，B 工程依赖 C 工程，C 工程又反过来依赖 A 工程，那么在执行构建操作时会报下面的错误：</p><blockquote><p>DANGER</p><p>[ERROR] [ERROR] The projects in the reactor contain a cyclic reference:</p></blockquote><p>这个错误的含义是：循环引用。</p>`,170);function C(B,D){const t=l("ExternalLinkIcon");return c(),o("div",null,[F,a("p",null,[n("对于不知道详细信息的依赖可以到"),a("a",P,[n("https://mvnrepository.com/网站查询。使用关键词搜索，然后在搜索结果列表中选择适合的使用。"),e(t)])]),H,a("p",null,[n("通过浏览器尝试访问："),a("a",R,[n("http://localhost:8080/pro02-maven-web/index.jsp"),e(t)])]),q])}const J=p(M,[["render",C],["__file","第三章 使用 Maven：命令行环境.html.vue"]]);export{J as default};
