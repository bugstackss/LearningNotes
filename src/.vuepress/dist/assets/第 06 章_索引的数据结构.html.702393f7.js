import{_ as a}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as n,a as e}from"./app.9b10ba0a.js";const t="/assets/image-20221218165346385.41bc5d1f.png",p="/assets/image-20221218165421325.a71e5855.png",o="/assets/image-20221218170703803.cde8accb.png",c="/assets/image-20221218170744518.6650f9b3.png",i="/assets/image-20221218170912236.68f3f334.png",d="/assets/image-20221218170933732.4d30dd74.png",r="/assets/image-20221218171239759.044b7eb9.png",l="/assets/image-20221218171304486.09f04b71.png",m="/assets/image-20221218171933035.78f41653.png",u="/assets/image-20221218171944831.ffabf0eb.png",g="/assets/image-20221218172301199.06489d52.png",h="/assets/image-20221218172347048.4090d79d.png",k="/assets/image-20221218172631545.299c9cf7.png",_="/assets/image-20221218172648694.e8085902.png",b="/assets/image-20221218172953450.ee7a53b6.png",v="/assets/image-20221218173006584.792759d4.png",y="/assets/image-20221218173404204.ff5da4b4.png",f="/assets/image-20221218173418094.fdd845ed.png",B="/assets/image-20221218173452005.c966577a.png",x="/assets/image-20221218173558309.9d59042e.png",M="/assets/image-20221218174728547.d25567b8.png",I="/assets/image-20221218174800645.6933ed87.png",S="/assets/image-20221218174839278.64d70fe4.png",w="/assets/image-20221218175035555.35ec0d12.png",T="/assets/image-20221218175209842.503a5033.png",q="/assets/image-20221218175315443.1d298335.png",A="/assets/image-20221218175332960.bd04eb61.png",D="/assets/image-20221218175346114.05134cb5.png",H="/assets/image-20221218175737163.ae7a1f43.png",R="/assets/image-20221218175802829.d0f6d0aa.png",j="/assets/image-20221218175817870.da0140ac.png",P="/assets/image-20221218180028571.a953066e.png",K="/assets/image-20221218180304018.b3ac3fbf.png",L="/assets/image-20221218180329902.1bd50c05.png",O="/assets/image-20221218180351580.c43a5df5.png",Q="/assets/image-20221218180407642.223cdedf.png",E="/assets/image-20221218180418360.0da9fdef.png",C="/assets/image-20221218180444306.0cc80e30.png",N="/assets/image-20221218180933075.c4aad942.png",F="/assets/image-20221218181109340.52c5cddd.png",G="/assets/image-20221218181122426.ca9bdd64.png",V="/assets/image-20221218181209551.0221c358.png",W="/assets/image-20221218181313511.db94e9ae.png",Y="/assets/image-20221218181326323.014acf5e.png",U="/assets/image-20221218181417553.a6ad815c.png",z="/assets/image-20221218181435352.682ee37d.png",J="/assets/image-20221218181506176.637b04a6.png",X="/assets/image-20221218181516891.31ce3669.png",Z="/assets/image-20221218181533685.b99d9559.png",$="/assets/image-20221218181544556.326c0123.png",aa="/assets/image-20221218181559220.ccb95f03.png",sa="/assets/image-20221218181923004.fc9bfac1.png",na="/assets/image-20221218181949466.0eeb3994.png",ea="/assets/image-20221218182253177.9e6348f4.png",ta="/assets/image-20221218182304749.a14b91cb.png",pa="/assets/image-20221218182445669.1af7bf52.png",oa="/assets/image-20221218182627285.b7685267.png",ca="/assets/image-20221218182644848.bb4b0c07.png",ia="/assets/image-20221218182703404.c11557a8.png",da="/assets/image-20221218182713659.986ed7f8.png",ra="/assets/image-20221218182726669.3c1d9f08.png",la="/assets/image-20221218183245835.99f47098.png",ma="/assets/image-20221218183428557.63f7ebe9.png",ua="/assets/image-20221218183501629.559cc8e7.png",ga="/assets/image-20221218183641085.f4295045.png",ha="/assets/image-20221218183651373.d732031b.png",ka="/assets/image-20221218183854750.77f7d0d4.png",_a="/assets/image-20221218183917479.51b7cd8b.png",ba={},va=e('<h1 id="第-06-章-索引的数据结构" tabindex="-1"><a class="header-anchor" href="#第-06-章-索引的数据结构" aria-hidden="true">#</a> 第 06 章_索引的数据结构</h1><h2 id="_1-为什么使用索引" tabindex="-1"><a class="header-anchor" href="#_1-为什么使用索引" aria-hidden="true">#</a> 1. 为什么使用索引</h2><p><img src="'+t+'" alt="image-20221218165346385"></p><p>假如给数据使用<code>二叉树</code>这样的数据结构进行存储，如下图所示</p><p><img src="'+p+`" alt="image-20221218165421325"></p><h2 id="_2-索引及其优缺点" tabindex="-1"><a class="header-anchor" href="#_2-索引及其优缺点" aria-hidden="true">#</a> 2. 索引及其优缺点</h2><h3 id="_2-1索引概述" tabindex="-1"><a class="header-anchor" href="#_2-1索引概述" aria-hidden="true">#</a> 2.1索引概述</h3><p>MySQL官方对索引的定义为： <code>索引（Index）是帮助MySQL高效获取数据的数据结构</code> 。</p><p><strong>索引的本质：</strong> 索引是数据结构。你可以简单理解为“排好序的快速查找数据结构”，满足特定查找算法。这些数据结构以某种方式指向数据，这样就可以在这些数据结构的基础上实现<code>高级查找算法</code>。</p><h3 id="_2-2优点" tabindex="-1"><a class="header-anchor" href="#_2-2优点" aria-hidden="true">#</a> 2.2优点</h3><p>（ 1 ）类似大学图书馆建书目索引，提高数据检索的效率，降低<code>数据库的IO成本</code>，这也是创建索引最主要的原因。</p><p>（ 2 ）通过创建唯一索引，可以保证数据库表中每一行<code>数据的唯一性</code>。</p><p>（ 3 ）在实现数据的 参考完整性方面，可以<code>加速表和表之间的连接</code>。换句话说，对于有依赖关系的子表和父表联合查询时，可以提高查询速度。</p><p>（ 4 ）在使用分组和排序子句进行数据查询时，可以显著<code>减少查询中分组和排序的时间</code>，降低了CPU的消耗。</p><h3 id="_2-3缺点" tabindex="-1"><a class="header-anchor" href="#_2-3缺点" aria-hidden="true">#</a> 2.3缺点</h3><p>增加索引也有许多不利的方面，主要表现在如下几个方面：</p><p>（ 1 ）创建索引和维护索引要耗费时间，并且随着数据量的增加，所<code>耗费的时间</code>也会增加。</p><p>（ 2 ）索引需要占<code>磁盘空间</code>，除了数据表占数据空间之外，每一个索引还要占一定的物理空间，<code>存储在磁盘上</code>，如果有大量的索引，索引文件就可能比数据文件更快达到最大文件尺寸。</p><p>（ 3 ）虽然索引大大提高了查询速度，同时却会<code>降低更新表的速度</code>。当对表中的数据进行增加、删除和修改的时候，索引也要动态地维护，这样就降低了数据的维护速度。</p><p>因此，选择使用索引时，需要综合考虑索引的优点和缺点。</p><blockquote><p>提示：在突发插入频繁的情况下，由于索引可以提高查询的速度，但是会影响插入记录的速度。这种情况下，可以先先删除表中的索引，然后插入数据，插入完成后再创建索引。</p></blockquote><h2 id="_3-innodb中索引的推演" tabindex="-1"><a class="header-anchor" href="#_3-innodb中索引的推演" aria-hidden="true">#</a> 3.InnoDB中索引的推演</h2><h3 id="_3-1-索引之前的查找" tabindex="-1"><a class="header-anchor" href="#_3-1-索引之前的查找" aria-hidden="true">#</a> 3. 1 索引之前的查找</h3><p>先来看一个精确匹配的例子：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SELECT [列名列表] FROM 表名 WHERE 列名 = xxx;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_1-在一个页中的查找" tabindex="-1"><a class="header-anchor" href="#_1-在一个页中的查找" aria-hidden="true">#</a> 1.在一个页中的查找</h4><p>假设目前表中的记录比较少，所有的记录都可以被存放到一个页中，在查找记录的时候可以根据搜索条件的不同分为两种情况:。</p><ul><li><p>以主键为搜索条件</p><p>可以在页目录中使用二分法快速定位到对应的槽，然后再遍历该槽对应分组中的记录即可快速找到指定的记录。</p></li><li><p>以其他列作为搜索条件</p><p>因为在数据页中并没有对非主键列建立所谓的页目录，所以我们无法通过二分法快速定位相应的槽。这种情况下只能从最小记录开始依次遍历单链表中的每条记录，然后对比每条记录是不是符合搜索条件。很显然，这种查找的效率是非常低的。</p></li></ul><h4 id="_2-在很多页中查找" tabindex="-1"><a class="header-anchor" href="#_2-在很多页中查找" aria-hidden="true">#</a> 2.在很多页中查找</h4><p>大部分情况下我们表中存放的记录都是非常多的，需要好多的数据页来存储这些记录。在很多页中查找记录的话可以分为两个步骤:</p><ol><li><p>定位到记录所在的页。</p></li><li><p>从所在的页内中查找相应的记录。</p></li></ol><p>在没有索引的情况下，不论是根据主键列或者其他列的值进行查找，由于我们并不能快速的定位到记录所在的页，所以只能<code>从第一个页</code>沿着<code>双向链表</code>一直往下找，在每一个页中根据我们上面的查找方式去查找指定的记录。因为要遍历所有的数据页，所以这种方式显然是<code>超级耗时</code>的。如果一个表有一亿条记录呢？此时<code>索引</code>应运而生。</p><p><img src="`+o+`" alt="image-20221218170703803"></p><h3 id="_3-2-设计索引" tabindex="-1"><a class="header-anchor" href="#_3-2-设计索引" aria-hidden="true">#</a> 3. 2 设计索引</h3><p>建一个表：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>mysql&gt; CREATE TABLE index_demo(
-&gt; c 1 INT,
-&gt; c 2 INT,
-&gt; c 3 CHAR( 1 ),
-&gt; PRIMARY KEY(c 1 )
-&gt; ) ROW_FORMAT = Compact;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个新建的index_demo表中有 2 个INT类型的列， 1 个CHAR( 1 )类型的列，而且我们规定了c 1 列为主键，这个表使用Compact行格式来实际存储记录的。这里我们简化了index_demo表的行格式示意图：</p><p><img src="`+c+'" alt="image-20221218170744518"></p><p>我们只在示意图里展示记录的这几个部分：</p><ul><li><code>record_type</code>：记录头信息的一项属性，表示记录的类型， <code>0</code> 表示普通记录、 <code>2</code> 表示最小记录、 <code>3</code> 表示最大记录、<code> 1</code> 目录项暂时还没用过，下面讲。</li><li><code>next_record</code>：记录头信息的一项属性，表示下一条地址相对于本条记录的地址偏移量，我们用箭头来表明下一条记录是谁。</li><li><code>各个列的值</code>：这里只记录在<code>index_demo</code>表中的三个列，分别是<code>c1</code>、<code>c2</code>和<code>c3</code>。</li><li><code>其他信息</code>：除了上述 3 种信息以外的所有信息，包括其他隐藏列的值以及记录的额外信息。</li></ul><p>将记录格式示意图的其他信息项暂时去掉并把它竖起来的效果就是这样：</p><p><img src="'+i+'" alt="image-20221218170912236"></p><p>把一些记录放到页里的示意图就是：</p><p><img src="'+d+'" alt="image-20221218170933732"></p><h4 id="_1-一个简单的索引设计方案" tabindex="-1"><a class="header-anchor" href="#_1-一个简单的索引设计方案" aria-hidden="true">#</a> 1.一个简单的索引设计方案</h4><p>我 们 在 根 据 某 个 搜 索 条 件 查 找 一 些 记 录 时 为 什 么 要 遍 历 所 有 的 数 据 页 呢 ？ 因 为 各 个 页 中 的 记 录 并 没 有 规 律 ， 我 们 并 不 知道 我们 的 搜索 条 件 匹 配 哪 些 页 中 的 记 录 ， 所 以 不 得 不 依 次 遍 历 所 有 的 数 据 页 。 所 以 如 果 我 们 想 快 速 的 定 位 到 需 要 查 找 的 记 录在 哪些 数 据 页 中 该 咋 办 ？ 我 们 可 以 为 快 速 定 位 记 录 所 在 的 数 据 页 而 建 立 一 个 目 录 ， 建 这 个 目 录 必 须 完 成 下 边 这 些事 ：</p><ul><li><code>下 一 个 数 据 页 中 用 户 记 录 的 主 键 值 必 须 大 于 上 一 个 页 中 用 户 记 录 的 主 键 值 。</code></li></ul><p><img src="'+r+'" alt="image-20221218171239759"></p><p><img src="'+l+'" alt="image-20221218171304486"></p><p>注意，新分配的<code>数据页编号</code>可能并不是连续的。它们只是通过维护着上一页和下一页的编号而建立了<code>链表</code>的关系。另外，<code>页10</code>中用户记录最大的主键值是<code>5</code>，而<code>页28</code>中有一条记录的主键值为<code>4</code>,因为<code>5 &gt; 4</code>，所以这就不符合下一个数据页中用户记录的主键值必须大于上一个页中用户记录的主键值的要求，所以在插入主键值为4的记录的时候需要伴随着<code>记录移动</code>，也就是把主键值为5的记录移动到页28中，然后再把主键值为4的记录插入到页10中，这个过程的示意图如下：</p><p><img src="'+m+'" alt="image-20221218171933035"></p><p><img src="'+u+'" alt="image-20221218171944831"></p><p>这个过程表明了对页中的记录进行增删改操作的过程中，我们必须通过一些诸如<code>记录移动</code>的操作来始终保证这个状态一直成立：下一个数据页中用户记录的主键值必须大于上一个页中用户记录的主键值。这个过程我们称之为<code>页分裂</code>。</p><p><img src="'+g+'" alt="image-20221218172301199"></p><p>所以我们为上边几个页做好的目录就像这样子：</p><p><img src="'+h+'" alt="image-20221218172347048"></p><p>以<code>页 28</code> 为例，它对应<code>目录项 2 </code>，这个目录项中包含着该页的页号 <code>28</code> 以及该页中用户记录的最小主键值 5 。我们只需要把几个目录项在物理存储器上连续存储（比如：数组），就可以实现根据主键值快速查找某条记录的功能了。比如：查找主键值为 <code>20</code> 的记录，具体查找过程分两步：</p><ol><li><p>先从目录项中根据<code>二分法</code>快速确定出主键值为 <code>20</code> 的记录在<code>目录项 3</code> 中（因为 <code>12 &lt; 20 &lt;209</code> ），它对应的页是<code>页 9</code> 。</p></li><li><p>再根据前边说的在页中查找记录的方式去<code>页 9</code> 中定位具体的记录。</p></li></ol><p>至此，针对数据页做的简易目录就搞定了。这个目录有一个别名，称为<code>索引</code>。</p><h4 id="_2-innodb中的索引方案" tabindex="-1"><a class="header-anchor" href="#_2-innodb中的索引方案" aria-hidden="true">#</a> 2. InnoDB中的索引方案</h4><h5 id="_1-迭代-1-次-目录项纪录的页" tabindex="-1"><a class="header-anchor" href="#_1-迭代-1-次-目录项纪录的页" aria-hidden="true">#</a> <strong>① 迭代 1 次：目录项纪录的页</strong></h5><p><img src="'+k+'" alt="image-20221218172631545"></p><p>我们把前边使用到的目录项放到数据页中的样子就是这样：</p><p><img src="'+_+'" alt="image-20221218172648694"></p><p>从图中可以看出来，我们新分配了一个编号为 30 的页来专门存储目录项记录。这里再次强调<code>目录项记录</code>和普通的<code>用户记录</code>的 不同点 ：</p><ul><li><code>目录项记录</code>的<code>record_type</code>值是 1 ，而<code>普通用户记录</code>的<code>record_type</code>值是 0 。</li><li>目录项记录只有<code>主键值和页的编号</code>两个列，而普通的用户记录的列是用户自己定义的，可能包含<code>很多列</code>，另外还有InnoDB自己添加的隐藏列。</li><li>了解：记录头信息里还有一个叫<code>min_rec_mask</code>的属性，只有在存储<code>目录项记录</code>的页中的主键值最小的<code>目录项记录</code>的<code>min_rec_mask</code>值为 <code>1</code> ，其他别的记录的<code>min_rec_mask</code>值都是 <code>0</code> 。</li></ul><p><strong>相同点</strong>： 两者用的是一样的数据页，都会为主键值生成<code>Page Directory（页目录）</code>，从而在按照主键值进行查找时可以使用<code>二分法</code>来加快查询速度。</p><p>现在以查找主键为 20 的记录为例，根据某个主键值去查找记录的步骤就可以大致拆分成下边两步：</p><ol><li>先到存储目录项记录的页，也就是页 30 中通过二分法快速定位到对应目录项，因为 12 &lt; 20 &lt; 209 ，所以定位到对应的记录所在的页就是页 9 。</li><li>再到存储用户记录的页 9 中根据二分法快速定位到主键值为 20 的用户记录。</li></ol><h5 id="_2-迭代-2-次-多个目录项纪录的页" tabindex="-1"><a class="header-anchor" href="#_2-迭代-2-次-多个目录项纪录的页" aria-hidden="true">#</a> ② 迭代 2 次：多个目录项纪录的页</h5><p><img src="'+b+'" alt="image-20221218172953450"></p><p><img src="'+v+'" alt="image-20221218173006584"></p><p>从图中可以看出，我们插入了一条主键值为 320 的用户记录之后需要两个新的数据页：</p><ul><li>为存储该用户记录而新生成了<code>页 31</code> 。</li><li>因为原先存储目录项记录的<code>页 30 的容量已满</code>（我们前边假设只能存储 4 条目录项记录），所以不得不需要一个新的<code>页^32</code> 来存放<code>页^31</code> 对应的目录项。</li></ul><p>现在因为存储目录项记录的页不止一个，所以如果我们想根据主键值查找一条用户记录大致需要 3 个步骤，以查找主键值为 <code>20</code> 的记录为例：</p><ol><li><p>确定<code>目录项记录页</code></p><p>我们现在的存储目录项记录的页有两个，即<code>页 30</code> 和<code>页 32</code> ，又因为页 30 表示的目录项的主键值的范围是<code>[ 1 , 320 )</code>，页 32 表示的目录项的主键值不小于 <code>320</code> ，所以主键值为 <code>20</code> 的记录对应的目录项记录在<code>页^30</code> 中。</p></li><li><p>通过目录项记录页<code>确定用户记录真实所在的页</code>。</p><p>在一个存储<code>目录项记录</code>的页中通过主键值定位一条目录项记录的方式说过了。</p></li><li><p>在真实存储用户记录的页中定位到具体的记录。</p></li></ol><h5 id="_3迭代-3-次-目录项记录页的目录页" tabindex="-1"><a class="header-anchor" href="#_3迭代-3-次-目录项记录页的目录页" aria-hidden="true">#</a> ③迭代^3 次：目录项记录页的目录页</h5><p><img src="'+y+'" alt="image-20221218173404204"></p><p><img src="'+f+'" alt="image-20221218173418094"></p><p>如图，我们生成了一个存储更高级目录项的页 (^33) ，这个页中的两条记录分别代表页 30 和页 32 ，如果用户记录的主键值在[1, 320)之间，则到页 30 中查找更详细的目录项记录，如果主键值不小于 320 的话，就到页 32 中查找更详细的目录项记录。</p><p>随着表中记录的增加，这个目录的层级会继续增加，如果简化一下，我们可以用下边这个图来描述它：</p><p><img src="'+B+'" alt="image-20221218173452005"></p><h6 id="这个数据结构-它的名称是b-树。" tabindex="-1"><a class="header-anchor" href="#这个数据结构-它的名称是b-树。" aria-hidden="true">#</a> 这个数据结构，它的名称是<code>B+树</code>。</h6><h5 id="_4b-tree" tabindex="-1"><a class="header-anchor" href="#_4b-tree" aria-hidden="true">#</a> ④B+Tree</h5><p><img src="'+x+'" alt="image-20221218173558309"></p><p>一个B+树的节点其实可以分成好多层，规定最下边的那层，也就是存放我们用户记录的那层为第<code>0</code> 层，之后依次往上加。之前我们做了一个非常极端的假设：存放用户记录的页<code>最多存放 (^3) 条记录</code>，存放目录项记录的页<code>最多存放 4 条记录</code>。其实真实环境中一个页存放的记录数量是非常大的，假设所有存放用户记录的叶子节点代表的数据页可以存放 <code>100 条用户记录</code>，所有存放目录项记录的内节点代表的数据页可以存放<code> 1000 条目录项记录</code>，那么：</p><ul><li>如果B+树只有 1 层，也就是只有 1 个用于存放用户记录的节点，最多能存放 <code>100</code> 条记录。</li><li>如果B+树有 2 层，最多能存放<code>1000×100=10,0000</code>条记录。</li><li>如果B+树有 3 层，最多能存放<code>1000×1000×100=1,0000,0000</code>条记录。</li><li>如果B+树有 4 层，最多能存放<code>1000×1000×1000×100=1000,0000,0000</code>条记录。相当多的记录！！！</li></ul><p>你的表里能存放 <code>100000000000</code> 条记录吗？所以一般情况下，我们<code>用到的B+树都不会超过 4 层</code>，那我们通过主键值去查找某条记录最多只需要做 4 个页面内的查找（查找 3 个目录项页和一个用户记录页），又因为在每个页面内有所谓的<code>PageDirectory（页目录）</code>，所以在页面内也可以通过<code>二分法</code>实现快速定位记录。</p><h3 id="_3-3常见索引概念" tabindex="-1"><a class="header-anchor" href="#_3-3常见索引概念" aria-hidden="true">#</a> 3.3常见索引概念</h3><p>索引按照物理实现方式，索引可以分为 2 种：聚簇（聚集）和非聚簇（非聚集）索引。我们也把非聚集索引称为二级索引或者辅助索引。</p><h4 id="_1-聚簇索引" tabindex="-1"><a class="header-anchor" href="#_1-聚簇索引" aria-hidden="true">#</a> 1.聚簇索引</h4><p><strong>所有的用户记录都存在了 叶子节点，数据即索引，索引即数据</strong></p><p><strong>特点：</strong></p><ol><li><p>使用记录主键值的大小进行记录和页的排序，这包括三个方面的含义：</p><ul><li><p><code>页内</code>的记录是按照主键的大小顺序排成一个<code>单向链表</code>。</p><p>各个存放用户记录的页也是根据页中用户记录的主键大小顺序排成一个双向链表。存放目录项记录的页分为不同的层次，在同一层次中的页也是根据页中目录项记录的主键大小顺序排成一个双向链表。</p></li></ul></li><li><p>B+树的叶子节点存储的是完整的用户记录。</p><p>所谓完整的用户记录，就是指这个记录中存储了所有列的值（包括隐藏列）。</p></li></ol><p><strong>优点：</strong></p><ul><li><p><code>数据访问更快</code>，因为聚簇索引将索引和数据保存在同一个B+树中，因此从聚簇索引中获取数据比非聚簇索引更快</p></li><li><p>聚簇索引对于主键的<code>排序查找</code>和<code>范围查找</code>速度非常快</p><p>按照聚簇索引排列顺序，查询显示一定范围数据的时候，由于数据都是紧密相连，数据库不用从多个数据块中提取数据，所以节省了大量的io操作。</p></li></ul><p><strong>缺点：</strong></p><ul><li><code>插入速度严重依赖于插入顺序</code>，按照主键的顺序插入是最快的方式，否则将会出现页分裂，严重影响性能。因此，对于InnoDB表，我们一般都会定义一个 <strong>自增的ID列为主键</strong></li><li><code>更新主键的代价很高</code>，因为将会导致被更新的行移动。因此，对于InnoDB表，我们一般定义 <strong>主键为不可更新</strong></li><li><code>二级索引访问需要两次索引查找</code>，第一次找到主键值，第二次根据主键值找到行数据</li></ul><h4 id="_2-二级索引-辅助索引、非聚簇索引" tabindex="-1"><a class="header-anchor" href="#_2-二级索引-辅助索引、非聚簇索引" aria-hidden="true">#</a> 2.二级索引（辅助索引、非聚簇索引）</h4><p><img src="'+M+'" alt="image-20221218174728547"></p><p><img src="'+I+'" alt="image-20221218174800645"></p><p><strong>概念：回表</strong> 我们根据这个以c 2 列大小排序的B+树只能确定我们要查找记录的主键值，所以如果我们想根据c 2 列的值查找到完整的用户记录的话，仍然需要到<code>聚簇索引</code>中再查一遍，这个过程称为<code>回表</code>。也就是根据c 2 列的值查询一条完整的用户记录需要使用到 <code>2</code> 棵B+树！</p><p><strong>问题：</strong> 为什么我们还需要一次<code>回表</code>操作呢？直接把完整的用户记录放到叶子节点不OK吗？</p><p><img src="'+S+'" alt="image-20221218174839278"></p><h4 id="_3-联合索引" tabindex="-1"><a class="header-anchor" href="#_3-联合索引" aria-hidden="true">#</a> 3. 联合索引</h4><p>我们也可以同时以多个列的大小作为排序规则，也就是同时为多个列建立索引，比方说我们想让B+树按照<code>c2 和c 3 列</code>的大小进行排序，这个包含两层含义：</p><ul><li>先把各个记录和页按照c 2 列进行排序。</li><li>在记录的c 2 列相同的情况下，采用c 3 列进行排序</li></ul><p>注意一点，以c 2 和c 3 列的大小为排序规则建立的B+树称为联合索引，本质上也是一个二级索引。它的意思与分别为c 2 和c 3 列分别建立索引的表述是不同的，不同点如下：</p><ul><li>建立联合索引只会建立如上图一样的 1 棵B+树。</li><li>为c 2 和c 3 列分别建立索引会分别以c 2 和c 3 列的大小为排序规则建立 2 棵B+树。</li></ul><p><img src="'+w+'" alt="image-20221218175035555"></p><h3 id="_3-4-innodb的b-树索引的注意事项" tabindex="-1"><a class="header-anchor" href="#_3-4-innodb的b-树索引的注意事项" aria-hidden="true">#</a> 3. 4 InnoDB的B+树索引的注意事项</h3><h4 id="_1-根页面位置万年不动" tabindex="-1"><a class="header-anchor" href="#_1-根页面位置万年不动" aria-hidden="true">#</a> 1. 根页面位置万年不动</h4><p><img src="'+T+'" alt="image-20221218175209842"></p><h4 id="_2-内节点中目录项记录的唯一性" tabindex="-1"><a class="header-anchor" href="#_2-内节点中目录项记录的唯一性" aria-hidden="true">#</a> 2 .内节点中目录项记录的唯一性</h4><p><img src="'+q+'" alt="image-20221218175315443"></p><p><img src="'+A+'" alt="image-20221218175332960"></p><p><img src="'+D+'" alt="image-20221218175346114"></p><h4 id="_3-一个页面最少存储-2-条记录" tabindex="-1"><a class="header-anchor" href="#_3-一个页面最少存储-2-条记录" aria-hidden="true">#</a> 3.一个页面最少存储 2 条记录</h4><p>一个B+树只需要很少的层级就可以轻松存储数亿条记录，查询速度相当不错!这是因为B+树本质上就是一个大的多层级目录，每经过一个目录时都会过滤掉许多无效的子目录，直到最后访问到存储真实数据的目录。那如果一个大的目录中只存放一个子目录是个啥效果呢?那就是目录层级非常非常非常多，而且最后的那个存放真实数据的目录中只能存放一条记录。费了半天劲只能存放一条真实的用户记录?所以InnoDB的一个数据页至少可以存放两条记录。</p><p>一个B+树只需要很少的层级就可以轻松存储数亿条记录，查询速度相当不错！这是因为B+树本质上就是一个大的多层级目录，每经过一个目录时都会过滤掉许多无效的子目录，直到最后访问到存储真实数据的目录.那如果一个大的目录中只存放一个子目录是个啥效果呢？那就是目录层级非常非常非常多，而且最后的那个存放真实数据的目录中只能存放一条记录.费了半天劲只能存放一条真实的用户记录？所以InnoDB的一个数据页至少可以存放两条记录。</p><h2 id="_4-myisam中的索引方案" tabindex="-1"><a class="header-anchor" href="#_4-myisam中的索引方案" aria-hidden="true">#</a> 4. MyISAM中的索引方案</h2><p><strong>B树索引适用存储引擎如表所示：</strong></p><table><thead><tr><th>索引 / 存储引擎</th><th>MyISAM</th><th>InnoDB</th><th>Memory</th></tr></thead><tbody><tr><td>B-Tree索引</td><td>支持</td><td>支持</td><td>支持</td></tr></tbody></table><p>即使多个存储引擎支持同一种类型的索引，但是他们的实现原理也是不同的。Innodb和MyISAM默认的索引是Btree索引；而Memory默认的索引是Hash索引。</p><p>MyISAM引擎使用<code>B+Tree</code>作为索引结构，叶子节点的data域存放的是<code>数据记录的地址</code>。</p><h3 id="_4-2-myisam索引的原理" tabindex="-1"><a class="header-anchor" href="#_4-2-myisam索引的原理" aria-hidden="true">#</a> 4. 2 MyISAM索引的原理</h3><p><img src="'+H+'" alt="image-20221218175737163"></p><p><img src="'+R+'" alt="image-20221218175802829"></p><p>如果我们在Col 2 上建立一个二级索引，则此索引的结构如下图所示：</p><p><img src="'+j+'" alt="image-20221218175817870"></p><p>同样也是一棵B+Tree，data域保存数据记录的地址。因此，MyISAM中索引检索的算法为:首先按照B+Tree搜索算法搜索索引，如果指定的Key存在，则取出其data域的值，然后以data域的值为地址，读取相应数据记录。</p><h3 id="_4-3-myisam-与-innodb对比" tabindex="-1"><a class="header-anchor" href="#_4-3-myisam-与-innodb对比" aria-hidden="true">#</a> 4. 3 MyISAM 与 InnoDB对比</h3><p><strong>MyISAM的索引方式都是“非聚簇”的，与InnoDB包含 1 个聚簇索引是不同的。小结两种引擎中索引的区别：</strong></p><p>① 在InnoDB存储引擎中，我们只需要根据主键值对<code>聚簇索引</code>进行一次查找就能找到对应的记录，而在<code>MyISAM</code>中却需要进行一次<code>回表</code>操作，意味着MyISAM中建立的索引相当于全部都是<code>二级索引</code>。</p><p>② InnoDB的数据文件本身就是索引文件，而MyISAM索引文件和数据文件是<code>分离的</code>，索引文件仅保存数据记录的地址。</p><p>③ InnoDB的非聚簇索引data域存储相应记录<code>主键的值</code>，而MyISAM索引记录的是<code>地址</code>。换句话说，InnoDB的所有非聚簇索引都引用主键作为data域。</p><p>④ MyISAM的回表操作是十分<code>快速</code>的，因为是拿着地址偏移量直接到文件中取数据的，反观InnoDB是通过获取主键之后再去聚簇索引里找记录，虽然说也不慢，但还是比不上直接用地址去访问。</p><p>⑤ InnoDB要求表<code>必须有主键</code>（<code>MyISAM可以没有</code>）。如果没有显式指定，则MySQL系统会自动选择一个可以非空且唯一标识数据记录的列作为主键。如果不存在这种列，则MySQL自动为InnoDB表生成一个隐含字段作为主键，这个字段长度为 6 个字节，类型为长整型。</p><p><img src="'+P+'" alt="image-20221218180028571"></p><h2 id="_5-索引的代价" tabindex="-1"><a class="header-anchor" href="#_5-索引的代价" aria-hidden="true">#</a> 5. 索引的代价</h2><p>索引是个好东西，可不能乱建，它在空间和时间上都会有消耗：</p><ul><li><p>空间上的代价</p><p>每建立一个索引都要为它建立一棵B+树，每一棵B+树的每一个节点都是一个数据页，一个页默认会占用 <code>16 KB</code>的存储空间，一棵很大的B+树由许多数据页组成，那就是很大的一片存储空间。</p></li><li><p>时间上的代价</p><p>每次对表中的数据进行<code>增、删、改</code>操作时，都需要去修改各个B+树索引。而且我们讲过，B+树每层节点都是按照索引列的值<code>从小到大的顺序</code>排序而组成了<code>双向链表</code>。不论是叶子节点中的记录，还是内节点中的记录（也就是不论是用户记录还是目录项记录）都是按照索引列的值从小到大的顺序而形成了一个单向链表。而增、删、改操作可能会对节点和记录的排序造成破坏，所以存储引擎需要额外的时间进行一些<code>记录移位</code>，<code>页面分裂</code>、<code>页面回收</code>等操作来维护好节点和记录的排序。如果我们建了许多索引，每个索引对应的B+树都要进行相关的维护操作，会给性能拖后腿。</p></li></ul><blockquote><p>总结：一个表上索引建的越多，就会占用越多的存储空间，在增删改记录的时候性能就越差。为了能建立又好又少的索引，我们得学学这些索引在哪些条件下起作用的。</p></blockquote><h2 id="_6-mysql数据结构选择的合理性" tabindex="-1"><a class="header-anchor" href="#_6-mysql数据结构选择的合理性" aria-hidden="true">#</a> 6. MySQL数据结构选择的合理性</h2><p><img src="'+K+'" alt="image-20221218180304018"></p><h3 id="_6-1-全表遍历" tabindex="-1"><a class="header-anchor" href="#_6-1-全表遍历" aria-hidden="true">#</a> 6. 1 全表遍历</h3><p>这里都懒得说了。</p><h3 id="_6-2-hash结构" tabindex="-1"><a class="header-anchor" href="#_6-2-hash结构" aria-hidden="true">#</a> 6. 2 Hash结构</h3><p><img src="'+L+'" alt="image-20221218180329902"></p><p><img src="'+O+'" alt="image-20221218180351580"></p><p><img src="'+Q+'" alt="image-20221218180407642"></p><p><img src="'+E+'" alt="image-20221218180418360"></p><p>上图中哈希函数h有可能将两个不同的关键字映射到相同的位置，这叫做<code>碰撞</code>，在数据库中一般采用<code>链接法</code>来解决。在链接法中，将散列到同一槽位的元素放在一个链表中，如下图所示：</p><p><img src="'+C+`" alt="image-20221218180444306"></p><p>实验：体会数组和hash表的查找方面的效率区别</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 算法复杂度为 O(n)</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> test1 <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span> <span class="token number">100000</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
				arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> j<span class="token operator">&lt;=</span> <span class="token number">100000</span> <span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
				<span class="token keyword">int</span> temp <span class="token operator">=</span> j<span class="token punctuation">;</span>
				<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
						<span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">==</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
								<span class="token keyword">break</span><span class="token punctuation">;</span>
								<span class="token punctuation">}</span>
						<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;time： &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//time： 823</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//算法复杂度为 O( 1 )</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> test <span class="token number">2</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span> <span class="token number">100000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">100000</span> <span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
				set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
  	<span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> j<span class="token operator">&lt;=</span> <span class="token number">100000</span> <span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">int</span> temp <span class="token operator">=</span> j<span class="token punctuation">;</span>
				<span class="token keyword">boolean</span> contains <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;time： &quot;</span> <span class="token punctuation">(</span><span class="token operator">^</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token operator">^</span><span class="token punctuation">)</span> <span class="token comment">//time： 5</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Hash结构效率高，那为什么索引结构要设计成树型呢？</strong></p><p><img src="`+N+'" alt="image-20221218180933075"></p><p><strong>Hash索引适用存储引擎如表所示：</strong></p><table><thead><tr><th>索引 / 存储引擎</th><th>MyISAM</th><th>InnoDB</th><th></th></tr></thead><tbody><tr><td>HASH索引</td><td>不支持</td><td>不支持</td><td>支持</td></tr></tbody></table><p><strong>Hash索引的适用性：</strong></p><p><img src="'+F+'" alt="image-20221218181109340"></p><p><img src="'+G+`" alt="image-20221218181122426"></p><p>采用自适应 Hash 索引目的是方便根据 SQL 的查询条件加速定位到叶子节点，特别是当 B+ 树比较深的时候，通过自适应 Hash 索引可以明显提高数据的检索效率。</p><p>我们可以通过<code>innodb_adaptive_hash_index</code>变量来查看是否开启了自适应 Hash，比如：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>mysql&gt; show variables like (^) &#39;%adaptive_hash_index&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+V+'" alt="image-20221218181209551"></p><h3 id="_6-3-二叉搜索树" tabindex="-1"><a class="header-anchor" href="#_6-3-二叉搜索树" aria-hidden="true">#</a> 6. 3 二叉搜索树</h3><p>如果我们利用二叉树作为索引结构，那么磁盘的IO次数和索引树的高度是相关的。</p><ol><li>二叉搜索树的特点</li></ol><p><img src="'+W+'" alt="image-20221218181313511"></p><p><img src="'+Y+'" alt="image-20221218181326323"></p><p>但是存在特殊的情况，就是有时候二叉树的深度非常大。比如我们给出的数据顺序是(5,22,23,34,77,89,91)，创造出来的二分搜索树如下图所示:</p><p><img src="'+U+'" alt="image-20221218181417553"></p><p><img src="'+z+'" alt="image-20221218181435352"></p><h3 id="_6-4-avl树" tabindex="-1"><a class="header-anchor" href="#_6-4-avl树" aria-hidden="true">#</a> 6. 4 AVL树</h3><p><img src="'+J+'" alt="image-20221218181506176"></p><p><img src="'+X+'" alt="image-20221218181516891"></p><p><img src="'+Z+'" alt="image-20221218181533685"></p><p><img src="'+$+'" alt="image-20221218181544556"></p><p><img src="'+aa+'" alt="image-20221218181559220"></p><h3 id="_6-5-b-tree" tabindex="-1"><a class="header-anchor" href="#_6-5-b-tree" aria-hidden="true">#</a> <strong>6.5 B-Tree</strong></h3><p>B 树的英文是 Balance Tree，也就是<code>多路平衡查找树</code>。简写为B-Tree（注意横杠表示这两个单词连起来的意思，不是减号）。它的高度远小于平衡二叉树的高度。</p><p>B 树的结构如下图所示：</p><p><img src="'+sa+'" alt="image-20221218181923004"></p><p><img src="'+na+'" alt="image-20221218181949466"></p><p>一个 M 阶的 B 树（M&gt; 2 ）有以下的特性：</p><ol><li><p>根节点的儿子数的范围是 [ 2 ,M]。</p></li><li><p>每个中间节点包含 k- 1 个关键字和 k 个孩子，孩子的数量 = 关键字的数量 + 1 ，k 的取值范围为[ceil(M/ 2 ), M]。</p></li><li><p>叶子节点包括 k- 1 个关键字（叶子节点没有孩子），k 的取值范围为 [ceil(M/ 2 ), M]。</p></li><li><p>假设中间节点节点的关键字为：Key[ 1 ], Key[ 2 ], ..., Key[k- 1 ]，且关键字按照升序排序，即 Key[i]&lt;Key[i+ 1 ]。此时 k- 1 个关键字相当于划分了 k 个范围，也就是对应着 k 个指针，即为：P[ 1 ], P[ 2 ], ...,P[k]，其中 P[ (^1) ] 指向关键字小于 Key[ (^1) ] 的子树，P[i] 指向关键字属于 (^) (Key[i- (^1) ], Key[i]) (^) 的子树，P[k]指向关键字大于^ Key[k-^1 ]^ 的子树。</p></li><li><p>所有叶子节点位于同一层。 上面那张图所表示的 B 树就是一棵 3 阶的 B 树。我们可以看下磁盘块 2 ，里面的关键字为（ 8 ， 12 ），它有 3 个孩子 ( 3 ， 5 )，( 9 ， 10 ) 和 ( 13 ， 15 )，你能看到 ( 3 ， 5 ) 小于 8 ，( 9 ， 10 ) 在 8 和 12 之间，而 ( 13 ， 15 )大于 12 ，刚好符合刚才我们给出的特征。 然后我们来看下如何用 B 树进行查找。假设我们想要查找的关键字是 9 ，那么步骤可以分为以下几步：</p></li><li><p>我们与根节点的关键字 ( 17 ，^35 ）进行比较，^9 小于 17 那么得到指针 P 1 ；</p></li><li><p>按照指针 P 1 找到磁盘块 2 ，关键字为（^8 ， 12 ），因为 9 在 8 和 12 之间，所以我们得到指针 P 2 ；</p></li><li><p>按照指针 P 2 找到磁盘块 6 ，关键字为（ (^9) ， 10 ），然后我们找到了关键字 9 。</p></li></ol><p>你能看出来在 B 树的搜索过程中，我们比较的次数并不少，但如果把数据读取出来然后在内存中进行比较，这个时间就是可以忽略不计的。而读取磁盘块本身需要进行 I/O 操作，消耗的时间比在内存中进行比较所需要的时间要多，是数据查找用时的重要因素。B 树相比于平衡二叉树来说磁盘 I/O 操作要少，在数据查询中比平衡二叉树效率要高。所以只要树的高度足够低，IO次数足够少，就可以提高查询性能。</p><p><img src="'+ea+'" alt="image-20221218182253177"></p><p><strong>再举例</strong> <strong>：</strong></p><p><img src="'+ta+'" alt="image-20221218182304749"></p><h3 id="_6-6-b-tree" tabindex="-1"><a class="header-anchor" href="#_6-6-b-tree" aria-hidden="true">#</a> 6. 6 B+Tree</h3><p>B+树也是一种多路搜索树，基于<code>B树做出了改进</code>，主流的DBMS都支持B+树的索引方式，比如MySQL。相比于B-Tree，<code>B+Tree适合文件索引系统</code>。</p><ul><li>MySQL官网说明：</li></ul><p><img src="'+pa+'" alt="image-20221218182445669"></p><p><strong>B+树和 B 树的差异：</strong></p><ol><li><p>有 k 个孩子的节点就有 k 个关键字。也就是孩子数量 = 关键字数，而 B 树中，孩子数量 = 关键字数+1 。</p></li><li><p>非叶子节点的关键字也会同时存在在子节点中，并且是在子节点中所有关键字的最大（或最</p></li></ol><h6 id="小-。" tabindex="-1"><a class="header-anchor" href="#小-。" aria-hidden="true">#</a> 小）。</h6><ol start="3"><li><p>非叶子节点仅用于索引，不保存数据记录，跟记录有关的信息都放在叶子节点中。而 B 树中，<code>非叶子节点既保存索引，也保存数据记录</code>。</p></li><li><p>所有关键字都在叶子节点出现，叶子节点构成一个有序链表，而且叶子节点本身按照关键字的大小从小到大顺序链接。</p></li></ol><p><img src="'+oa+'" alt="image-20221218182627285"></p><p><img src="'+ca+'" alt="image-20221218182644848"></p><p><img src="'+ia+'" alt="image-20221218182703404"></p><p><img src="'+da+'" alt="image-20221218182713659"></p><p><img src="'+ra+'" alt="image-20221218182726669"></p><blockquote><p>B 树和 B+ 树都可以作为索引的数据结构，在 MySQL 中采用的是 B+ 树。</p><p>但B树和B+树各有自己的应用场景，不能说B+树完全比B树好，反之亦然。</p></blockquote><p><strong>思考题：为了减少IO，索引树回一次性加载吗？</strong></p><blockquote><p>1、数据库索引是存储在磁盘上的，如果数据量很大，必然导致索引的大小也会很大，超过几个G。</p><p>2、当我们利用索引进行查询的时候，是不可能将全部几个G的索引都加载进内存的，我们能做的只能是：逐一加载每一个磁盘页，因为磁盘页对应着索引树的节点。</p></blockquote><p><img src="'+la+'" alt="image-20221218183245835"></p><p><strong>思考题：为什么说B+树比B-树更适合实际应用中操作系统的文件索引和数据库索引？</strong></p><p><img src="'+ma+'" alt="image-20221218183428557"></p><p><strong>思考题：Hash 索引与 B+ 树索引的区别</strong></p><p><img src="'+ua+'" alt="image-20221218183501629"></p><p><strong>思考题：Hash 索引与B+ 树索引是在建索引的时候手动指定的吗？</strong></p><p><img src="'+ga+'" alt="image-20221218183641085"></p><p><img src="'+ha+'" alt="image-20221218183651373"></p><h3 id="_6-7-r树" tabindex="-1"><a class="header-anchor" href="#_6-7-r树" aria-hidden="true">#</a> 6. 7 R树</h3><p>R-Tree在MySQL很少使用，仅支持<code>geometry数据类型</code>，支持该类型的存储引擎只有myisam、bdb、innodb、ndb、archive几种。举个R树在现实领域中能够解决的例子：查找 20 英里以内所有的餐厅。如果没有R树你会怎么解决？一般情况下我们会把餐厅的坐标(x,y)分为两个字段存放在数据库中，一个字段记录经度，另一个字段记录纬度。这样的话我们就需要遍历所有的餐厅获取其位置信息，然后计算是否满足要求。如果一个地区有 100 家餐厅的话，我们就要进行 100 次位置计算操作了，如果应用到谷歌、百度地图这种超大数据库中，这种方法便必定不可行了。R树就很好的<code>解决了这种高维空间搜索问题</code>。它把B树的思想很好的扩展到了多维空间，采用了B树分割空间的思想，并在添加、删除操作时采用合并、分解结点的方法，保证树的平衡性。因此，R树就是一棵用来<code>存储高维数据的平衡树</code>。相对于B-Tree，R-Tree的优势在于范围查找。</p><table><thead><tr><th>索引 / 存储引擎</th><th>MyISAM</th><th>InnoDB</th><th>Memory</th></tr></thead><tbody><tr><td>R-Tree索引</td><td>支持</td><td>支持</td><td>不支持</td></tr></tbody></table><p><img src="'+ka+'" alt="image-20221218183854750"></p><h3 id="附录-算法的时间复杂度" tabindex="-1"><a class="header-anchor" href="#附录-算法的时间复杂度" aria-hidden="true">#</a> 附录：算法的时间复杂度</h3><p>同一问题可用不同算法解决，而一个算法的质量优劣将影响到算法乃至程序的效率。算法分析的目的在于选择合适算法和改进算法。</p><p><img src="'+_a+'" alt="image-20221218183917479"></p>',224),ya=[va];function fa(Ba,xa){return s(),n("div",null,ya)}const Sa=a(ba,[["render",fa],["__file","第 06 章_索引的数据结构.html.vue"]]);export{Sa as default};
