import{_ as o}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as c,c as l,d as n,e as s,b as e,a as t,r as i}from"./app.9b10ba0a.js";const p={},r=n("h2",{id:"说明",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#说明","aria-hidden":"true"},"#"),s(" #说明")],-1),u=n("p",null,"截至目前,市场上前端主流仍是axios 不论是react还是vue或是其他,大部分首推都是使用axios",-1),d=n("p",null,[n("strong",null,"但这是为什么呢?")],-1),h=n("li",null,[s("换做以前的我就只会说因为axios用的人多啊.但实际上这回答更像是一种 "),n("strong",null,"强辩")],-1),k={href:"https://github.com/alitajs/alita",target:"_blank",rel:"noopener noreferrer"},b=n("strong",null,"umi4",-1),m=n("li",null,"当然本文写于2021年,就以此时的版本进行分析",-1),f={href:"https://blog.logrocket.com/axios-or-fetch-api/",target:"_blank",rel:"noopener noreferrer"},v=t('<h2 id="_1、ajax" tabindex="-1"><a class="header-anchor" href="#_1、ajax" aria-hidden="true">#</a> 1、ajax</h2><blockquote><p>本身是针对MVC的编程,不符合现在前端MVVM的浪潮</p><p>基于原生的XHR开发,XHR本身的架构不够清晰,已经有了fetch的替代方案</p></blockquote><h2 id="_2、fetch" tabindex="-1"><a class="header-anchor" href="#_2、fetch" aria-hidden="true">#</a> 2、fetch</h2><blockquote><p>fetch号称是AJAX的替代品,是在ES6出现的,使用了ES6中Promise对象</p><p>fetch的代码结构笔记ajax简单多了,但<code>fetch不是ajax的进一步封装,而是原生js,没有使用XMLHttpRequest对象</code></p><h6 id="优点" tabindex="-1"><a class="header-anchor" href="#优点" aria-hidden="true">#</a> 优点:</h6><blockquote><ul><li>符合关注分离: 没有将输入、输出和用事件来跟踪的状态混杂在一个对象里</li><li>更加底层,提供的API丰富,是更好更方便的写法</li><li>脱离了XHR,是ES规范里新的实现方式</li></ul></blockquote><h6 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点</h6><blockquote><ul><li>fetch只对网络请求报错,对400、500都当成成功的请求,需要封装去处理</li><li>fetch默认不会带cookie,需要添加配置项</li><li>fetch不支持 abort(中止) 、不支持超时控制,使用<code>setTimeout</code>及<code>Promise.reject</code>实现的超时控制并不能阻止请求过程继续在后台运行,造成了量的浪费</li><li>fetch不能原生检测请求的进度,而XHR可以</li></ul></blockquote></blockquote><h2 id="_3、axios" tabindex="-1"><a class="header-anchor" href="#_3、axios" aria-hidden="true">#</a> 3、axios</h2><blockquote><p>Axios是一个基于promise的HTTP库,可以在浏览器和Nodejs中使用</p><h6 id="特性" tabindex="-1"><a class="header-anchor" href="#特性" aria-hidden="true">#</a> 特性</h6><blockquote><ul><li>从浏览器中创建<code>XMLHttpRequests</code></li><li>从Node.js中创建http请求</li><li>支持Promise API</li><li>拦截请求和响应</li><li>转换请求数据和响应数据</li><li>取消请求</li><li>自动转换JSON数据</li><li>客户端支持防御XSRF</li></ul></blockquote><p><code>XSRF</code>: 跨站请求攻击，简单地说，是攻击者通过一些技术手段欺骗用户的浏览器去访问一个自己曾经认证过的网站并运行一些操作（如发邮件，发消息，甚至财产操作如转账和购买商品）。由于浏览器曾经认证过，所以被访问的网站会认为是真正的用户操作而去运行。这利用了web中用户身份验证的一个漏洞：<strong>简单的身份验证只能保证请求是发自某个用户的浏览器，却不能保证请求本身是用户自愿发出的</strong>。</p></blockquote><h3 id="优缺点" tabindex="-1"><a class="header-anchor" href="#优缺点" aria-hidden="true">#</a> 优缺点</h3><blockquote><ul><li>从Nodejs创建http请求</li><li>支持Promise API</li><li>客户端支持防止CSRF</li><li>提供了一些并发请求的接口</li></ul></blockquote><h2 id="_4、为什么比起-fetch-更倾向于选择-axios" tabindex="-1"><a class="header-anchor" href="#_4、为什么比起-fetch-更倾向于选择-axios" aria-hidden="true">#</a> 4、为什么比起 fetch 更倾向于选择 Axios</h2>',9),_={href:"https://blog.logrocket.com/axios-or-fetch-api/",target:"_blank",rel:"noopener noreferrer"},x=n("p",null,"这里主要是对前辈的说的知识点进行一次梳理摘录",-1),g=t(`<h3 id="i-浏览器兼容方面" tabindex="-1"><a class="header-anchor" href="#i-浏览器兼容方面" aria-hidden="true">#</a> <code>Ⅰ</code> - 浏览器兼容方面</h3><blockquote><ul><li>Axios支持IE11及以上</li><li>Fetch默认不支持IE,加补丁后支持IE10及以上</li></ul></blockquote><h3 id="ii-请求超时" tabindex="-1"><a class="header-anchor" href="#ii-请求超时" aria-hidden="true">#</a> Ⅱ - 请求超时</h3><blockquote><ul><li>Axios配置 timeout 选项即可</li><li>Fetch可以做但是有些麻烦,传 <code>AbortController</code> 到 <code>signal</code> 选项，然后调 <code>.abort()</code> 实现 Promise 报错</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> controller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AbortController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>
<span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span>
<span class="token literal-property property">signal</span><span class="token operator">:</span> controller<span class="token punctuation">.</span>signal<span class="token punctuation">,</span>
<span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">&#39;hong&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">&#39;努力学习的汪&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>  
<span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> timeoutId <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> controller<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

promise
<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token comment">/*  处理响应 */</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;timeout exceeded&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面代码中</p><ul><li>我们使用<code>AbortController.AbortController()</code>构造函数创建一个<code>AbortController</code>对象，</li><li>该构造函数允许我们稍后中止请求。</li><li><code>signal</code>是<code>AbortController</code>的只读属性，提供了与请求通信或中止请求的方法。</li><li>如果服务器在四秒内没有响应，就会调用<code>controller.abort()</code>，并终止操作。</li></ul></blockquote><h3 id="iii-请求取消" tabindex="-1"><a class="header-anchor" href="#iii-请求取消" aria-hidden="true">#</a> Ⅲ - 请求取消</h3>`,5),q=n("p",null,"比如用户离开屏幕或者组件时会需要取消请求",-1),j={href:"https://github.com/tc39/proposal-cancelable-promises",target:"_blank",rel:"noopener noreferrer"},A=n("li",null,"fetch不支持请求取消",-1),y=t(`<h3 id="iv-json结果转换" tabindex="-1"><a class="header-anchor" href="#iv-json结果转换" aria-hidden="true">#</a> Ⅳ - JSON结果转换</h3><blockquote><ul><li>Axios自动转换</li><li>Fetch需要多一步 :<code>then(res=&gt;res.json())</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// axios</span>
axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;https://gitee.com/hongjilin&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// fetch()</span>
<span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://gitee.com/hongjilin&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// 额外多了一步</span>
<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="v-拦截器" tabindex="-1"><a class="header-anchor" href="#v-拦截器" aria-hidden="true">#</a> Ⅴ - 拦截器</h3><blockquote><ul><li>Axios支持request和respone的拦截: 请求拦截可以用于日志和权限等; 响应拦截可以用于格式化等</li><li>Fetch不支持,但可以通过复写Fetch函数勉强实现</li></ul></blockquote><h3 id="vi-csrf保护" tabindex="-1"><a class="header-anchor" href="#vi-csrf保护" aria-hidden="true">#</a> Ⅵ - CSRF保护</h3><blockquote><ul><li>Axios内置支持</li><li>Fetch不支持</li></ul></blockquote><h3 id="vii-上传下载的进度条" tabindex="-1"><a class="header-anchor" href="#vii-上传下载的进度条" aria-hidden="true">#</a> Ⅶ - 上传下载的进度条</h3><blockquote><p>都能实现</p><ul><li>Axios可以通过 <code>FileReader</code>来读 <code>res.data</code> 实现,更为简单</li><li>Fetch 通过 <code>ReadableStream</code> 也能做,但是麻烦些</li></ul></blockquote><h3 id="viii-生态" tabindex="-1"><a class="header-anchor" href="#viii-生态" aria-hidden="true">#</a> Ⅷ - 生态</h3><blockquote><ul><li>Axios拥有很多拓展:包括测试、日志、缓存等,生态更好</li><li>Fetch比较少</li></ul></blockquote><h3 id="ix-ssr" tabindex="-1"><a class="header-anchor" href="#ix-ssr" aria-hidden="true">#</a> Ⅸ - SSR</h3>`,11),S=n("li",null,"Axios支持Node直接使用",-1),F={href:"https://github.com/matthew-andrews/isomorphic-fetch",target:"_blank",rel:"noopener noreferrer"},N={href:"https://github.com/node-fetch/node-fetch",target:"_blank",rel:"noopener noreferrer"};function R(w,C){const a=i("ExternalLinkIcon");return c(),l("div",null,[r,n("blockquote",null,[u,d,n("ul",null,[h,n("li",null,[s("直到我看到一位前辈在 "),n("a",k,[s("Alita社区群"),e(a)]),s(" 中回答为何 "),b,s(" 要考虑将支持fetch改为支持axios,并给出了相应理由及文章; 我便觉得有必要学习一下并梳理出来")]),m]),n("p",null,[s("查阅参考的资料 : "),n("a",f,[s("Axios 或 fetch()：你应该使用哪个？"),e(a)])])]),v,n("blockquote",null,[n("p",null,[s("实际上具体内容可以看这篇文章 --> "),n("a",_,[s("Axios 或 fetch()：你应该使用哪个？"),e(a)])]),x]),g,n("blockquote",null,[q,n("ul",null,[n("li",null,[s("Axios 支持,但是是基于已经撤回的提案 --> "),n("a",j,[s("tc39/proposal-cancelable-promises"),e(a)]),s(" 实现的")]),A])]),y,n("blockquote",null,[n("ul",null,[S,n("li",null,[s("Fetch需要借助 "),n("a",F,[s("matthew-andrews/isomorphic-fetch"),e(a)]),s(" 或 "),n("a",N,[s("node-fetch/node-fetch"),e(a)]),s(" 这两个插件库使用")])])])])}const I=o(p,[["render",R],["__file","fetch、ajax、axios的区别.html.vue"]]);export{I as default};
