import{_ as s}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as n,c as a,a as t}from"./app.9b10ba0a.js";const e="/assets/yTbtYJzA5DiXmEG.83313295.gif",p="/assets/dL7MXROFjkH5iNn.07088571.gif",o="/assets/Z3Drj2poBkEwU4H.d1f359c5.gif",c="/assets/MawhQT9brj5S6u7.9ca34a48.gif",l="/assets/ZtIaicbxFRP8gzl.28c13fcb.gif",i="/assets/H8EP1QYU2daxoMe.c317deb3.png",u="/assets/M7d1JNiq2Bg9Fl4.5c8716de.png",d="/assets/s45XlRTYFqumGQy.8583d9a3.gif",r="/assets/b7nYHiERTPwAOSN.54fc3d7c.gif",k="/assets/zY5s3IE9omMUZSN.d8a9bc30.png",m={},v=t(`<h1 id="_03、域对象共享数据" tabindex="-1"><a class="header-anchor" href="#_03、域对象共享数据" aria-hidden="true">#</a> 03、域对象共享数据</h1><h2 id="_1、三种域对象" tabindex="-1"><a class="header-anchor" href="#_1、三种域对象" aria-hidden="true">#</a> 1、三种域对象</h2><ul><li><code>Request</code>：一次请求<code>Session</code>：一次会话。从浏览器开启到浏览器关闭（只跟浏览器是否关闭有关，与服务器是否关闭无关） <ul><li><strong>钝化</strong>：浏览器未关闭而服务器关闭，<code>Session</code>数据序列化到磁盘上</li><li><strong>活化</strong>：浏览器仍然关闭而服务器开启，将钝化内容读取到<code>Session</code>中</li></ul></li><li><code>Application</code>/<code>Servlet Context</code>：上下文对象，整个应用范围。服务器开启时创建，服务器关闭时销毁，从头到尾只创建一次（只跟服务器是否关闭有关，与浏览器是否关闭无关）</li></ul><p>选择域对象时，应该选择能实现功能、范围最小的域对象</p><h2 id="_2、向-request-域对象共享数据" tabindex="-1"><a class="header-anchor" href="#_2、向-request-域对象共享数据" aria-hidden="true">#</a> 2、向 request 域对象共享数据</h2><h3 id="_2-1、通过-servlet-api" tabindex="-1"><a class="header-anchor" href="#_2-1、通过-servlet-api" aria-hidden="true">#</a> 2.1、通过 Servlet API</h3><p>后台测试代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/testRequestByServletAPI&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testRequestByServletAPI</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;testRequestScope&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello, Servlet API!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&quot;successrequest&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前台测试代码</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>index.html
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@{/scopeController/testRequestByServletAPI}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>通过Servlet API<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
successrequest.html
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\${testRequestScope}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试结果</p><p><img src="`+e+`" alt="动画  (4)"></p><p>可以发现，转发的页面中成功获取到了在后台通过<code>Request</code>对象向<code>request</code>域中设置的属性值并正确展示</p><h3 id="_2-2、通过-modelandview" tabindex="-1"><a class="header-anchor" href="#_2-2、通过-modelandview" aria-hidden="true">#</a> 2.2、通过 ModelAndView</h3><blockquote><p><strong>食用方式</strong>：在 SpringMVC 中，不管用的何种方式，本质上最后都会封装到<code>ModelAndView</code>。同时要注意使用<code>ModelAndView</code>向 request 域对象共享数据时，需要返回<code>ModelAndView</code>自身</p></blockquote><p>后台测试代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/testRequestByModelAndView&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">testRequestByModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * ModelAndView有Model和View两个功能
     * Model用于向请求域共享数据
     * View用于设置视图，实现页面跳转
     */</span>
    <span class="token class-name">ModelAndView</span> mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//向请求域共享数据</span>
    mv<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">&quot;testRequestScope&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello, ModelAndView!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//设置视图，实现页面跳转</span>
    mv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">&quot;successrequest&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> mv<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前台测试代码</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@{/scopeController/testRequestByModelAndView}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>通过 ModelAndView<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>测试结果</p><p><img src="`+p+`" alt="动画  (5)"></p><h3 id="_2-3、通过-model" tabindex="-1"><a class="header-anchor" href="#_2-3、通过-model" aria-hidden="true">#</a> 2.3、通过 Model</h3><blockquote><p><strong>食用方式</strong>：形式与<code>HttpServletRequest</code>类似</p></blockquote><p>后台测试代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/testRequestByModel&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testRequestByModel</span><span class="token punctuation">(</span><span class="token class-name">Model</span> model<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//向请求域共享数据</span>
    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;testRequestScope&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello, ModelAndView!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&quot;successrequest&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前台测试代码</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@{/scopeController/testRequestByModel}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>通过 Model<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>测试结果</p><p><img src="`+o+`" alt="动画  (6)"></p><h3 id="_2-4、通过-map" tabindex="-1"><a class="header-anchor" href="#_2-4、通过-map" aria-hidden="true">#</a> 2.4、通过 Map</h3><blockquote><p><strong>食用方式</strong>：形式与<code>Model</code>方式类似</p></blockquote><p>后台测试代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/testRequestByMap&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testRequestByMap</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//向请求域共享数据</span>
    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;testRequestScope&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello, Map!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&quot;successrequest&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前台测试代码</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@{/scopeController/testRequestByMap}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>通过 Map<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>测试结果</p><p><img src="`+c+`" alt="动画  (7)"></p><h3 id="_2-5、通过-modelmap" tabindex="-1"><a class="header-anchor" href="#_2-5、通过-modelmap" aria-hidden="true">#</a> 2.5、通过 ModelMap</h3><blockquote><p><strong>食用方式</strong>：形式与<code>Model</code>方式类似</p></blockquote><p>后台测试代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/testRequestByModelMap&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testRequestByModelMap</span><span class="token punctuation">(</span><span class="token class-name">ModelMap</span> modelMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//向请求域共享数据</span>
    modelMap<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;testRequestScope&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello, ModelMap!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&quot;successrequest&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前台测试代码</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@{/scopeController/testRequestByModelMap}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>通过 ModelMap<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>测试结果</p><p><img src="`+l+`" alt="动画  (8)"></p><h3 id="_2-6、model、modelmap-和-map" tabindex="-1"><a class="header-anchor" href="#_2-6、model、modelmap-和-map" aria-hidden="true">#</a> 2.6、Model、ModelMap 和 Map</h3><p>分别在上述对应的控制器方法中，添加打印 Model、ModelMap 和 Map 三个对象及其对应类名的逻辑</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>model <span class="token operator">+</span> <span class="token string">&quot;======&quot;</span> <span class="token operator">+</span> model<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map <span class="token operator">+</span> <span class="token string">&quot;======&quot;</span> <span class="token operator">+</span> map<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>modelMap <span class="token operator">+</span> <span class="token string">&quot;======&quot;</span> <span class="token operator">+</span> modelMap<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过分别点击前台超链接，并查看后台日志信息</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">{</span>testRequestScope<span class="token operator">=</span>hello<span class="token punctuation">,</span> <span class="token class-name">Model</span><span class="token operator">!</span><span class="token punctuation">}</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span>BindingAwareModelMap</span>
<span class="token punctuation">{</span>testRequestScope<span class="token operator">=</span>hello<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token operator">!</span><span class="token punctuation">}</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span>BindingAwareModelMap</span>
<span class="token punctuation">{</span>testRequestScope<span class="token operator">=</span>hello<span class="token punctuation">,</span> <span class="token class-name">ModelMap</span><span class="token operator">!</span><span class="token punctuation">}</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span>BindingAwareModelMap</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以发现</p><ul><li>Model、ModelMap 和 Map 三个对象输入格式是一致的，都为键值对形式</li><li>通过反射方法获取到的类都是同一个，即<code>BindingAwareModelMap</code></li></ul><p>查看<code>BindingAwareModelMap</code>的继承关系</p><p><img src="`+i+`" alt="image-20220321211709324"></p><p>阅读源码，梳理出<code>Model</code>、<code>Map</code>、<code>ModelMap</code>三者的核心继承关系</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BindingAwareModelMap</span> <span class="token keyword">extends</span> <span class="token class-name">ExtendedModelMap</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExtendedModelMap</span> <span class="token keyword">extends</span> <span class="token class-name">ModelMap</span> <span class="token keyword">implements</span> <span class="token class-name">Model</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ModelMap</span> <span class="token keyword">extends</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Model</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以发现</p><ul><li><code>BindingAwareModelMap</code>继承<code>ModelMap</code>并实现<code>Model</code>接口</li><li><code>ModelMap</code>继承<code>LinkedHashMap</code>，而毫无疑问<code>LinkedHashMap</code>实现了<code>Map</code>接口</li></ul><p><code>Model</code>、<code>Map</code>和<code>ModelMap</code>三者的关系到此就一目了然了，其 UML 类图如下：</p><p><img src="`+u+`" alt="ModelMap"></p><blockquote><p><strong>结论</strong>：<code>Model</code>、<code>Map</code>、<code>ModelMap</code>类型的形参本质上都是<code>BindingAwareModelMap</code></p></blockquote><h2 id="_3、向-session-域共享数据" tabindex="-1"><a class="header-anchor" href="#_3、向-session-域共享数据" aria-hidden="true">#</a> 3、向 session 域共享数据</h2><blockquote><p><strong>食用方式</strong>：形式与<code>HttpServletRequest</code>方式类似，形参为<code>HttpSession</code>。需要注意的是 SpringMVC 虽然提供了一个<code>@SessionAttribute</code>注解，但并不好用，因此反而建议直接使用原生 Servlet 中的<code>HttpSession</code>对象</p></blockquote><p>后台测试代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/testSession&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testSession</span><span class="token punctuation">(</span><span class="token class-name">HttpSession</span> session<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//向session域共享数据</span>
    session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;testSessionScope&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello, HttpSession!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&quot;successsession&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前台测试代码</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>index.html
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@{/scopeController/testSession}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>通过 Servlet API 向 Session 域对象共享数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>
successsession.html
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\${session.testSessionScope}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试结果</p><p><img src="`+d+`" alt="动画  (9)"></p><h2 id="_4、向-application-域共享数据" tabindex="-1"><a class="header-anchor" href="#_4、向-application-域共享数据" aria-hidden="true">#</a> 4、向 application 域共享数据</h2><blockquote><p><strong>食用方式</strong>：形式与<code>HttpSession</code>方式类似，只不过需要先从<code>session</code>对象中获取<code>ServletContext</code>上下文对象，即<code>application</code>域对象，再做操作</p></blockquote><p>后台测试代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/testApplication&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testApplication</span><span class="token punctuation">(</span><span class="token class-name">HttpSession</span> session<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ServletContext</span> application <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    application<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;testApplicationScope&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello, application!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&quot;successapplication&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前台测试代码</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>index.html
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@{/scopeController/testApplication}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>通过 Servlet API 向 Application 域对象共享数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>
successapplication.html
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\${application.testApplicationScope}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试结果</p><p><img src="`+r+'" alt="动画  (10)"></p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>域对象有三种：<code>request</code>（请求域）、<code>session</code>（会话域）和<code>application</code>（上下文）</p><p>向<code>request</code>域对象共享数据方式：本质都是<code>ModelAndView</code></p><ul><li><code>Servlet API</code>（不推荐）：<code>HttpServletRequest</code></li><li><code>ModelAndView</code>：需要返回自身</li><li><code>Model</code>、<code>Map</code>、<code>ModelMap</code>：本质都是<code>BindingAwareModelMap</code></li></ul><p>向<code>session</code>域共享数据：<code>HttpSession</code></p><p>向<code>application</code>域共享数据：<code>ServletContext</code></p><p>附上导图，仅供参考</p><p><img src="'+k+'" alt="03-域对象共享数据"></p>',85),g=[v];function b(q,h){return n(),a("div",null,g)}const f=s(m,[["render",b],["__file","03、域对象共享数据.html.vue"]]);export{f as default};
