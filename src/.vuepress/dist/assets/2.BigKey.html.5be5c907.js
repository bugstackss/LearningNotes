import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c as r,d as e,e as s,b as a,a as t,r as l}from"./app.9b10ba0a.js";const n="/assets/image-20230501202159767.efa227a1.png",c="/assets/image-20230501202407609.48eec189.png",m="/assets/image-20230501202601998.077aa64e.png",g="/assets/image-20230501202654341.26fa6156.png",d="/assets/image-20230501202702582.9519d53b.png",h="/assets/image-20230501202725591.d2c8da7a.png",_="/assets/image-20230501202944399.c6ceaa7f.png",u="/assets/image-20230501202955955.1de8f996.png",b="/assets/image-20230501203329962.67ab66ac.png",k="/assets/image-20230501203351586.2068b9c0.png",f="/assets/image-20230501203359680.23d0defd.png",y="/assets/image-20230501203518741.9d7e117b.png",x="/assets/image-20230501203651471.431dbdc1.png",q="/assets/image-20230501204524158.e9ac85aa.png",B="/assets/image-20230501204617538.d31cff6d.png",R="/assets/image-20230501204742826.ee3cdca0.png",E="/assets/image-20230501205023493.70655cf1.png",A="/assets/image-20230501205051568.f20d329d.png",N="/assets/image-20230501205204030.8c455c97.png",v="/assets/image-20230501205216511.b48e4980.png",M="/assets/image-20230501205241719.baeb59fb.png",S="/assets/image-20230501205335665.49270be7.png",w="/assets/image-20230501205357243.e33a1efe.png",K="/assets/image-20230501205559760.d808b760.png",C="/assets/image-20230501205612346.2c9f28e2.png",T="/assets/image-20230501205637317.8f64fb85.png",W="/assets/image-20230501205809424.254dfe18.png",L="/assets/image-20230501205827044.47801303.png",Y={},z=t('<h2 id="_01、面试题" tabindex="-1"><a class="header-anchor" href="#_01、面试题" aria-hidden="true">#</a> 01、面试题</h2><ul><li><p>阿里广告平台，海量数据里查询某一固定前缀的key</p></li><li><p>小红书，你如何生产上限制<code>keys *</code>/<code>flushdb</code>/<code>flushall</code>等危险命令以防止误删无用？</p></li><li><p>美团，MEMORY USAGE命令你用过吗？</p></li><li><p>BigKey问题，多大算big？你如何发现？如何删除？如何处理？</p></li><li><p>BigKey你做过调优吗？惰性释放lazyfree了解过吗？</p></li><li><p>Morekey问题，生产上redis数据库有1000W记录，你如何遍历？<code>keys *</code>可以吗？</p></li><li><p>。。。。。。</p></li></ul><h2 id="_02、morekey案例" tabindex="-1"><a class="header-anchor" href="#_02、morekey案例" aria-hidden="true">#</a> 02、MoreKey案例</h2><h3 id="大批量往redis里面插入2000w测试数据key" tabindex="-1"><a class="header-anchor" href="#大批量往redis里面插入2000w测试数据key" aria-hidden="true">#</a> <strong>大批量往Redis里面插入2000W测试数据key</strong></h3><p><strong>Linux Bash下面执行，插入100W</strong></p><p><img src="'+n+'" alt="image-20230501202159767"></p>',6),G=e("blockquote",null,[e("p",null,"生成100W条redis批量设置kv的语句(key=kn,value=vn)写入到/tmp目录下的redisTest.txt文件中"),e("p",null,[s('for((i=1;i<=100*10000;i++)); do echo "set k'),e("span",{class:"katex"},[e("span",{class:"katex-mathml"},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("semantics",null,[e("mrow",null,[e("mi",null,"i"),e("mi",null,"v")]),e("annotation",{encoding:"application/x-tex"},"i v")])])]),e("span",{class:"katex-html","aria-hidden":"true"},[e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.6595em"}}),e("span",{class:"mord mathnormal"},"i"),e("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"v")])])]),s('i" >> /tmp/redisTest.txt ;done;')])],-1),I=t('<p>通过redis提供的管道 --pipe命令插入100W大批量数据</p><p>结合自己机器的地址：</p><p>cat /tmp/redisTest.txt | /opt/redis-7.0.0/src/redis-cli -h 127.0.0.1 -p 6379 -a 111111 --pipe</p><p>多出来的5条，是之前阳哥自己的其它测试数据 ，参考阳哥机器硬件，100w数据插入redis花费5.8秒左右</p><p><img src="'+c+'" alt="image-20230501202407609"></p><h3 id="某快递巨头真实生产案例新闻" tabindex="-1"><a class="header-anchor" href="#某快递巨头真实生产案例新闻" aria-hidden="true">#</a> <strong>某快递巨头真实生产案例新闻</strong></h3><blockquote><p>新闻</p></blockquote><p><img src="'+m+'" alt="image-20230501202601998"></p><blockquote><p>keys * 你试试100W花费多少秒遍历查询</p></blockquote><p><img src="'+g+'" alt="image-20230501202654341"></p><p><img src="'+d+'" alt="image-20230501202702582"></p><p><code>key * 这个指令有致命的弊端，在实际环境中最好不要使用</code></p><p><img src="'+h+'" alt="image-20230501202725591"></p><blockquote><p>生产上限制keys */flushdb/flushall等危险命令防止误删误用？</p></blockquote><p>通过配置设置禁用这些命令，redis.conf在<code>SECURITY</code>这一配置项中</p><p><img src="'+_+'" alt="image-20230501202944399"></p><p><img src="'+u+'" alt="image-20230501202955955"></p><p>【友情提醒】如果AOF或RDB中包含了需要禁用的命令，Redis会启动不起来，需要删除AOF以及RDB文件</p><h3 id="不用keys-避免卡顿-那该用什么" tabindex="-1"><a class="header-anchor" href="#不用keys-避免卡顿-那该用什么" aria-hidden="true">#</a> *<em>不用keys <em>避免卡顿，那该用什么</em></em></h3><blockquote><p>scan命令登场</p></blockquote>',20),O={href:"https://redis.io/commands/scan/",target:"_blank",rel:"noopener noreferrer"},V={href:"https://redis.com.cn/commands/scan.html",target:"_blank",rel:"noopener noreferrer"},F=t('<p>一句话，类似mysql limit但<code>不完全相同</code></p><blockquote><p>Scan命令用于迭代数据库中的数据库键</p></blockquote><ul><li>语法</li></ul><p><img src="'+b+'" alt="image-20230501203329962"></p><ul><li>特点</li></ul><p><img src="'+k+'" alt="image-20230501203351586"></p><p><img src="'+f+'" alt="image-20230501203359680"></p><p>SCAN 命令是一个基于游标的迭代器，每次被调用之后， 都会向用户返回一个新的游标， <strong>用户在下次迭代时需要使用这个新游标作为 SCAN 命令的游标参数</strong>， 以此来延续之前的迭代过程。</p><p>SCAN 返回一个包含<strong>两个元素的数组</strong>，</p><p>第一个元素是用于进行下一次迭代的新游标，</p><p>第二个元素则是一个数组， 这个数组中包含了所有被迭代的元素。<strong>如果新游标返回零表示迭代已结束。</strong></p><p>SCAN的遍历顺序</p><p><strong>非常特别，它不是从第一维数组的第零位一直遍历到末尾，而是采用了高位进位加法来遍历。之所以使用这样特殊的方式进行遍历，是考虑到字典的扩容和缩容时避免槽位的遍历重复和遗漏。</strong></p><ul><li>使用</li></ul><p><img src="'+y+'" alt="image-20230501203518741"></p><h2 id="_03、bigkey案例" tabindex="-1"><a class="header-anchor" href="#_03、bigkey案例" aria-hidden="true">#</a> 03、BigKey案例</h2><h3 id="多大算big" tabindex="-1"><a class="header-anchor" href="#多大算big" aria-hidden="true">#</a> 多大算Big</h3><p><strong>参考《阿里云Redis开发规范》</strong></p><p><img src="'+x+'" alt="image-20230501203651471"></p><p><strong>string和二级数据</strong></p><p><code>list、hash、set和zset，个数超过5000就是bigkey</code></p><p>疑问？？？</p><ul><li>list：一个列表最多可以包含2^32-1个元素（4294967295，每个列表超过40亿个元素）。</li><li>hash：Redis中每个hash可以存储2^32-1键值对（40多亿）</li><li>set：集合中最大的成员数为2^32-1（4294967295，每个集合中可存储40多亿哥成员）。</li><li>。。。。。。</li></ul><h3 id="哪些危害" tabindex="-1"><a class="header-anchor" href="#哪些危害" aria-hidden="true">#</a> 哪些危害</h3><ul><li>内存不均，集群迁移困难</li><li>超时删除，大key删除作梗</li><li>网络流量阻塞</li></ul><h3 id="如何产生" tabindex="-1"><a class="header-anchor" href="#如何产生" aria-hidden="true">#</a> 如何产生</h3><p><strong>社交类</strong></p><p>王心凌粉丝列表，典型案例粉丝逐步递增</p><p><strong>汇总统计</strong></p><p>某个报表，月日年经年累月的积累</p><h3 id="如何发现" tabindex="-1"><a class="header-anchor" href="#如何发现" aria-hidden="true">#</a> 如何发现</h3><blockquote><p>redis-cli --bigkeys</p></blockquote><p><strong>好处，见最下面总结</strong></p><p>给出每种数据结构Top 1 bigkey，同时给出每种数据类型的键值个数+平均大小</p><p><strong>不足</strong></p><p>想查询大于10kb的所有key，--bigkeys参数就无能为力了，<code>需要用到memory usage来计算每个键值的字节数</code></p><p>redis-cli --bigkeys -a 111111</p><table><thead><tr><th>redis-cli -h 127.0.0.1 -p 6379 -a 111111 --bigkeys</th></tr></thead><tbody><tr><td>每隔 100 条 scan 指令就会休眠 0.1s，ops 就不会剧烈抬升，但是扫描的时间会变长redis-cli -h 127.0.0.1 -p 7001 –-bigkeys -i 0.1</td></tr></tbody></table><p><img src="'+q+'" alt="image-20230501204524158"></p><blockquote><p>MEMORY USAGE 键</p></blockquote><p>计算每个键值的字节数</p><p><img src="'+B+'" alt="image-20230501204617538"></p>',42),U={href:"https://redis.com.cn/commands/memory-usage.html",target:"_blank",rel:"noopener noreferrer"},D=e("h3",{id:"如何删除",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#如何删除","aria-hidden":"true"},"#"),s(" 如何删除")],-1),Z=e("blockquote",null,[e("p",null,"参考《阿里云Redis开发手册》")],-1),j=e("p",null,[e("img",{src:R,alt:"image-20230501204742826"})],-1),H={href:"https://redis.io/commands/scan",target:"_blank",rel:"noopener noreferrer"},J=t('<blockquote><p>普通命令</p></blockquote><ul><li><p>String：一般用del，如果过于庞大<code>unlink</code></p></li><li><p>hash：使用hscan每次获取少量field-value，在使用hdel删除每个field</p><ul><li><p>命令</p><p><img src="'+E+'" alt="image-20230501205023493"></p></li><li><p>阿里手册</p><p><img src="'+A+'" alt="image-20230501205051568"></p></li></ul></li><li><p>list：使用ltrim渐进式逐步删除，知道全部删除完成</p><ul><li><p>命令</p><p><img src="'+N+'" alt="image-20230501205204030"></p><p><img src="'+v+'" alt="image-20230501205216511"></p></li><li><p>阿里手册</p><p><img src="'+M+'" alt="image-20230501205241719"></p></li></ul></li><li><p>set：使用sscan每次获取部分元素，在使用srem命令删除每个元素</p><ul><li><p>命令</p><p><img src="'+S+'" alt="image-20230501205335665"></p></li><li><p>阿里手册</p><p><img src="'+w+'" alt="image-20230501205357243"></p></li></ul></li><li><p>zset：使用zscan每次获取部分元素，再使用ZREMRANGEBYRANK命令删除每个元素</p><ul><li><p>命令</p><p><img src="'+K+'" alt="image-20230501205559760"></p><p><img src="'+C+'" alt="image-20230501205612346"></p></li><li><p>阿里手册</p><p><img src="'+T+'" alt="image-20230501205637317"></p></li></ul></li></ul><h2 id="_04、bigkey生产调优" tabindex="-1"><a class="header-anchor" href="#_04、bigkey生产调优" aria-hidden="true">#</a> 04、BigKey生产调优</h2><p><strong>redis.conf配置文件LAZY FREEING相关说明</strong></p><p>阻塞和非阻塞删除命令</p><p><img src="'+W+'" alt="image-20230501205809424"></p><p>优化配置</p><p><img src="'+L+'" alt="image-20230501205827044"></p>',8);function P(Q,X){const i=l("ExternalLinkIcon");return o(),r("div",null,[z,G,I,e("p",null,[e("a",O,[s("https://redis.io/commands/scan/"),a(i)])]),e("p",null,[e("a",V,[s("https://redis.com.cn/commands/scan.html"),a(i)])]),F,e("p",null,[e("a",U,[s("官网"),a(i)])]),D,Z,j,e("blockquote",null,[e("p",null,[e("a",H,[s("官网"),a(i)])])]),J])}const se=p(Y,[["render",P],["__file","2.BigKey.html.vue"]]);export{se as default};
