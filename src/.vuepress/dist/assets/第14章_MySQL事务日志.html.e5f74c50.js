import{_ as s}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as d,c as a,d as e,e as l,b as c,a as o,r as i}from"./app.9b10ba0a.js";const r="/assets/7697c971993d77d798cc725368929b85.73e9bf45.png",p="/assets/65a7dc71a46d202a4f5695eb434b5711.0a340953.png",t="/assets/7fc6d319b663c805cf144ea2f0f36487.5896797c.png",u="/assets/259664054b91bfb18c31faf98e82418c.b138ef44.png",g="/assets/8a53fdf58c34e6a88b8558b95c43c3a7.4f04ed0e.png",m="/assets/c466264e8417b28aee9ec7b5fb43963d.581f0f6b.png",b="/assets/304c57bc09e82809c709be8ef137551b.f6f9799b.png",_="/assets/231b579e11820150a07f87516adfb8d3.7512650d.png",k="/assets/d792f4e462a11c1175bfe407c3f6f162.e95b8b40.png",v="/assets/7d1f80324c7407d115b42fdd11c05700.0ee4409b.png",h="/assets/aedbe392565e56bc98f16b60f06cfcc9.e4d57cb1.png",f="/assets/da683df6f96cc2ec7207c98a2910d22f.ec33fdd8.png",E="/assets/1ca66ed59b1129acb7342fe994167152.4a46c480.png",y="/assets/1538af5090e85e2c33d305515ca68256.d46c9e7b.png",B="/assets/1097bfbccfa49ee22b86c706aa198714.9bf6db09.png",q="/assets/fb36c753d6886ed65ed485c0a915d618.08c456e7.png",L="/assets/e45a5a4937de5702482babf6aaea9218.a6fc8b04.png",D="/assets/7436f5bb15105c1ff4e54660bf615ef7.54d0c4ab.png",w="/assets/02caf4de1a5adc67ac045e14ec882765.0cf135d8.png",I="/assets/5acc5d4077ee4034b7c54f796d75640d.6ef85729.png",x="/assets/e7d6896fe5e893899f17b547a3c1cd88.5f8fdb55.png",A="/assets/6d1f9b3b7188b7c9ddad4ef5ff2d57d9.754addd9.png",T="/assets/909d18ff408cf2b456e085280b543bc9.3d5b4b87.png",C="/assets/a5dfe7273cf58afab79ea5c5aadba114.06477f94.png",O="/assets/cad19a7636363f0ef21974692428250c.8346d600.png",R="/assets/20073c7a5c23faddfb27dffd973f1351.2d2661b5.png",S="/assets/5acc5d4077ee4034b7c54f796d75640d.6ef85729.png",N={},M=o('<h1 id="第14章-mysql事务日志" tabindex="-1"><a class="header-anchor" href="#第14章-mysql事务日志" aria-hidden="true">#</a> 第14章_MySQL事务日志</h1><p>事务有4种特性：原子性、一致性、隔离性和持久性。那么事务的四种特性到底是基于什么机制实现呢？</p><ul><li>事务的隔离性由 <code>锁机制</code> 实现。</li><li>而事务的原子性、一致性和持久性由事务的 redo 日志和undo 日志来保证。 <ul><li>REDO LOG 称为 <code>重做日志</code> ，提供再写入操作，恢复提交事务修改的页操作，用来保证事务的持久性。</li><li>UNDO LOG 称为 <code>回滚日志</code> ，回滚行记录到某个特定版本，用来保证事务的原子性、一致性。</li></ul></li></ul><p>有的DBA或许会认为 UNDO 是 REDO 的逆过程，其实不然。其实不然。REDO和UNDO都可以视为是一种<code>恢复操作</code></p><ul><li><p>redo log:是存储引擎层(innodb)生成的日志，记录的是&quot;<code>物理级别</code>&quot;上的页修改操作，比如页号xx、偏移量ywy写入了&#39;zzz&#39;数据。主要为了保证数据的可靠性;</p><blockquote><p>提交，由redo log来保证事务的持久化。</p></blockquote></li><li><p>undo log:是存储引擎层(innodb)生成的日志，记录的是<code>逻辑操作</code>日志，比如对某一行数据进行了INSERT语句操作，那么undo log就记录一条与之相反的DELETE操作。主要用于<code>事务的回滚</code>(undo log 记录的是每个修改操作的<code>逆操作</code>)和<code>一致性非锁定读</code>(undo log回滚行记录到某种特定的版本---MVCC，即多版本并发控制)。</p></li></ul><h2 id="_1-redo日志" tabindex="-1"><a class="header-anchor" href="#_1-redo日志" aria-hidden="true">#</a> 1. redo日志</h2><p>InnoDB存储引擎是以<code>页为单位</code>来管理存储空间的。在真正访问页面之前需要把在<code>磁盘上</code>的页缓存到内存中的<code>Buffer Pool</code>之后才可以访问。所有的变更都必须<code>先更新缓冲池中</code>的数据，然后缓冲池中的<code>脏页</code>会以一定的频率被刷入磁盘（ <code>checkPoint</code>机制），通过缓冲池来优化CPU和磁盘之间的鸿沟，这样就可以保证整体的性能不会下降太快。</p><h3 id="_1-1-为什么需要redo日志" tabindex="-1"><a class="header-anchor" href="#_1-1-为什么需要redo日志" aria-hidden="true">#</a> 1.1 为什么需要REDO日志</h3><p>一方面，缓冲池可以帮助我们消除CPU和磁盘之间的鸿沟，checkpoint机制可以保证数据的最终落盘，然而由于checkpoint <code>并不是每次变更的时候就触发</code> 的，而是master线程隔一段时间去处理的。所以最坏的情况就是事务提交后，刚写完缓冲池，数据库宕机了，那么这段数据就是丢失的，无法恢复。</p><p>另一方面，事务包含 <code>持久性</code> 的特性，就是说对于一个已经提交的事务，在事务提交后即使系统发生了崩溃，这个事务对数据库中所做的更改也不能丢失。</p><p>那么如何保证这个持久性呢？ <code>一个简单的做法</code> ：在事务提交完成之前把该事务所修改的所有页面都刷新到磁盘，但是这个简单粗暴的做法有些问题:</p><ul><li><p><strong>修改量与刷新磁盘工作量严重不成比例</strong></p><p>有时候我们仅仅修改了某个页面中的一个字节，但是我们知道在InnoDB中是以页为单位来进行磁盘lo的，也就是说我们在该事务提交时不得不将一个完整的页面从内存中刷新到磁盘，我们又知道一个页面默认是16KB大小，只修改一个字节就要刷新16KB的数据到磁盘上显然是太小题大做了。</p></li><li><p>随机lo刷新较慢</p><p>一个事务可能包含很多语句，即使是一条语句也可能修改许多页面，假如该事务修改的这些页面可能并不相邻，这就意味着在将某个事务修改的Buffer Pool中的页面<code>刷新到磁盘</code>时需要进行很多的<code>随机IO</code>，随机Io比顺序IO要慢，尤其对于传统的机械硬盘来说。</p></li></ul><p><code>另一个解决的思路</code> ：我们只是想让已经提交了的事务对数据库中数据所做的修改永久生效，即使后来系统崩溃，在重启后也能把这种修改恢复出来。所以我们其实没有必要在每次事务提交时就把该事务在内存中修改过的全部页面刷新到磁盘，只需要把 <code>修改</code> 了哪些东西 <code>记录一下</code> 就好。比如，某个事务将系统表空间中 <code>第10号</code> 页面中偏移量为 <code>100</code> 处的那个字节的值 <code>1</code> 改成 <code>2</code> 。我们只需要记录一下：将第0号表空间的10号页面的偏移量为100处的值更新为 2 。</p><p>InnoDB引擎的事务采用了WAL技术(<code>Write-Ahead Logging</code> )，这种技术的思想就是先写日志，再写磁盘，只有日志写入成功，才算事务提交成功，这里的日志就是redo log。当发生宕机且数据未刷到磁盘的时候，可以通过redo log来恢复，保证ACID中的D，这就是redo log的作用。</p><p><img src="'+r+'" alt="image-20230118213029209"></p><h3 id="_1-2-redo日志的好处、特点" tabindex="-1"><a class="header-anchor" href="#_1-2-redo日志的好处、特点" aria-hidden="true">#</a> 1.2 REDO日志的好处、特点</h3><p><strong>1. 好处</strong></p>',17),U=e("li",null,[e("strong",null,"redo日志降低了刷盘频率")],-1),V={href:"https://www.bilibili.com/video/BV1iq4y1u7vj?p=169&t=1220.2%E5%AD%98%E5%82%A8%E8%A1%A8%E7%A9%BA%E9%97%B4ID%E3%80%81%E9%A1%B5%E5%8F%B7%E3%80%81%E5%81%8F%E7%A7%BB%E9%87%8F%E4%BB%A5%E5%8F%8A%E9%9C%80%E8%A6%81%E6%9B%B4%E6%96%B0%E7%9A%84%E5%80%BC%EF%BC%8C%E6%89%80%E9%9C%80%E7%9A%84%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B4%E6%98%AF%E5%BE%88%E5%B0%8F%E7%9A%84%EF%BC%8C%E5%88%B7%E7%9B%98%E5%BF%AB%E3%80%82",target:"_blank",rel:"noopener noreferrer"},G=o('<p><strong>2. 特点</strong></p><ul><li><p><strong>redo日志是顺序写入磁盘的</strong></p><p>在执行事务的过程中，每执行一条语句，就可能产生若干条redo日志，这些日志是按照产生的<code>顺序写入磁盘</code>的，也就是使用顺序Io，效率比随机Io快。</p></li><li><p><strong>事务执行过程中，redo log不断记录</strong></p><p>redo log跟bin log的区别，redo log是<code>存储引擎层</code>产生的，而bin log是<code>数据阵层</code>广生的。假设一个事务，对表做10万行的记录插入，在这个过程中，一直不断的往redo log顺序记录，而bin log不会记录，直到这个事务提交，才会一次写入到bin log文件中。</p></li></ul><h3 id="_1-3-redo的组成" tabindex="-1"><a class="header-anchor" href="#_1-3-redo的组成" aria-hidden="true">#</a> 1.3 redo的组成</h3><p>Redo log可以简单分为以下两个部分：</p><ul><li><p><code>重做日志的缓冲 (redo log buffer)</code> ，保存在内存中，是易失的。</p><p>在服务器启动时就向操作系统申请了一大片称之为redo log buffer的<code>连续内存</code>空间，翻译成中文就是redo日志缓冲区。这片内存空间被划分成若干个连续的<code>redo log block</code>。一个redo log block占用<code>512字节</code>大小。</p><p><img src="'+p+`" alt="image-20230119125711415"></p><p><strong>参数设置：innodb_log_buffer_size：</strong></p><p>redo log buffer 大小，默认 <code>16M</code> ，最大值是4096M，最小值为1M。</p></li></ul><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>mysql&gt; show variables like &#39;%innodb_log_buffer_size%&#39;;
+------------------------+----------+
| Variable_name | Value |
+------------------------+----------+
| innodb_log_buffer_size | 16777216 |
+------------------------+----------+
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>重做日志文件(redologfile)</code>，保存在硬盘中，是持久的。</p><p>REDO日志文件如图所示，其中的<code>ib_logfile0</code>和<code>ib_logfile1</code>即为redo log日志。</p><p><img src="`+t+'" alt="image-20230119130410801"></p></li></ul><h3 id="_1-4-redo整体流程" tabindex="-1"><a class="header-anchor" href="#_1-4-redo整体流程" aria-hidden="true">#</a> 1.4.redo整体流程</h3><p>以一个更新事务为例，redo log 流转过程，如下图所示：</p><p><img src="'+u+'" alt="image-20230119143720695"></p><blockquote><p>第1步：先将原始数据从磁盘中读入内存中来，修改数据的内存拷贝</p><p>第2步：生成一条重做日志并写入redo log buffer，记录的是数据被修改后的值</p><p>第3步：当事务commit时，将redo log buffer中的内容刷新到 redo log file，对 redo log file采用追加写的方式</p><p>第4步：定期将内存中修改的数据刷新到磁盘中</p></blockquote><blockquote><p>体会：</p><p><code>Write-Ahead Log</code>(预先日志持久化)：在持久化一个数据页之前，先将内存中相应的日志页持久化。</p></blockquote><h3 id="_1-5-redo-log的刷盘策略" tabindex="-1"><a class="header-anchor" href="#_1-5-redo-log的刷盘策略" aria-hidden="true">#</a> 1.5 redo log的刷盘策略</h3><p>redo log的写入并不是直接写入磁盘的，InnoDB引擎会在写redo log的时候先写redo log buffer，之后以 <code>一定的频率 刷</code>入到真正的redo log file 中。这里的一定频率怎么看待呢？这就是我们要说的刷盘策略。</p><p><img src="'+g+`" alt="image-20230119144112435"></p><p>注意，redo log buffer刷盘到redo log file的过程并不是真正的刷到磁盘中去，只是刷入到 <code>文件系统缓存</code>（page cache）中去（这是现代操作系统为了提高文件写入效率做的一个优化），真正的写入会交给系统自己来决定（比如page cache足够大了）。那么对于InnoDB来说就存在一个问题，如果交给系统来同步，同样如果系统宕机，那么数据也丢失了（虽然整个系统宕机的概率还是比较小的）。</p><p>针对这种情况，InnoDB给出 <code>innodb_flush_log_at_trx_commit</code> 参数，该参数控制 commit提交事务时，如何将 redo log buffer 中的日志刷新到 redo log file 中。它支持三种策略：</p><ul><li><p><code>设置为0</code> ：表示每次事务提交时不进行刷盘操作。（系统默认master thread每隔1s进行一次重做日志的同步）</p></li><li><p><code>设置为1</code> ：表示每次事务提交时都将进行同步，刷盘操作（ <code>默认值</code> ）</p></li><li><p><code>设置为2</code> ：表示每次事务提交时都只把 redo log buffer 内容写入 <code>page cache</code>，不进行同步。由os自己决定什么时候同步到磁盘文件。</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>show variables like &#39;innodb_flush_log_at_trx_commit&#39;;

mysql&gt; show variables like &#39;innodb_flush_log_at_trx_commit&#39;;
+--------------------------------+-------+
| Variable_name                  | Value |
+--------------------------------+-------+
| innodb_flush_log_at_trx_commit | 1     |
+--------------------------------+-------+
1 row in set (0.00 sec)

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>另外，InnoDB存储引擎有一个后台线程，每隔1秒，就会把<code>redo log buffer中</code>的内容写到文件系统缓存( <code>page cache</code> )，然后调用刷盘操作。</p><p><img src="`+m+'" alt="image-20230119145340527"></p><p>也就是说，一个没有提交事务的<code>redo log</code>记录，也可能会刷盘。因为在事务执行过程redo log记录是会写入<code>redo log buffer</code> 中，这些redo log记录会被<code>后台线程</code>刷盘。</p><p><img src="'+b+'" alt="image-20230119145412718"></p><p>除了后台线程每秒<code>1次</code>的轮询操作，还有一种情况，当<code>redo log buffer</code>占用的空间即将达到<code>innodb_log_buffer_size</code>(这个参数默认是16M)的一半的时候，后台线程会主动刷盘。</p><h3 id="_1-6-不同刷盘策略演示" tabindex="-1"><a class="header-anchor" href="#_1-6-不同刷盘策略演示" aria-hidden="true">#</a> 1.6 不同刷盘策略演示</h3><h4 id="_1-刷盘策略分析" tabindex="-1"><a class="header-anchor" href="#_1-刷盘策略分析" aria-hidden="true">#</a> 1. 刷盘策略分析</h4><p>1、innodb_flush_log_at_trx_commit=1</p><p><img src="'+_+'" alt="image-20230119151403112"></p><blockquote><p><strong>总结</strong></p><p>innodb_flush_log_at_trx_commit=1时，<mark>只要事务提交成功，（都会主动同步刷盘，这个速度是很快的），最终redo log记录就一定在硬盘里</mark>，不会有任何数据丢失。</p><p>如果事务执行期间MySQL挂了或宕机，这部分日志丢了，但是事务并没有提交，所以日志丢了也不会有损失。<mark>可以保证ACID的D，数据绝对不会丢失，但是这种效率是最差的</mark>。</p><p>建议使用默认值，虽然操作系统宕机的概率理论小于数据库宕机的概率，但是一般既然使用了事务，那么数据的安全相对来说更重要些</p></blockquote><p>2、innodb_flush_log_at_trx_commit=2</p><p><img src="'+k+'" alt="img"></p><blockquote><p><strong>总结</strong></p><p>innodb_flush_log_at_trx_commit=2时，<mark>只要事务提交成功，redo log buffer中的内容就会写入文件系统缓存（page cache）</mark></p><p>如果仅仅只是<code>MySQL挂了不会有任何数据丢失</code>，但是<code>操作系统宕机</code>可能会有1秒数据的丢失，这种情况下无法满足ACID中的D。</p><p>但是数值2是一种折中的做法，它的IO效率理论是高于1的，低于0的</p><p>当进行调优时，为了降低CPU的使用率，可以从1降成2。因为OS出现故障的概率很小~</p></blockquote><p>3、innodb_flush_log_at_trx_commit=0</p><p><img src="'+v+`" alt="img"></p><blockquote><p>总结</p><p>innodb_flush_log_at_trx_commit=0时,master thread中每1秒进行一次重做日志的fsync操作，因此实例crash<mark>最多丢失1秒钟内的事务</mark>。( master thread是负责将缓冲池中的数据异步刷新到磁盘，保证数据的一致性)</p><p>数值0话，是一种效率最高的做法，这种策略也有丢失数据的风险，也无法保证D。</p></blockquote><p><strong>一句话就是：<code>0：延迟写，延迟刷</code>，<code>1：实时写，实时刷</code>，<code>2：实时写，延迟刷</code></strong></p><h4 id="_2-举例" tabindex="-1"><a class="header-anchor" href="#_2-举例" aria-hidden="true">#</a> 2. 举例</h4><p>比较innodb_flush_log_at_trx_commit对事务的影响。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">#################################数据准备####################################</span>
<span class="token keyword">USE</span> atguigudb3<span class="token punctuation">;</span>

<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test_load<span class="token punctuation">(</span>
a <span class="token keyword">INT</span><span class="token punctuation">,</span>
b <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span><span class="token punctuation">;</span>

<span class="token comment">#创建存储过程，用于向test_load中添加数据</span>
<span class="token keyword">DELIMITER</span><span class="token comment">//</span>
<span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> p_load<span class="token punctuation">(</span>COUNT <span class="token keyword">INT</span> <span class="token keyword">UNSIGNED</span><span class="token punctuation">)</span>
<span class="token keyword">BEGIN</span>
<span class="token keyword">DECLARE</span> s <span class="token keyword">INT</span> <span class="token keyword">UNSIGNED</span> <span class="token keyword">DEFAULT</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">DECLARE</span> c <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token keyword">DEFAULT</span> <span class="token keyword">REPEAT</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">WHILE</span> s<span class="token operator">&lt;=</span>COUNT <span class="token keyword">DO</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test_load <span class="token keyword">SELECT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>c<span class="token punctuation">;</span>
<span class="token keyword">COMMIT</span><span class="token punctuation">;</span>
<span class="token keyword">SET</span> s<span class="token operator">=</span>s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">END</span> <span class="token keyword">WHILE</span><span class="token punctuation">;</span>
<span class="token keyword">END</span> <span class="token comment">//</span>
<span class="token keyword">DELIMITER</span><span class="token punctuation">;</span>

<span class="token comment">###########################测试1：###########################################</span>
<span class="token comment">#设置并查看：innodb_flush_log_at_trx_commit</span>

<span class="token keyword">SHOW</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">&#39;innodb_flush_log_at_trx_commit&#39;</span><span class="token punctuation">;</span>

<span class="token comment">#set GLOBAL innodb_flush_log_at_trx_commit = 1;</span>

<span class="token comment">#调用存储过程</span>
<span class="token keyword">CALL</span> p_load<span class="token punctuation">(</span><span class="token number">30000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">#1min 28sec</span>

<span class="token comment">############################测试2：#########################################</span>
<span class="token keyword">TRUNCATE</span> <span class="token keyword">TABLE</span> test_load<span class="token punctuation">;</span>

<span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> test_load<span class="token punctuation">;</span>

<span class="token keyword">SET</span> <span class="token keyword">GLOBAL</span> innodb_flush_log_at_trx_commit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">SHOW</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">&#39;innodb_flush_log_at_trx_commit&#39;</span><span class="token punctuation">;</span>

<span class="token comment">#调用存储过程</span>
<span class="token keyword">CALL</span> p_load<span class="token punctuation">(</span><span class="token number">30000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">#37.945 sec</span>

<span class="token comment">##########################测试3：###########################################</span>
<span class="token keyword">TRUNCATE</span> <span class="token keyword">TABLE</span> test_load<span class="token punctuation">;</span>

<span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> test_load<span class="token punctuation">;</span>

<span class="token keyword">SET</span> <span class="token keyword">GLOBAL</span> innodb_flush_log_at_trx_commit <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>

<span class="token keyword">SHOW</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">&#39;innodb_flush_log_at_trx_commit&#39;</span><span class="token punctuation">;</span>

<span class="token comment">#调用存储过程</span>
<span class="token keyword">CALL</span> p_load<span class="token punctuation">(</span><span class="token number">30000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">#45.173 sec</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>innodb_flush_logat_trx_commit</th><th>执行所用的时间</th></tr></thead><tbody><tr><td>0</td><td>37.945 sec</td></tr><tr><td>1</td><td>1min 28sec</td></tr><tr><td>2</td><td>45.173 sec</td></tr></tbody></table><p>而针对上述存储过程，为了提高事务的提交性能，应该在将3万行记录插入表后进行一次的COMMIT操作，而不是每插入一条记录后进行一次COMMIT操作。这样做的好处是可以使事务方法在rollback时回滚到事务最开始的确定状态。</p><blockquote><p>虽然用户可以通过设置参数innodb_flush_log_at_trx_commit为0或2来提高事务提交的性能，但需清楚，这种设置方法丧失了事务的ACID特性。</p></blockquote><p>可以看到：</p><ul><li><p>1最慢 但最安全</p></li><li><p>0 最快最不安全</p></li><li><p>2 折中。</p></li></ul><h3 id="_1-7-写入redo-log-buffer-过程" tabindex="-1"><a class="header-anchor" href="#_1-7-写入redo-log-buffer-过程" aria-hidden="true">#</a> 1.7 写入redo log buffer 过程</h3><p><strong>1.补充概念：Mini-Transaction</strong></p><p>MySQL把对底层页面中的一次原子访问的过程称之为一个<code>Mini-Transaction</code>，简称<code>mtr</code>，比如，向某个索引对应的B+树中插入一条记录的过程就是一个<code>Mini-Transaction</code>。一个所谓的<code>mtr</code>可以包含一组redo日志，在进行崩溃恢复时这一组<code>redo</code>日志作为一个不可分割的整体。</p><p>一个事务可以包含若干条语句，每一条语句其实是由若干个 <code>mtr</code> 组成，每一个 <code>mtr</code> 又可以包含若干条redo日志，画个图表示它们的关系就是这样：</p><p><img src="`+h+'" alt="img"></p><blockquote><p>分析：一个事务有多条SQL语句组成~ 一个SQL语句包含多个mtr：因为一个SQL可能改变多条记录；一个mtr对应多条redo日志，因为redo存放的是物理级别的修改，当插入语句且页分裂时，会大量出现比如A页xxx、偏移量yy写入了’zzz’数据，B页面aaa、偏移量bb写入了‘ccc’数据…</p></blockquote><p><strong>2.redo 日志写入log buffer</strong></p><p>向<code>log buffer</code>中写入redo日志的过程是顺序的，也就是先往前边的block中写，当该block的空闲空间用完之后再往下一个block中写。当我们想往<code>log buffer</code>中写入redo日志时，第一个遇到的问题就是应该写在哪个<code>block</code>的哪个偏移量处，所以<code>InnoDB</code>的设计者特意提供了一个称之为<code>buf_free</code>的全局变量，该变量指明后续写入的redo日志应该写入到<code>log buffer</code>中的哪个位置，如图所示:</p><p><img src="'+f+'" alt="img"></p><p>一个mtr执行过程中可能产生若干条redo日志，<code>这些redo日志是一个不可分割的组</code>，所以其实并不是每生成一条redo日志，就将其插入到log buffer中，而是每个mtr运行过程中产生的日志先暂时存到一个地方，当该mtr结束的时候，将过程中产生的一组redo日志再全部复制到log buffer中。我们现在假设有两个名为<code>T1</code>、<code>T2</code>的事务，每个事务都包含2个mtr，我们给这几个mtr命名一下:</p><ul><li>事务<code>T1</code>的两个<code>mtr</code>分别称为<code>mtr_T1_1</code>和<code>mtr_T1_2</code>。</li><li>事务<code>T2</code>的两个<code>mtr</code>分别称为<code>mtr_T2_1</code>和<code>mtr_T2_2</code>。</li></ul><p>每个mtr都会产生一组redo日志，用示意图来描述一下这些mtr产生的日志情况：</p><p><img src="'+E+'" alt="img"></p><p>不同的事务可能是 <code>并发</code> 执行的，所以 <code>T1</code> 、 <code>T2</code> 之间的 <code>mtr</code> 可能是 <code>交替执行</code> 的。每当一个mtr执行完成时，伴随该mtr生成的一组redo日志就需要被复制到log buffer中，也就是说不同事务的mtr可能是交替写入log buffer的，我们画个示意图(为了美观，我们把一个mtr中产生的所有的redo日志当作一个整体来画):</p><p><img src="'+y+'" alt="img"></p><blockquote><p>有的mtr产生的redo日志量非常大，比如<code>mtr_t1_2</code>产生的redo日志占用空间比较大，占用了3个block来存储。</p></blockquote><p><strong>3. redo log block的结构图</strong></p><p>一个redo log block是由<code>日志头</code>、<code>日志体</code>、<code>日志尾</code>组成。日志头占用12字节，日志尾占用8字节，所以一个block真正能存储的数据就是512-12-8=492字节。</p><blockquote><p><strong>为什么一个block设计成512字节?</strong></p><p>这个和磁盘的扇区有关，机械磁盘默认的扇区就是512字节，如果你要写入的数据大于512字节，那么要写入的扇区肯定不止一个，这时就要涉及到盘片的转动，找到下一个扇区，假设现在需要写入两个扇区A和B，如果扇区A写入成功，而扇区B写入失败，那么就会出现<code>非原子性</code>的写入，而如果每次只写入和扇区的大小一样的512字节，那么每次的写入都是原子性的。</p></blockquote><p><img src="'+B+'" alt="img"></p><p>真正的redo日志都是存储到占用<code>496</code>字节大小的<code>log block body</code>中，图中的<code>log block header</code>和<code>logblock trailer</code>存储的是一些管理信息。我们来看看这些所谓的<code>管理信息</code>都有什么。</p><p><img src="'+q+`" alt="img"></p><ul><li><code>log block header</code>的属性分别如下: <ul><li><code>LOG_BLOCK_HDR_NO </code>: log buffer是由log block组成，在内部log buff er就好似一个数组，因此LOG_BLOCK_HDR_NO用来标记这个数组中的位置。其是递增并且循环使用的，占用4个字节，但是由于第—位用来判新是否是flush bit，所以最大的值为2G。</li><li><code>LOG_BLOCK_HDR_DATA_LEN</code>∶表示block中已经使用了多少字节，初始值为<code>12</code>(因为<code>log block body</code>从第12个字节处开始)。随着往block中写入的redo日志越来也多，本属性值也跟着增长。如果<code>log block body</code>已经被全部写满,那么本属性的值被设置为<code>512</code></li><li><code>LOG_BLOCK_FIRST_REC_GROUP </code>:一条redo日志也可以称之为一条redo日志记录（redo log record)，一个mtr会生产多条redo日志记录，这些redo日志记录被称之为一个redo日志记录组(redo log record group)。LOG_BLOCK_FIRST_REC_GROUP就代表该block中第一个mtr生成的redo日志记录组的偏移量(其实也就是这个block里第一个mtr生成的第一条redo日志的偏移量)。如果该值的大小</li><li><code>LOG_BLOCK_HDR_DATA_LEN</code>相同，则表示当前log block不包含新的日志。</li><li><code>LOG_BLOCK_CHECKPOINT_NO</code>:占用4字节，表示该log block最后被写入时的<code>checkpoint</code>。</li></ul></li><li><code>log block trailer</code>中属性的意思如下: <ul><li><code>LOG_BLOCK_CHECKSUN</code>:表示block的校验值，用于正确性校验（其值和LOG_BLOCK_HDR_NO相同)，暂时不关心它。</li></ul></li></ul><h3 id="_1-8-redo-log-file" tabindex="-1"><a class="header-anchor" href="#_1-8-redo-log-file" aria-hidden="true">#</a> 1.8 redo log file</h3><h4 id="_1-相关参数设置" tabindex="-1"><a class="header-anchor" href="#_1-相关参数设置" aria-hidden="true">#</a> 1. 相关参数设置</h4><ul><li><p><code>innodb_log_group_home_dir</code> ：指定 redo log 文件组所在的路径，默认值为 <code>./</code> ，表示在数据库的数据目录下。MySQL的默认数据目录（ <code>var/lib/mysql</code> ）下默认有两个名为 <code>ib_logfile0</code> 和<code>ib_logfile1</code> 的文件，log buffer中的日志默认情况下就是刷新到这两个磁盘文件中。此redo日志文件位置还可以修改。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">&#39;innodb_log_group_home_dir&#39;</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">---------------------------+-------+</span>
<span class="token operator">|</span> Variable_name             <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---------------------------+-------+</span>
<span class="token operator">|</span> innodb_log_group_home_dir <span class="token operator">|</span> <span class="token punctuation">.</span><span class="token operator">/</span>    <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">---------------------------+-------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>innodb_log_files_in_group</code>：指明redo log file的个数，命名方式如：ib_logfile0，iblogfile1...iblogfilen。默认2个，最大100个。</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>mysql&gt; show variables like &#39;innodb_log_files_in_group&#39;;
+---------------------------+-------+
| Variable_name | Value |
+---------------------------+-------+
| innodb_log_files_in_group | 2 |
+---------------------------+-------+
#ib_logfile0
#ib_logfile1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>innodb_flush_log_at_trx_commit</strong>：控制 redo log 刷新到磁盘的策略，默认为1。</p></li><li><p><strong>innodb_log_file_size</strong>：单个 redo log 文件设置大小，默认值为 <code>48M</code> 。最大值为512G，注意最大值指的是整个 redo log 系列文件之和，即（innodb_log_files_in_group * innodb_log_file_size ）不能大于最大值512G。</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>mysql&gt; show variables like &#39;innodb_log_file_size&#39;;
+----------------------+----------+
| Variable_name | Value |
+----------------------+----------+
| innodb_log_file_size | 50331648 |
+----------------------+----------+
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据业务修改其大小，以便容纳较大的事务。编辑my.cnf文件并重启数据库生效，如下所示</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>[root@localhost ~]# vim /etc/my.cnf
innodb_log_file_size=200M  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><blockquote><p>在数据库实例更新比较频繁的情况下，可以适当加大 redo log组数和大小。但也不推荐redo log 设置过大，在MySQL崩溃恢复时会重新执行REDO日志中的记录。</p></blockquote><h4 id="_2-日志文件组" tabindex="-1"><a class="header-anchor" href="#_2-日志文件组" aria-hidden="true">#</a> 2. 日志文件组</h4><p>从上边的描述中可以看到，磁盘上的<code>redo</code>日志文件不只一个，而是以一个<code>日志文件组</code>的形式出现的。这些文件以<code>ib_logfile[数字]</code>（<code>数字</code>可以是0、1、2...）的形式进行命名，每个的redo日志文件大小都是一样的。</p><p>在将redo日志写入日志文件组时，是从<code>ib_logfile0</code>开始写，如果<code>ib_logfile0</code>写满了，就接着<code>ib_logfile1</code>写。同理,<code>ib_logfile1</code>.写满了就去写<code>ib_logfile2</code>，依此类推。如果写到最后一个文件该咋办?那就重新转到<code>ib_logfile0</code>继续写，所以整个过程如下图所示:</p><p><img src="`+L+'" alt="image-20230119212532135"></p><p>总共的redo日志文件大小其实就是： <code>innodb_log_file_size × innodb_log_files_in_group</code> 。</p><p>采用循环使用的方式向redo日志文件组里写数据的话，会导致后写入的redo日志覆盖掉前边写的redo日志？当然！所以InnoDB的设计者提出了checkpoint的概念。</p><h4 id="_3-checkpoint" tabindex="-1"><a class="header-anchor" href="#_3-checkpoint" aria-hidden="true">#</a> 3. checkpoint</h4><p>在整个日志文件组中还有两个重要的属性，分别是write pos、checkpoint</p><ul><li><code>write pos</code>是当前记录的位置，一边写一边后移</li><li><code>checkpoint</code>是当前要擦除的位置，也是往后推移</li></ul><p>每次刷盘redo log记录到日志文件组中，write pos位置就会后移更新。每次MySQL加载日志文件组恢复数据时，会清空加载过的redo log记录，并把 checkpoint后移更新。write pos和checkpoint之间的还空着的部分可以用来写入新的redo log记录。</p><p><img src="'+D+'" alt="image-20230119212607110"></p><p>如果 write pos 追上 checkpoint ，表示<strong>日志文件组</strong>满了，这时候不能再写入新的 redo log记录，MySQL 得停下来，清空一些记录，把 checkpoint 推进一下。</p><p><img src="'+w+'" alt="image-20230119212622535"></p><h3 id="_1-9-redo-log小结" tabindex="-1"><a class="header-anchor" href="#_1-9-redo-log小结" aria-hidden="true">#</a> 1.9 redo log小结</h3><p>相信大家都知道redo log的作用和它的刷盘时机、存储形式:</p><p><strong>InnoDB的更新操作采用的是Write Ahead Log(预先日志持久化)策略，即先写日志，再写入磁盘。</strong></p><p><img src="'+I+`" alt="image-20230119212716151"></p><h2 id="_2-undo日志" tabindex="-1"><a class="header-anchor" href="#_2-undo日志" aria-hidden="true">#</a> 2. Undo日志</h2><p>redo log是事务持久性的保证，undo log是事务原子性的保证。在事务中 <code>更新数据</code> 的 <code>前置操作</code> 其实是要先写入一个 <code>undo log</code> 。</p><h3 id="_2-1-如何理解undo日志" tabindex="-1"><a class="header-anchor" href="#_2-1-如何理解undo日志" aria-hidden="true">#</a> 2.1 如何理解Undo日志</h3><p>事务需要保证 <code>原子性</code> ，也就是事务中的操作要么全部完成，要么什么也不做。但有时候事务执行到一半会出现一些情况，比如：</p><ul><li>情况一：事务执行过程中可能遇到各种错误，比如 <code>服务器本身的错误</code> ， <code>操作系统错误</code> ，甚至是突然 <code>断电</code> 导的错误。</li><li>情况二：程序员可以在事务执行过程中手动输入 <code>ROLLBACK</code> 语句结束当前事务的执行。</li></ul><p>以上情况出现，我们需要把数据改回原先的样子，这个过程称之为 <code>回滚</code> ，这样就可以造成一个假象：这个事务看起来什么都没做，所以符合 <code>原子性</code> 要求。</p><p>每当我们要对一条记录做改动时(这里的<code>改动</code>可以指<code>INSERT</code>、<code>DELETE</code>、<code>UPDATE</code>)，都需要&quot;留一手&quot;——把回 滚时所需的东西记下来。比如:</p><ul><li><p>你<code>插入一条记录时</code>，至少要把这条记录的主键值记下来，之后回滚的时候只需要把这个主键值对应的<code>记录删掉</code>就好了。(对于每个INSERT, InnoDB存储引擎会完成一个DELETE)</p></li><li><p>你<code>删除了一条记录</code>，至少要把这条记录中的内容都记下来，这样之后回滚时再把由这些内容组成的记录插入到表中就好了。(对于每个DELETE,InnoDB存储引擎会执行一个INSERT)</p></li><li><p>你<code>修改了一条记录</code>，至少要把修改这条记录前的旧值都记录下来，这样之后回滚时再把这条记录<code>更新为旧值</code>就好了。(对于每个UPDATE，InnoDB存储引擎会执行一个相反的UPDATE，将修改前的行放回去)</p></li></ul><p>MySQL把这些为了回滚而记录的这些内容称之为<code>撤销日志</code>或者<code>回滚日志(</code>即<code>undo log</code>)。</p><blockquote><p>注意，由于查询操作( <code>SELECT</code>）并不会修改任何用户记录，所以在杳询操作行时，并不需要记录相应的undo日志</p><p>此外，undo log 会产生<code>redo log</code>，也就是undo log的产生会伴随着redo log的产生，这是因为undo log也需要持久性的保护</p></blockquote><h3 id="_2-2-undo日志的作用" tabindex="-1"><a class="header-anchor" href="#_2-2-undo日志的作用" aria-hidden="true">#</a> 2.2 Undo日志的作用</h3><ul><li><p><strong>作用1：回滚数据</strong></p><p>用户对undo日志可能<code>有误解</code>: undo用于将数据库物理地恢复到执行语句或事务之前的样子。但事实并非如此。undo是<code>逻辑日志</code>，因此只是将数据库逻辑地恢复到原来的样子。<mark>所有修改都被逻辑地取消了，但是数据结构和页本身在回滚之后可能大不相同。</mark></p><p>这是因为在多用户并发系统中，可能会有数十、数百甚至数千个并发事务。数据库的主要任务就是 <code>协调对数据记录的并发访问</code>。比如，一个事务在修改当前一个页中某几条记录，同时还有别的事务在对同一个页中另几条记录进行修改。因此，不能将一个页回滚到事务开始的样子，因为这样会影响其他事务正在进行的工作。</p></li><li><p><strong>作用2：MVCC</strong></p><p>undo的另一个作用是<code>MVCC</code>，即在InnoDB存储引擎中<code>MVCC的实现是通过undo来完成</code>。当用户读取一行记录时，若该记录已经被其他事务占用，当前事务可以通过undo读取之前的行版本信息，以此实现<code>非锁定读取</code>。</p></li></ul><h3 id="_2-3-undo的存储结构" tabindex="-1"><a class="header-anchor" href="#_2-3-undo的存储结构" aria-hidden="true">#</a> 2.3 undo的存储结构</h3><p><strong>1. 回滚段与undo页</strong></p><p>InnoDB对undo log的管理采用段的方式，也就是 <code>回滚段（rollback segment）</code> 。每个回滚段记录了<code>1024</code> 个 <code>undo log segment</code> ，而在每个undo log segment段中进行 <code>undo页</code> 的申请。</p><ul><li><p>在 <code>InnoDB1.1版本之前</code> （不包括1.1版本），只有一个rollback segment，因此支持同时在线的事务限制为 <code>1024</code> 。虽然对绝大多数的应用来说都已经够用。</p></li><li><p>从1.1版本开始InnoDB支持最大 <code>128个rollback segment</code> ，故其支持同时在线的事务限制提高到了 128*1024 。</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>mysql&gt; show variables like &#39;innodb_undo_logs&#39;;
+------------------+-------+
| Variable_name | Value |
+------------------+-------+
| innodb_undo_logs | 128 |
+------------------+-------+
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>虽然InnoDB1.1版本支持了128个rollback segment，但是这些rollback segment都存储于共享表空间ibdata中。从lnnoDB1.2版本开始，可通过参数对rollback segment做进一步的设置。这些参数包括:</p><ul><li><code>innodb_undo_directory</code>:设置rollback segment文件所在的路径。这意味着rollback segment可以存放在共享表空间以外的位置，即可以设置为独立表空间。该参数的默认值为“”，表示当前InnoDB存储引擎的目录。o</li><li><code>innodb_undo_logs</code>:设置rollback segment的个数，默认值为128。在InnoDB1.2版本中，该参数用来替换之前版本的参数innodb_rollback_segments。</li><li><code>innodb_undo_tablespaces</code> : 设置构成rollback segment文件的数量，这样rollback segment可以较为平均地分布在多个文件中。设置该参数后，会在路径innodb_undo_directory看到undo为前缀的文件，该文件就代表rollback segment文件。</li></ul><blockquote><p>undo log 相关的参数一般很少改变</p></blockquote><p><strong>undo页的重用</strong></p><p>当我们开启一个事务需要写undo log的时候，就得先去undo log segment中去找到一个空闲的位置，当有空位的时候，就去申请undo页，在这个申请到的undo页中进行undo log的写入。我们知道mysql默认一页的大小是<code>16k</code>。</p><p>为每一个事务分配一个页，是非常浪费的(除非你的事务非常长)，假设你的应用的TPS(每秒处理的事务数目)为1000，那么1s就需要1000个页，大概需要16M的存储，1分钟大概需要1G的存储。如果照这样下去除非MySQL清理的非常勤快，否则随着时间的推移，磁盘空间会增长的非常快，而且很多空间都是浪费的。</p><p>于是undo页就被设计的可以<code>重用</code>了，当事务提交时，并不会立刻删除undo页。因为重用，所以这个undo页可能混杂着其他事务的undo log。undo log在commit后，会被放到一个<code>链表</code>中，然后判断undo页的使用空间是否<code>小于3/4</code>，如果小于3/4的话，则表示当前的undo页可以被重用，那么它就不会被回收，其他事务的undo log可以记录在当前undo页的后面。由于undo log是<code>离散的</code>，所以清理对应的磁盘空间时，效率不高。</p><blockquote><p>因为每一个事务分配一个页，造成非常浪费，所以要重用—&gt;因为重用，所以当前日志的undo页可能会有其他事务的undo log—&gt;所以当前事务提交后，不能立即删除undo页。而是log放到链表中，尝试重用undo页面~</p></blockquote><h4 id="_2-回滚段与事务" tabindex="-1"><a class="header-anchor" href="#_2-回滚段与事务" aria-hidden="true">#</a> 2. 回滚段与事务</h4><ol><li><p>每个事务只会使用一个<code>回滚段（rollback segment）</code>，一个回滚段在同一时刻可能会服务于多个事务。</p></li><li><p>当一个事务开始的时候，会制定一个回滚段，在事务进行的过程中，当数据被修改时，原始的数 据会被复制到回滚段。</p></li><li><p>在回滚段中，事务会不断填充盘区，直到事务结束或所有的空间被用完。如果当前的盘区不够用，事务会在段中请求扩展下一个盘区，如果所有已分配的盘区都被用完，事务会覆盖最初的盘区或者在回滚段允许的情况下扩展新的盘区来使用。</p></li><li><p>回滚段存在于undo表空间中，在数据库中可以存在多个undo表空间，但同一时刻只能使用一个undo表空间。</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>mysql&gt; show variables like &#39;innodb_undo_tablespaces&#39;;
+-------------------------+-------+
| Variable_name           | Value |
+-------------------------+-------+
| innodb_undo_tablespaces | 2     |
+-------------------------+-------+
1 row in set (0.00 sec)

#undo log的数量,最少为2，undo log的truncate操作有purge协调线程发起。在truncate某个undo log表空间的过程中，保证有一个可用的undo log可用。

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>当事务提交时，InnoDB存储引擎会做以下两件事情：</p><ul><li><p>将undo log放入列表中，以供之后的purge操作</p><p>purge: 清除，清洗</p></li><li><p>判断undo log所在的页是否可以重用(低于3/4可以重用)，若可以分配给下个事务使用</p></li></ul></li></ol><p><strong>3. 回滚段中的数据分类</strong></p><ol><li><p><code>未提交的回滚数据(uncommitted undo information)</code>：</p><p>该数据所关联的事务并未提交，用于实现读一致性，所以该数据不能被其他事务的数据覆盖。</p></li><li><p><code>已经提交但未过期的回滚数据(committed undo information)</code>：</p><p>该数据关联的事务已经提交，但是仍受到undo retention参数的保持时间的影响。</p></li><li><p><code>事务已经提交并过期的数据(expired undo information)</code>：</p><p>事务已经提交，而且数据保存时间已经超过undo retention参数指定的时间，属于已经过期的数据。当回滚段满了之后，会优先覆盖&quot;事务已经提交并过期的数据&quot;。</p></li></ol><p>事务提交后并不能马上删除undo log及undo log所在的页。这是因为<mark>可能还有其他事务需要通过undo log来得到行记录之前的版本</mark>。故事务提交时将undo log放入一个链表中，是否可以最终删除undo log及undo log所在页由purge线程来判断。</p><h3 id="_2-4-undo的类型" tabindex="-1"><a class="header-anchor" href="#_2-4-undo的类型" aria-hidden="true">#</a> 2.4 undo的类型</h3><p>在InnoDB存储引擎中，undo log分为：</p><ul><li><p><code>insert undo log</code></p><p>insert undo log是指在<code>insert</code>操作中产生的undo log。因为insert操作的记录，只对事务本身可见，对其他事务不可见(这是事务隔离性的要求)，故该undo log可以在事务提交后直接删除。不需要进行purge操作。</p></li><li><p><code>update undo log</code></p><p>update undo log记录的是对<code>delete</code>和<code>update</code>操作产生的undo log。该undo log可能需要提供MVCC机制，因此<strong>不能</strong>在事务<strong>提交时就进行删除</strong>。提交时放入undo log链表，等待purge线程进行最后的删除。</p></li></ul><h3 id="_2-5-undo-log的生命周期" tabindex="-1"><a class="header-anchor" href="#_2-5-undo-log的生命周期" aria-hidden="true">#</a> 2.5 undo log的生命周期</h3><h4 id="_1-简要生成过程" tabindex="-1"><a class="header-anchor" href="#_1-简要生成过程" aria-hidden="true">#</a> 1. 简要生成过程</h4><p>以下是undo+redo事务的简化过程</p><p>假设有2个数值，分别为A=1和B=2，然后将A修改为3，B修改为4</p><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>1. start transaction;
2．记录A=1到undo log;
3. update A = 3;
4．记录A=3 到redo log;
5．记录 B=2到undo loq;
6. update B = 4;
7．记录B = 4到redo log;
8．将redo log刷新到磁盘;
9. commit
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在1-8步骤的任意一步系统宕机，事务未提交，该事务就不会对磁盘上的数据做任何影响。</li><li>如果在8-9之间宕机。 <ul><li>redo log 进行恢复</li><li>undo log 发现有事务没完成进行回滚。</li></ul></li><li>若在9之后系统宕机，内存映射中变更的数据还来不及刷回磁盘，那么系统恢复之后，可以根据redo log把数据刷回磁盘。</li></ul><p><strong>只有Buffer Pool的流程：</strong></p><p><img src="`+x+'" alt="image-20230119233302216"></p><p><strong>有了Redo Log和Undo Log之后 :</strong></p><p><img src="'+A+'" alt="image-20230119233316969"></p><p>在更新Buffer Pool中的数据之前，我们需要先将该数据事务开始之前的状态写入Undo Log中。假设更新到一半出错了，我们就可以通过Undo Log来回滚到事务开始前。</p><h4 id="_2-详细生成过程" tabindex="-1"><a class="header-anchor" href="#_2-详细生成过程" aria-hidden="true">#</a> 2. 详细生成过程</h4><p>对于InnoDB引擎来说，每个行记录除了记录本身的数据之外，还有几个隐藏的列:</p><ul><li><p><code>DB_ROW_ID</code>: 如果没有为表显式的定义主键，并且表中也没有定义唯一索引，那么InnoDB会自动为表添加一个row_id的隐藏列作为主键。</p></li><li><p><code>DB_TRX_ID</code>︰每个事务都会分配一个事务ID，当对某条记录发生变更时，就会将这个事务的事务ID写入trx_id中。</p><blockquote><p>疑问， 就一个字段，如果有两个事务怎么办。两个事务会不会有锁呢？</p></blockquote></li><li><p><code>DB_ROLL_PTR</code>:回滚指针，本质上就是指向undo log的指针。</p></li><li><p><img src="'+T+`" alt="image-20230119233335524"></p></li></ul><p><strong>当我们执行INSERT时：</strong></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>begin;
INSERT INTO user (name) VALUES (&quot;tom&quot;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>插入的数据都会生成一条insert undo log，并且数据的回滚指针会指向它。undo log会记录undo log的序号、插入主键的列和值...，那么在进行rollback的时候，通过主键直接把对应的数据删除即可。</p><p><img src="`+C+`" alt="image-20230119233405641"></p><p><strong>当我们执行UPDATE时：</strong></p><p>对于更新的操作会产生update undo log，并且会分更新主键的和不更新主键的，假设现在执行:</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>UPDATE user SET name= &quot;Sun&quot; WHERE id=1;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+O+`" alt="image-20230119233420923"></p><p>这时会把老的记录写入新的undo log，让回滚指针指向新的undo log，它的undo no是1，并且新的undo log会指向老的undo log (undo no=0)。</p><p>假设现在执行:</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>UPDATE user SET id=2 WHERE id=1;  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+R+'" alt="image-20230119233454289"></p><p>对于更新主键的操作，会先把原来的数据deletemark标识打开，这时并没有真正的删除数据，真正的删除会交给清理线程去判断，然后在后面插入一条新的数据，新的数据也会产生undo log，并且undo log的序号会递增。</p><p>可以发现每次对数据的变更都会产生一个undo log，当一条记录被变更多次时，那么就会产生多条undo log,undo log记录的是变更前的日志，并且每个undo log的序号是递增的，那么当要回滚的时候，按照序号<code>依次向前推</code>，就可以找到我们的原始数据了。</p><h4 id="_3-undo-log是如何回滚的" tabindex="-1"><a class="header-anchor" href="#_3-undo-log是如何回滚的" aria-hidden="true">#</a> 3. undo log是如何回滚的</h4><p>以上面的例子来说，假设执行rollback，那么对应的流程应该是这样：</p><ol><li>通过undo no=3的日志把id=2的数据删除</li><li>通过undo no=2的日志把id=1的数据的deletemark还原成0</li><li>通过undo no=1的日志把id=1的数据的name还原成Tom</li><li>通过undo no=0的日志把id=1的数据删除</li></ol><p><strong>4.undo log的删除</strong></p><ul><li><p>针对于<code>insert undo log</code></p><p>因为insert操作的记录，只对事务本身可见，对其他事务不可见。故该undo log可以在事务提交后直接删除，不需要进行purge操作。</p></li><li><p>针对于<code>update undo log</code></p><p>该undo log可能需要提供MVCC机制，因此不能在事务提交时就进行删除。提交时放入undo log链表，等待purge线程进行最后的删除。</p></li></ul><blockquote><p>补充:</p><p>purge线程两个主要作用是:<code>清理undo页</code>和<code>清除page里面带有Delete_Bit标识的数据</code>行。仕InnoDB中，事分中的Delete操作实际上并不是真正的删除掉数据行，而是一种Delete Mark操作，在记录上标识Delete_Bit，而不删除记录。是一种&quot;假删除&quot;只是做了个标记，真正的删除工作需要后台purge线程去完成。</p></blockquote><h3 id="_2-6-小结" tabindex="-1"><a class="header-anchor" href="#_2-6-小结" aria-hidden="true">#</a> 2.6 小结</h3><p><img src="'+S+'" alt="image-20230119212716151"></p><p>undo log是逻辑日志，对事务回滚时，只是将数据库逻辑地恢复到原来的样子。</p><p>redo log是物理日志，记录的是数据页的物理变化，undo log不是redo log的逆过程。</p>',157);function P(K,z){const n=i("ExternalLinkIcon");return d(),a("div",null,[M,e("ul",null,[U,e("li",null,[e("a",V,[l("https://www.bilibili.com/video/BV1iq4y1u7vj?p=169&t=1220.2存储表空间ID、页号、偏移量以及需要更新的值，所需的存储空间是很小的，刷盘快。"),c(n)])])]),G])}const Q=s(N,[["render",P],["__file","第14章_MySQL事务日志.html.vue"]]);export{Q as default};
