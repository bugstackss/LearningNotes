import{_ as a}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as t,c as n,a as s}from"./app.9b10ba0a.js";const e="/assets/fd44ba7b28114edfb3c2e3846c2aaca9-20230304222122261.6215c7c4.png",p="/assets/5dbb8cd0aa5e4c4cb37a5d2e5684016f-20230304222122358.6e730c5b.png",i="/assets/dd0dc23c85694ef18a2b0c8f728dddc4-20230304222122268.aa9846a3.png",l="/assets/9017e3ff694b43eab302ed57a24c63eb-20230304222122260.4d13276c.png",o="/assets/89488ae802514db2994b5a83b91ede66-20230304222122488.9a8687e8.png",d={},c=s('<h1 id="_09、http协议" tabindex="-1"><a class="header-anchor" href="#_09、http协议" aria-hidden="true">#</a> 09、HTTP协议</h1><h2 id="_1、介绍" tabindex="-1"><a class="header-anchor" href="#_1、介绍" aria-hidden="true">#</a> 1、介绍</h2><p>HTTP：<strong>H</strong>yper <strong>T</strong>ext <strong>T</strong>ransfer <strong>P</strong>rotocol超文本传输协议。HTTP最大的作用就是确定了请求和响应数据的格式。浏览器发送给服务器的数据：请求报文；服务器返回给浏览器的数据：响应报文。</p><h2 id="_2、请求报文" tabindex="-1"><a class="header-anchor" href="#_2、请求报文" aria-hidden="true">#</a> 2、请求报文</h2><h3 id="在开发者工具中浏览报文源码" tabindex="-1"><a class="header-anchor" href="#在开发者工具中浏览报文源码" aria-hidden="true">#</a> 在开发者工具中浏览报文源码</h3><p><img src="'+e+'" alt="image.png"></p><h3 id="请求报文的三个部分" tabindex="-1"><a class="header-anchor" href="#请求报文的三个部分" aria-hidden="true">#</a> 请求报文的三个部分</h3><p><img src="'+p+'" alt="image.png"></p><h3 id="请求行" tabindex="-1"><a class="header-anchor" href="#请求行" aria-hidden="true">#</a> 请求行</h3><p>作用：展示当前请求的最基本信息</p><blockquote><p>POST /dynamic/target.jsp HTTP/1.1</p></blockquote><ul><li>请求方式</li><li>访问地址</li><li>HTTP协议的版本</li></ul><h3 id="请求消息头" tabindex="-1"><a class="header-anchor" href="#请求消息头" aria-hidden="true">#</a> 请求消息头</h3><p>作用：通过具体的参数对本次请求进行详细的说明</p><p>格式：键值对，键和值之间使用冒号隔开</p><p>相对比较重要的请求消息头：</p><table><thead><tr><th>名称</th><th>功能</th></tr></thead><tbody><tr><td>Host</td><td>服务器的主机地址</td></tr><tr><td>Accept</td><td>声明当前请求能够接受的『媒体类型』</td></tr><tr><td>Referer</td><td>当前请求来源页面的地址</td></tr><tr><td>Content-Length</td><td>请求体内容的长度</td></tr><tr><td>Content-Type</td><td>请求体的内容类型，这一项的具体值是媒体类型中的某一种</td></tr><tr><td>Cookie</td><td>浏览器访问服务器时携带的Cookie数据</td></tr></tbody></table><h3 id="请求体" tabindex="-1"><a class="header-anchor" href="#请求体" aria-hidden="true">#</a> 请求体</h3><p>作用：作为请求的主体，发送数据给服务器。具体来说其实就是POST请求方式下的请求参数。</p><p>格式：</p><h4 id="form-data" tabindex="-1"><a class="header-anchor" href="#form-data" aria-hidden="true">#</a> form data</h4><p>含义：当前请求体是一个表单提交的请求参数。</p><p><img src="'+i+'" alt="image.png"></p><p>查看源码后，发现格式如下：</p><blockquote><p>username=tom&amp;password=123456</p></blockquote><ul><li>每一组请求参数是一个键值对</li><li>键和值中间是等号</li><li>键值对之间是&amp;号</li></ul><h4 id="request-payload" tabindex="-1"><a class="header-anchor" href="#request-payload" aria-hidden="true">#</a> Request Payload</h4><p>含义：整个请求体以某种特定格式来组织数据，例如JSON格式。</p><p><img src="'+l+`" alt="image.png"></p><h2 id="_3、请求方式" tabindex="-1"><a class="header-anchor" href="#_3、请求方式" aria-hidden="true">#</a> 3、请求方式</h2><h3 id="http协议已定义的请求方式" tabindex="-1"><a class="header-anchor" href="#http协议已定义的请求方式" aria-hidden="true">#</a> HTTP协议已定义的请求方式</h3><p>HTTP1.1中共定义了八种请求方式：</p><ul><li><strong>GET</strong>：从服务器端获取数据</li><li><strong>POST</strong>：将数据保存到服务器端</li><li><strong>PUT</strong>：命令服务器对数据执行更新</li><li><strong>DELETE</strong>：命令服务器删除数据</li><li>HEAD</li><li>CONNECT</li><li>OPTIONS</li><li>TRACE</li></ul><h3 id="get请求" tabindex="-1"><a class="header-anchor" href="#get请求" aria-hidden="true">#</a> GET请求</h3><ul><li>特征1：没有请求体</li><li>特征2：请求参数附着在URL地址后面</li><li>特征3：请求参数在浏览器地址栏能够直接被看到，存在安全隐患</li><li>特征4：在URL地址后面携带请求参数，数据容量非常有限。如果数据量大，那么超出容量的数据会丢失</li><li>特征5：从报文角度分析，请求参数是在请求行中携带的，因为访问地址在请求行</li></ul><h3 id="post请求" tabindex="-1"><a class="header-anchor" href="#post请求" aria-hidden="true">#</a> POST请求</h3><ul><li>特征1：有请求体</li><li>特征2：请求参数放在请求体中</li><li>特征3：请求体发送数据的空间没有限制</li><li>特征4：可以发送各种不同类型的数据</li><li>特征5：从报文角度分析，请求参数是在请求体中携带的</li><li>特征6：由于请求参数是放在请求体中，所以浏览器地址栏看不到</li></ul><h2 id="_4、媒体类型" tabindex="-1"><a class="header-anchor" href="#_4、媒体类型" aria-hidden="true">#</a> 4、媒体类型</h2><h3 id="http协议中的mime类型" tabindex="-1"><a class="header-anchor" href="#http协议中的mime类型" aria-hidden="true">#</a> HTTP协议中的MIME类型</h3><p>Multipurpose Internet Mail Extensions</p><h3 id="用途" tabindex="-1"><a class="header-anchor" href="#用途" aria-hidden="true">#</a> 用途</h3><p>为了让用户通过浏览器和服务器端交互的过程中有更好、更丰富的体验，HTTP协议需要支持丰富的数据类型。</p><h3 id="mime类型定义参考" tabindex="-1"><a class="header-anchor" href="#mime类型定义参考" aria-hidden="true">#</a> MIME类型定义参考</h3><p>我们可以通过查看Tomcat解压目录下conf/web.xml配置文件，了解HTTP协议中定义的MIME类型。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mime-mapping</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>extension</span><span class="token punctuation">&gt;</span></span>mp4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>extension</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mime-type</span><span class="token punctuation">&gt;</span></span>video/mp4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mime-type</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mime-mapping</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mime-mapping</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>extension</span><span class="token punctuation">&gt;</span></span>doc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>extension</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mime-type</span><span class="token punctuation">&gt;</span></span>application/msword<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mime-type</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mime-mapping</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mime-mapping</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>extension</span><span class="token punctuation">&gt;</span></span>json<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>extension</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mime-type</span><span class="token punctuation">&gt;</span></span>application/json<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mime-type</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mime-mapping</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mime-mapping</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>extension</span><span class="token punctuation">&gt;</span></span>html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>extension</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mime-type</span><span class="token punctuation">&gt;</span></span>text/html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mime-type</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mime-mapping</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的例子中可以看出：MIME的基本格式是</p><blockquote><p>大类/具体类型</p></blockquote><p>MIME类型在HTTP报文中对应的是内容类型：Content-type</p><h2 id="_5、响应报文" tabindex="-1"><a class="header-anchor" href="#_5、响应报文" aria-hidden="true">#</a> 5、响应报文</h2><p><img src="`+o+'" alt="image.png"></p><h3 id="响应状态行" tabindex="-1"><a class="header-anchor" href="#响应状态行" aria-hidden="true">#</a> 响应状态行</h3><blockquote><p>HTTP/1.1 200 OK</p></blockquote><ul><li>HTTP协议版本</li><li><strong>响应状态码</strong></li><li>响应状态的说明文字</li></ul><h3 id="响应消息头" tabindex="-1"><a class="header-anchor" href="#响应消息头" aria-hidden="true">#</a> 响应消息头</h3><ul><li>响应体的说明书。</li><li>服务器端对浏览器端设置数据，例如：服务器端返回Cookie信息。</li></ul><table><thead><tr><th>名称</th><th>功能</th></tr></thead><tbody><tr><td>Content-Type</td><td>响应体的内容类型</td></tr><tr><td>Content-Length</td><td>响应体的内容长度</td></tr><tr><td>Set-Cookie</td><td>服务器返回新的Cookie信息给浏览器</td></tr><tr><td>location</td><td>在<strong>重定向</strong>的情况下，告诉浏览器访问下一个资源的地址</td></tr></tbody></table><h3 id="响应体" tabindex="-1"><a class="header-anchor" href="#响应体" aria-hidden="true">#</a> 响应体</h3><p>服务器返回的数据主体，有可能是各种数据类型。</p><ul><li>HTML页面</li><li>图片</li><li>视频</li><li>以下载形式返回的文件</li><li>CSS文件</li><li>JavaScript文件</li></ul><h3 id="响应状态码" tabindex="-1"><a class="header-anchor" href="#响应状态码" aria-hidden="true">#</a> 响应状态码</h3><p>作用：以编码的形式告诉浏览器当前请求处理的结果</p><table><thead><tr><th>状态码</th><th>含义</th></tr></thead><tbody><tr><td>200</td><td>服务器成功处理了当前请求，成功返回响应</td></tr><tr><td>302</td><td>重定向</td></tr><tr><td>400</td><td>[SpringMVC特定环境]请求参数问题</td></tr><tr><td>403</td><td>没有权限</td></tr><tr><td>404</td><td>找不到目标资源</td></tr><tr><td>405</td><td>请求方式和服务器端对应的处理方式不一致</td></tr><tr><td>406</td><td>[SpringMVC特定环境]请求扩展名和实际返回的响应体类型不一致</td></tr><tr><td>50X</td><td>服务器端内部错误，通常都是服务器端抛异常了</td></tr></tbody></table><p>404产生的具体原因：</p><ul><li>访问地址写错了，确实是没有这个资源</li><li>访问了WEB-INF目录下的资源</li><li>Web应用启动的时候，控制台已经抛出异常，导致整个Web应用不可用，访问任何资源都是404</li><li>服务器端缓存</li></ul>',64),r=[c];function u(h,g){return t(),n("div",null,r)}const b=a(d,[["render",u],["__file","09、HTTP协议.html.vue"]]);export{b as default};
