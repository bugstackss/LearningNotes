import{_ as s}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as a,c as e,a as n}from"./app.9b10ba0a.js";const i="/assets/2023-05-19-06-04-56-image.221aaeb5.png",l="/assets/2023-05-19-06-05-47-image.b661e2b0.png",r="/assets/2023-05-19-06-07-22-image.26bdc619.png",p="/assets/2023-05-19-06-07-57-image.4fd4c12b.png",t="/assets/2023-05-19-06-14-24-image.e061556b.png",d="/assets/2023-05-19-06-14-54-image.55e6176d.png",c="/assets/2023-05-19-06-19-28-image.b0a6c86d.png",o="/assets/2023-05-19-06-20-12-image.c846d325.png",m="/assets/2023-05-19-06-20-47-image.101330c4.png",v="/assets/2023-05-19-06-21-46-image.88463892.png",u="/assets/2023-05-19-06-22-23-image.fdf6b862.png",b="/assets/2023-05-19-06-23-24-image.5f3c248b.png",g="/assets/2023-05-19-06-26-05-image.6455c98f.png",h="/assets/2023-05-19-06-26-33-image.22409d37.png",k="/assets/2023-05-19-06-27-13-image.bf5f6f7e.png",_="/assets/2023-05-19-06-27-22-image.1b735977.png",f="/assets/image-20230520170009041.6bdf4a75.png",y="/assets/image-20230520165927974.0c4f8145.png",x="/assets/image-20230520171132505.55fb15c1.png",q="/assets/image-20230520173325671.abff119b.png",I="/assets/image-20230520173243401.23f42e70.png",H="/assets/image-20230520173733053.c7897621.png",P="/assets/image-20230520163905792.26e6f8d9.png",N="/assets/image-20230520165220817.3ed38869.png",D="/assets/2023-05-19-09-57-59-image.b2a340a2.png",A="/assets/2023-05-19-10-00-41-image.638a3dbb.png",O="/assets/2023-05-19-10-00-48-image.ef9bfd6b.png",C="/assets/2023-05-19-10-06-05-image.265b7381.png",R="/assets/2023-05-19-10-06-18-image.77b34201.png",w="/assets/2023-05-19-10-06-28-image.a8d262f6.png",B="/assets/2023-05-19-10-06-40-image.d9fe7c91.png",E="/assets/2023-05-19-10-08-00-image.3f4089d1.png",S="/assets/2023-05-19-10-08-08-image.c3924497.png",T="/assets/2023-05-19-10-11-12-image.8862356d.png",L="/assets/2023-05-19-10-11-25-image.ba9acab0.png",M="/assets/2023-05-19-10-11-59-image.856c3003.png",X="/assets/2023-05-19-10-12-10-image.7f483be5.png",j="/assets/2023-05-19-10-14-54-image.7eabb3dc.png",Y="/assets/2023-05-19-10-15-33-image.e7edcaad.png",z="/assets/2023-05-19-10-16-27-image.e45db024.png",F="/assets/2023-05-19-10-17-00-image.def6696f.png",G="/assets/2023-05-19-10-17-49-image.3d39c579.png",K="/assets/2023-05-19-10-19-16-image.e63f6cdd.png",Q="/assets/2023-05-19-10-23-26-image.4b95a7f4.png",V="/assets/2023-05-19-10-23-36-image.4ba6e8bf.png",W="/assets/2023-05-19-10-24-24-image.069d646c.png",U="/assets/2023-05-19-10-24-32-image.1bfbbb06.png",J="/assets/2023-05-19-10-25-13-image.de92416f.png",Z="/assets/2023-05-19-10-25-23-image.149c7314.png",$="/assets/2023-05-19-10-26-18-image.911ef635.png",ss="/assets/2023-05-19-10-26-26-image.3a13f5d5.png",as="/assets/2023-05-19-10-27-11-image.826670f1.png",es="/assets/2023-05-19-10-27-59-image.f91125d1.png",ns="/assets/2023-05-19-10-28-07-image.539b72aa.png",is="/assets/2023-05-19-10-28-45-image.086ac8ae.png",ls="/assets/2023-05-19-10-28-54-image.a2a21af5.png",rs="/assets/2023-05-19-10-30-58-image.e06296e1.png",ps="/assets/2023-05-19-10-31-48-image.71d064cb.png",ts="/assets/2023-05-19-10-32-06-image.7b84ba8c.png",ds="/assets/2023-05-19-10-33-07-image.e5b8276c.png",cs="/assets/2023-05-19-10-33-15-image.29bc3c98.png",os="/assets/2023-05-19-10-33-27-image.6e881cf8.png",ms="/assets/2023-05-19-10-33-59-image.6b63a2d2.png",vs="/assets/2023-05-19-10-34-30-image.5ae7ffd9.png",us="/assets/2023-05-19-10-35-01-image.a3ad0d76.png",bs={},gs=n(`<h2 id="一、安装mysql主从复制" tabindex="-1"><a class="header-anchor" href="#一、安装mysql主从复制" aria-hidden="true">#</a> 一、安装mysql主从复制</h2><p>这里主从复制的原理默认是懂的！</p><p>主从复制搭建步骤</p><ol><li>新建主服务器容器示例3307</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">3307</span>:3306 <span class="token parameter variable">--name</span> mysql-master <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /mydata/mysql-master/log:/var/log/mysql <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /mydata/mysql-master/data:/var/lib/mysql <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /mydata/mysql-master/conf:/etc/mysql/conf.d <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span>root  <span class="token punctuation">\\</span>
<span class="token parameter variable">-d</span> mysql:5.7
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>进入<code>/mydata/mysql-master/conf</code>目录下新建<code>my.cnf</code></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vim</span> my.cnf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-my.cnf line-numbers-mode" data-ext="my.cnf"><pre class="language-my.cnf"><code>[mysqld]
## 设置server_id，同一局域网中需要唯一
server_id=101 
## 指定不需要同步的数据库名称
binlog-ignore-db=mysql 
## 开启二进制日志功能
log-bin=mall-mysql-bin  
## 设置二进制日志使用内存大小（事务）
binlog_cache_size=1M  
## 设置使用的二进制日志格式（mixed,statement,row）
binlog_format=mixed  
## 二进制日志过期清理时间。默认值为0，表示不自动清理。
expire_logs_days=7  
## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。
## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致
slave_skip_errors=1062
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>修改完配置后重启master实例</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> restart mysql-master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li>进入mysql-master容器</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mysql-master /bin/bash
mysql <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-proot</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>master容器实例内创建数据同步用户</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>CREATE <span class="token environment constant">USER</span> <span class="token string">&#39;slave&#39;</span>@<span class="token string">&#39;%&#39;</span> IDENTIFIED BY <span class="token string">&#39;123456&#39;</span><span class="token punctuation">;</span>
GRANT REPLICATION SLAVE,REPLICATION CLIENT ON *.* TO <span class="token string">&#39;slave&#39;</span>@<span class="token string">&#39;%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li>新建从服务器容器实例3308</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">3308</span>:3306 <span class="token parameter variable">--name</span> mysql-slave <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /mydata/mysql-slave/log:/var/log/mysql <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /mydata/mysql-slave/data:/var/lib/mysql <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /mydata/mysql-slave/conf:/etc/mysql/conf.d <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span>root  <span class="token punctuation">\\</span>
<span class="token parameter variable">-d</span> mysql:5.7
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="7"><li>进入<code>/mydata/mysql-slave/conf</code>目录下新建<code>my.cnf</code></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vim</span> my.cnf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-my.cnf line-numbers-mode" data-ext="my.cnf"><pre class="language-my.cnf"><code>[mysqld]
## 设置server_id，同一局域网中需要唯一
server_id=102
## 指定不需要同步的数据库名称
binlog-ignore-db=mysql  
## 开启二进制日志功能，以备Slave作为其它数据库实例的Master时使用
log-bin=mall-mysql-slave1-bin  
## 设置二进制日志使用内存大小（事务）
binlog_cache_size=1M  
## 设置使用的二进制日志格式（mixed,statement,row）
binlog_format=mixed  
## 二进制日志过期清理时间。默认值为0，表示不自动清理。
expire_logs_days=7  
## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。
## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致
slave_skip_errors=1062  
## relay_log配置中继日志
relay_log=mall-mysql-relay-bin  
## log_slave_updates表示slave将复制事件写进自己的二进制日志
log_slave_updates=1 
## slave设置为只读（具有super权限的用户除外）
read_only=1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="8"><li>修改完配置后重启slave实例</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> restart mysql-slave
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="9"><li>在主数据库中查看主从同步情况</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">show</span> master <span class="token keyword">status</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="10"><li>进入mysql-slave容器</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mysql-slave /bin/bash
mysql <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-proot</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="11"><li>在从数据库中配置主从复制</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>change master <span class="token keyword">to</span> master_host<span class="token operator">=</span><span class="token string">&#39;宿主机ip&#39;</span><span class="token punctuation">,</span> master_user<span class="token operator">=</span><span class="token string">&#39;slave&#39;</span><span class="token punctuation">,</span> master_password<span class="token operator">=</span><span class="token string">&#39;123456&#39;</span><span class="token punctuation">,</span> master_port<span class="token operator">=</span><span class="token number">3307</span><span class="token punctuation">,</span> master_log_file<span class="token operator">=</span><span class="token string">&#39;mall-mysql-bin.000001&#39;</span><span class="token punctuation">,</span> master_log_pos<span class="token operator">=</span><span class="token number">617</span><span class="token punctuation">,</span> master_connect_retry<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+i+`" alt=""></p><p>主从复制命令参数说明</p><div class="language-textile line-numbers-mode" data-ext="textile"><pre class="language-textile"><code><span class="token phrase">master_host：主数据库的IP地址；</span>

<span class="token phrase">master_port：主数据库的运行端口；</span>

<span class="token phrase">master_user：在主数据库创建的用于同步数据的用户账号；</span>

<span class="token phrase">master_password：在主数据库创建的用于同步数据的用户密码；</span>

<span class="token phrase">master_log_file：指定从数据库要复制数据的日志文件，通过查看主数据的状态，获取File参数；</span>

<span class="token phrase">master_log_pos：指定从数据库从哪个位置开始复制数据，通过查看主数据的状态，获取Position参数；</span>

<span class="token phrase">master_connect_retry：连接失败重试的时间间隔，单位为秒。
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+l+`" alt=""></p><ol start="12"><li>在从数据库中查看主从同步状态</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">show</span> slave <span class="token keyword">status</span> \\G<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="13"><li>在从数据库中开启主从同步</li></ol><p><img src="`+r+'" alt=""></p><ol start="14"><li>查看从数据库状态发现已经同步</li></ol><p><img src="'+p+'" alt=""></p><ol start="15"><li>主从复制测试</li></ol><p>主机新建库- 使用库-新建表- 插入数据，ok</p><p>丛集使用库- 查看记录，ok</p><h2 id="二、安装redis集群-大厂面试题第4季-分布式存储案例真题" tabindex="-1"><a class="header-anchor" href="#二、安装redis集群-大厂面试题第4季-分布式存储案例真题" aria-hidden="true">#</a> 二、安装redis集群（大厂面试题第4季-分布式存储案例真题）</h2><blockquote><p>cluster（集群）模式-docker版--哈希槽分区进行亿级数据存储</p></blockquote><h3 id="面试题" tabindex="-1"><a class="header-anchor" href="#面试题" aria-hidden="true">#</a> 面试题</h3><p>1~2亿条数据需要缓存，请问如何设计这个存储案例</p><p>回答：单机单台100%不可能，肯定是分布式存储，用redis如何落地？</p><p>上述问题阿里P6~P7工程案例和场景设计类必考题目，一般业界有三种解决方案</p><h4 id="哈希取余分区" tabindex="-1"><a class="header-anchor" href="#哈希取余分区" aria-hidden="true">#</a> 哈希取余分区</h4><p><img src="'+t+'" alt=""></p><table><thead><tr><th>2亿条记录就是2亿个k,v，我们单机不行必须要分布式多机，假设有3台机器构成一个集群，用户每次读写操作都是根据公式：<br><br>hash(key) % N个机器台数，计算出哈希值，用来决定数据映射到哪一个节点上。</th></tr></thead><tbody><tr><td>优点：<br><br>  简单粗暴，直接有效，只需要预估好数据规划好节点，例如3台、8台、10台，就能保证一段时间的数据支撑。使用Hash算法让固定的一部分请求落到同一台服务器上，这样每台服务器固定处理一部分请求（并维护这些请求的信息），起到负载均衡+分而治之的作用。</td></tr><tr><td>缺点：<br><br>   原来规划好的节点，进行扩容或者缩容就比较麻烦了额，不管扩缩，每次数据变动导致节点有变动，映射关系需要重新进行计算，在服务器个数固定不变时没有问题，如果需要弹性扩容或故障停机的情况下，原来的取模公式就会发生变化：Hash(key)/3会变成Hash(key) /?。此时地址经过取余运算的结果将发生很大变化，根据公式获取的服务器也会变得不可控。<br><br>某个redis机器宕机了，由于台数数量变化，会导致hash取余全部数据重新洗牌。</td></tr></tbody></table><p>缺点呢？？？</p><p><img src="'+d+'" alt=""></p><table><thead><tr><th>缺点：</th></tr></thead><tbody><tr><td><br>   原来规划好的节点，进行扩容或者缩容就比较麻烦了额，不管扩缩，每次数据变动导致节点有变动，映射关系需要重新进行计算，在服务器个数固定不变时没有问题，如果需要弹性扩容或故障停机的情况下，原来的取模公式就会发生变化：Hash(key)/3会变成Hash(key) /?。此时地址经过取余运算的结果将发生很大变化，根据公式获取的服务器也会变得不可控。<br><br>某个redis机器宕机了，由于台数数量变化，会导致hash取余全部数据重新洗牌。</td></tr></tbody></table><h4 id="一致性哈希算法分区" tabindex="-1"><a class="header-anchor" href="#一致性哈希算法分区" aria-hidden="true">#</a> 一致性哈希算法分区</h4><p><strong>是什么？</strong></p><p>一致性Hash算法背景</p><p>一致性哈希算法在1997年由麻省理工学院中提出的，设计目标是为了解决</p><p><code>分布式缓存数据</code><strong>变动和映射问题</strong>，<code>某个机器宕机了，分母数量改变了，自然取余数不OK了。</code></p><p><strong>能干嘛？</strong></p><p>提出一致性Hash解决方案。目的是当服务器个数发生变动时，尽量减少影响客户端到服务端的映射关系</p><p><strong>3大步骤</strong></p><ul><li>算法构建一致性哈希环</li></ul><p><strong>一致性哈希环</strong></p><p>一致性哈希算法必然有个hash函数并按照算法产生hash值，这个算法的所有可能哈希值会构成一个全量集，这个集合可以成为一个hash空间[0,2^32-1]，这个是一个线性空间，但是在算法中，我们通过适当的逻辑控制将它首尾相连(0 = 2^32),这样让它逻辑上形成了一个环形空间。</p><p>它也是按照使用取模的方法，前面笔记介绍的节点取模法是对节点（服务器）的数量进行取模。而一致性Hash算法是对2<sup>32取模，简单来说，**一致性Hash算法将整个哈希值空间组织成一个虚拟的圆环**，如假设某哈希函数H的值空间为0-2</sup>32-1（即哈希值是一个32位无符号整形），整个哈希环如下图：整个空间<code>按顺时针方向组织</code>，圆环的正上方的点代表0，0点右侧的第一个点代表1，以此类推，2、3、4、……直到2<sup>32-1，也就是说0点左侧的第一个点代表2</sup>32-1， 0和2<sup>32-1在零点中方向重合，我们把这个由2</sup>32个点组成的圆环称为Hash环。</p><p><img src="'+c+'" alt=""></p><ul><li>服务器IP节点映射</li></ul><p><strong>节点映射</strong></p><p>将集群中各个IP节点映射到环上的某一个位置。</p><p>将各个服务器使用Hash进行一个哈希，具体可以选择服务器的IP或主机名作为关键字进行哈希，这样每台机器就能确定其在哈希环上的位置。假如4个节点NodeA、B、C、D，经过IP地址的<code>哈希函数</code>计算(hash(ip))，使用IP地址哈希后在环空间的位置如下：</p><p><img src="'+o+'" alt=""></p><ul><li>key落到服务器的落键规则</li></ul><p>当我们需要存储一个kv键值对时，首先计算key的hash值，hash(key)，将这个key使用相同的函数Hash计算出哈希值并确定此数据在环上的位置，<strong>从此位置沿环顺时针“行走”</strong>，第一台遇到的服务器就是其应该定位到的服务器，并将该键值对存储在该节点上。</p><p>如我们有Object A、Object B、Object C、Object D四个数据对象，经过哈希计算后，在环空间上的位置如下：根据一致性Hash算法，数据A会被定为到Node A上，B被定为到Node B上，C被定为到Node C上，D被定为到Node D上。</p><p><img src="'+m+'" alt=""></p><p><strong>优点</strong></p><ul><li>一致性哈希算法的<strong>容错性</strong></li></ul><p><strong>容错性</strong></p><p>假设Node C宕机，可以看到此时对象A、B、D不会受到影响，只有C对象被重定位到Node D。一般的，在一致性Hash算法中，如果一台服务器不可用，则<code>受影响的数据仅仅是此服务器到其环空间中前一台服务器（即沿着逆时针方向行走遇到的第一台服务器）之间数据</code>，其它不会受到影响。简单说，就是C挂了，受到影响的只是B、C之间的数据，并且这些数据会转移到D进行存储。</p><p><img src="'+v+'" alt=""></p><ul><li>一致性哈希的<code>扩展性</code></li></ul><p>** 扩展性**</p><p>数据量增加了，需要增加一台节点NodeX，X的位置在A和B之间，那收到影响的也就是A到X之间的数据，重新把A到X的数据录入到X上即可，</p><p>不会导致hash取余全部数据重新洗牌。</p><p><img src="'+u+'" alt=""></p><p><strong>缺点</strong></p><ul><li>一致性哈希算法的<strong>数据倾斜</strong>问题</li></ul><p>Hash环的数据倾斜问题</p><p>一致性Hash算法在服务<strong>节点太少时</strong>，容易因为节点分布不均匀而造成<strong>数据倾斜</strong>（被缓存的对象大部分集中缓存在某一台服务器上）问题，</p><p>例如系统中只有两台服务器：</p><p><img src="'+b+'" alt=""></p><blockquote><p>小总结</p></blockquote><p>为了在节点数目发生改变时尽可能少的迁移数据</p><p>将所有的存储节点排列在收尾相接的Hash环上，每个key在计算Hash后会<code>顺时针</code>找到临近的存储节点存放。</p><p>而当有节点加入或退出时仅影响该节点在Hash环上<code>顺时针相邻的后续节点</code>。</p><p><strong>优点</strong></p><p>加入和删除节点只影响哈希环中顺时针方向的相邻的节点，对其他节点无影响。</p><p>**缺点 **</p><p>数据的分布和节点的位置有关，因为这些节点不是均匀的分布在哈希环上的，所以数据在进行存储时达不到均匀分布的效果。</p><h4 id="哈希槽分区" tabindex="-1"><a class="header-anchor" href="#哈希槽分区" aria-hidden="true">#</a> 哈希槽分区</h4><p><strong>是什么</strong></p><p>1 为什么出现</p><p><img src="'+g+'" alt=""></p><p>哈希槽实质就是一个数组，数组[0,2^14 -1]形成hash slot空间。</p><p>2 能干什么</p><p>解决均匀分配的问题，<strong>在数据和节点之间又加入了一层，把这层称为哈希槽（slot），用于管理数据和节点之间的关系</strong>，现在就相当于节点上放的是槽，槽里放的是数据。</p><p><img src="'+h+'" alt=""></p><p>槽解决的是粒度问题，相当于把粒度变大了，这样便于数据移动。</p><p>哈希解决的是映射问题，使用key的哈希值来计算所在的槽，便于数据分配。</p><p>3 多少个hash槽</p><p>一个集群只能有16384个槽，编号0-16383（0-2^14-1）。这些槽会分配给集群中的所有主节点，分配策略没有要求。可以指定哪些编号的槽分配给哪个主节点。集群会记录节点和槽的对应关系。解决了节点和槽的关系后，接下来就需要对key求哈希值，然后对16384取余，余数是几key就落入对应的槽里。slot = CRC16(key) % 16384。以槽为单位移动数据，因为槽的数目是固定的，处理起来比较容易，这样数据移动问题就解决了。</p><hr><h4 id="哈希槽计算" tabindex="-1"><a class="header-anchor" href="#哈希槽计算" aria-hidden="true">#</a> 哈希槽计算</h4><p>Redis 集群中内置了 16384 个哈希槽，redis 会根据节点数量大致均等的将哈希槽映射到不同的节点。当需要在 Redis 集群中放置一个 key-value时，redis 先对 key 使用 crc16 算法算出一个结果，然后把结果对 16384 求余数，这样每个 key 都会对应一个编号在 0-16383 之间的哈希槽，也就是映射到某个节点上。如下代码，key之A 、B在Node2， key之C落在Node3上</p><p><img src="'+k+'" alt=""></p><p><img src="'+_+'" alt=""></p><h3 id="_3主3从redis集群扩缩容配置案例架构说明" tabindex="-1"><a class="header-anchor" href="#_3主3从redis集群扩缩容配置案例架构说明" aria-hidden="true">#</a> 3主3从redis集群扩缩容配置案例架构说明</h3><p><img src="'+f+'" alt="image-20230520170009041"></p><p><img src="'+y+'" alt="image-20230520165927974"></p><p><img src="'+x+'" alt="image-20230520171132505"></p><p><img src="'+q+'" alt="image-20230520173325671"></p><p><img src="'+I+'" alt="image-20230520173243401"></p><p><img src="'+H+'" alt="image-20230520173733053"></p><p><img src="'+P+'" alt="image-20230520163905792"></p><p><img src="'+N+'" alt="image-20230520165220817"></p><h3 id="开打步骤" tabindex="-1"><a class="header-anchor" href="#开打步骤" aria-hidden="true">#</a> 开打步骤</h3><h4 id="_3主3从redis集群配置" tabindex="-1"><a class="header-anchor" href="#_3主3从redis集群配置" aria-hidden="true">#</a> 3主3从redis集群配置</h4><p><strong>关闭防火墙+启动docker后台服务</strong></p><p><img src="'+D+`" alt=""></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl start <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>新建6个docker容器redis实例</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> redis-node-1 <span class="token parameter variable">--net</span> <span class="token function">host</span> <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token parameter variable">-v</span> /data/redis/share/redis-node-1:/data redis:6.0.8 --cluster-enabled <span class="token function">yes</span> <span class="token parameter variable">--appendonly</span> <span class="token function">yes</span> <span class="token parameter variable">--port</span> <span class="token number">6381</span>
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> redis-node-2 <span class="token parameter variable">--net</span> <span class="token function">host</span> <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token parameter variable">-v</span> /data/redis/share/redis-node-2:/data redis:6.0.8 --cluster-enabled <span class="token function">yes</span> <span class="token parameter variable">--appendonly</span> <span class="token function">yes</span> <span class="token parameter variable">--port</span> <span class="token number">6382</span>
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> redis-node-3 <span class="token parameter variable">--net</span> <span class="token function">host</span> <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token parameter variable">-v</span> /data/redis/share/redis-node-3:/data redis:6.0.8 --cluster-enabled <span class="token function">yes</span> <span class="token parameter variable">--appendonly</span> <span class="token function">yes</span> <span class="token parameter variable">--port</span> <span class="token number">6383</span>
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> redis-node-4 <span class="token parameter variable">--net</span> <span class="token function">host</span> <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token parameter variable">-v</span> /data/redis/share/redis-node-4:/data redis:6.0.8 --cluster-enabled <span class="token function">yes</span> <span class="token parameter variable">--appendonly</span> <span class="token function">yes</span> <span class="token parameter variable">--port</span> <span class="token number">6384</span>
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> redis-node-5 <span class="token parameter variable">--net</span> <span class="token function">host</span> <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token parameter variable">-v</span> /data/redis/share/redis-node-5:/data redis:6.0.8 --cluster-enabled <span class="token function">yes</span> <span class="token parameter variable">--appendonly</span> <span class="token function">yes</span> <span class="token parameter variable">--port</span> <span class="token number">6385</span>
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> redis-node-6 <span class="token parameter variable">--net</span> <span class="token function">host</span> <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token parameter variable">-v</span> /data/redis/share/redis-node-6:/data redis:6.0.8 --cluster-enabled <span class="token function">yes</span> <span class="token parameter variable">--appendonly</span> <span class="token function">yes</span> <span class="token parameter variable">--port</span> <span class="token number">6386</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+A+'" alt=""></p><p><img src="'+O+`" alt=""></p><p>步骤分布解释</p><ul><li><p>docker run：创建并运行docker容器</p></li><li><p>--name redis-node-6：容器名字</p></li><li><p>--net host：使用宿主机的IP和端口</p></li><li><p>--privileged=true：获取宿主机root用户权限</p></li><li><p>-v /data/redis/share/redis-node-6:/data：容器卷，宿主机地址:docker内部地址</p></li><li><p>redis:6.0.8：redis镜像和版本号</p></li><li><p>--cluster-enabled yes：开启redis集群</p></li><li><p>--appendonly yes：开启持久化</p></li><li><p>--port 6386：redis端口号</p></li></ul><hr><p><strong>进入容器redis-node-1并为6台机器构建集群关系</strong></p><p>进入容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> redis-node-1 /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>构建主从关系</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>//注意，进入docker容器后才能执行一下命令，且注意自己的真实IP地址

redis-cli <span class="token parameter variable">--cluster</span> create <span class="token number">192.168</span>.111.147:6381 <span class="token number">192.168</span>.111.147:6382 <span class="token number">192.168</span>.111.147:6383 <span class="token number">192.168</span>.111.147:6384 <span class="token number">192.168</span>.111.147:6385 <span class="token number">192.168</span>.111.147:6386 --cluster-replicas <span class="token number">1</span>

--cluster-replicas <span class="token number">1</span> 表示为每个master创建一个slave节点
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+C+'" alt=""></p><p><img src="'+R+'" alt=""></p><p><img src="'+w+'" alt=""></p><p><img src="'+B+'" alt=""></p><p>一切OK的话，3主3从搞定</p><hr><p><strong>连接进入6381作为切入点，查看集群状态</strong></p><p>连接进入6381作为切入点，查看节点状态</p><p><img src="'+E+'" alt=""></p><p><img src="'+S+`" alt=""></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>cluster info
cluster nodes
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="主从容错切换迁移案例" tabindex="-1"><a class="header-anchor" href="#主从容错切换迁移案例" aria-hidden="true">#</a> 主从容错切换迁移案例</h4><ul><li>数据读写存储</li></ul><ol><li><p>启动6机构成的集群并通过exec进入</p></li><li><p>对6381新增两个key</p></li><li><p>防止路由失败加参数-c并新增两个key</p></li></ol><p><img src="`+T+'" alt=""></p><p>加入参数-c，优化路由</p><p><img src="'+L+`" alt=""></p><ol start="4"><li>查看集群信息</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-cli <span class="token parameter variable">--cluster</span> check <span class="token number">192.168</span>.111.147:6381
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+M+'" alt=""></p><p><img src="'+X+'" alt=""></p><ul><li>容错切换迁移</li></ul><ol><li>主6381和从机切换，先停止主机6381</li></ol><p>6381主机停了，对应的真实从机上位</p><p>6381作为1号主机分配的从机以实际情况为准，具体是几号机器就是几号</p><ol start="2"><li>再次查看集群信息</li></ol><p><img src="'+j+'" alt=""></p><p>6381宕机了，6385上位成为了新的master。</p><p><strong>备注：本次脑图笔记6381为主下面挂从6385。</strong></p><p><strong>每次案例下面挂的从机以实际情况为准，具体是几号机器就是几号</strong></p><ol start="3"><li>先还原之前的3主3从</li></ol><p><img src="'+Y+'" alt=""></p><p>中间需要等待一会儿，docker集群重新响应。</p><p>先启动6381</p><p><img src="'+z+`" alt=""></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> start redis-node-1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>再停6385</p><p><img src="`+F+`" alt=""></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> stop redis-node-5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>再启6385</p><p><img src="`+G+`" alt=""></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> stop redis-node-5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>主从机器分配情况以实际情况为准</p><ul><li>查看集群状态</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-cli <span class="token parameter variable">--cluster</span> check 自己IP:6381
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+K+`" alt=""></p><h4 id="主从扩容案例" tabindex="-1"><a class="header-anchor" href="#主从扩容案例" aria-hidden="true">#</a> 主从扩容案例</h4><ol><li>新建6387、6388两个节点+新建后启动+查看是否8节点</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> redis-node-7 <span class="token parameter variable">--net</span> <span class="token function">host</span> <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token parameter variable">-v</span> /data/redis/share/redis-node-7:/data redis:6.0.8 --cluster-enabled <span class="token function">yes</span> <span class="token parameter variable">--appendonly</span> <span class="token function">yes</span> <span class="token parameter variable">--port</span> <span class="token number">6387</span>

<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> redis-node-8 <span class="token parameter variable">--net</span> <span class="token function">host</span> <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token parameter variable">-v</span> /data/redis/share/redis-node-8:/data redis:6.0.8 --cluster-enabled <span class="token function">yes</span> <span class="token parameter variable">--appendonly</span> <span class="token function">yes</span> <span class="token parameter variable">--port</span> <span class="token number">6388</span>

<span class="token function">docker</span> <span class="token function">ps</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>进去6387容器实例内部</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> redis-node-7 /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>将新增的6387接地那（空槽位）作为master节点加入原集群</li></ol><p>将新增的6387作为master节点加入集群</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-cli <span class="token parameter variable">--cluster</span> add-node 自己实际IP地址:6387 自己实际IP地址:6381
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>6387 就是将要作为master新增节点</p><p>6381 就是原来集群节点里面的领路人，相当于6387拜拜6381的码头从而找到组织加入集群</p><p><img src="`+Q+'" alt=""></p><p><img src="'+V+`" alt=""></p><ol start="4"><li>检查集群情况第一次</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-cli <span class="token parameter variable">--cluster</span> check 真实ip地址:6381
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+W+'" alt=""></p><p><img src="'+U+`" alt=""></p><ol start="5"><li>重新分派槽位</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 重新分派槽号</span>
<span class="token comment"># 命令:redis-cli --cluster reshard IP地址:端口号</span>
redis-cli <span class="token parameter variable">--cluster</span> reshard <span class="token number">192.168</span>.111.147:6381
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+J+'" alt=""></p><p><img src="'+Z+`" alt=""></p><ol start="6"><li>检查集群情况第2次</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-cli <span class="token parameter variable">--cluster</span> check 真实ip地址:6381
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+$+'" alt=""></p><p><img src="'+ss+'" alt=""></p><p>槽号分派说明</p><p>为什么6387是3个新的区间，以前的还是连续？</p><p>重新分配成本太高，所以前3家各自匀出来一部分，从6381/6382/6383三个旧节点分别匀出1364个坑位给新节点6387</p><p><img src="'+as+`" alt=""></p><ol start="7"><li>为主节点6387分配从节点6388</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 命令：redis-cli --cluster add-node ip:新slave端口 ip:新master端口 --cluster-slave --cluster-master-id 新主机节点ID</span>

redis-cli <span class="token parameter variable">--cluster</span> add-node <span class="token number">192.168</span>.111.147:6388 <span class="token number">192.168</span>.111.147:6387 --cluster-slave --cluster-master-id e4781f644d4a4e4d4b4d107157b9ba8144631451-------这个是6387的编号，按照自己实际情况
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+es+'" alt=""></p><p><img src="'+ns+`" alt=""></p><ol start="8"><li>检查集群情况第3次</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-cli <span class="token parameter variable">--cluster</span> check <span class="token number">192.168</span>.111.147:6382
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+is+'" alt=""></p><p><img src="'+ls+`" alt=""></p><h4 id="主从缩容案例" tabindex="-1"><a class="header-anchor" href="#主从缩容案例" aria-hidden="true">#</a> 主从缩容案例</h4><ol><li><p>目的：6387和6388下线</p></li><li><p>检查集群情况1获得6388的节点ID</p></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-cli <span class="token parameter variable">--cluster</span> check <span class="token number">192.168</span>.111.147:6382
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+rs+`" alt=""></p><ol start="3"><li>将6388删除从集群中将4号从节点6388删除</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 命令：redis-cli --cluster del-node ip:从机端口 从机6388节点ID</span>

redis-cli <span class="token parameter variable">--cluster</span> del-node <span class="token number">192.168</span>.111.147:6388 5d149074b7e57b802287d1797a874ed7a1a284a8
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+ps+`" alt=""></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-cli <span class="token parameter variable">--cluster</span> check <span class="token number">192.168</span>.111.147:6382
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>检查一下发现，6388被删除了，只剩下7台机器了。</p><p><img src="`+ts+`" alt=""></p><ol start="4"><li>将6387的槽位情况，重新分配，本例将清出来的槽位都给6381</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-cli <span class="token parameter variable">--cluster</span> reshard <span class="token number">192.168</span>.111.147:6381
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+ds+'" alt=""></p><p><img src="'+cs+'" alt=""></p><p><img src="'+os+`" alt=""></p><ol start="5"><li>检查集群情况第二次</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-cli <span class="token parameter variable">--cluster</span> check <span class="token number">192.168</span>.111.147:6381

<span class="token number">4096</span>个槽位都指给6381，它变成了8192个槽位，相当于全部都给6381了，不然要输入3次，一锅端
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+ms+`" alt=""></p><ol start="6"><li>将6387删除</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 命令：redis-cli --cluster del-node ip:端口 6387节点ID</span>

redis-cli <span class="token parameter variable">--cluster</span> del-node <span class="token number">192.168</span>.111.147:6387 e4781f644d4a4e4d4b4d107157b9ba8144631451
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+vs+`" alt=""></p><ol start="7"><li>检查集群情况第三次</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-cli <span class="token parameter variable">--cluster</span> check <span class="token number">192.168</span>.111.147:6381
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+us+'" alt=""></p>',247),hs=[gs];function ks(_s,fs){return a(),e("div",null,hs)}const qs=s(bs,[["render",ks],["__file","1.Docker复杂安装详说.html.vue"]]);export{qs as default};
