import{_ as i}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as t,c as p,d as a,e,b as l,a as o,r}from"./app.9b10ba0a.js";const d="/assets/2023-03-29-00-08-13-image.1f89392c.png",c="/assets/2023-03-29-00-09-18-image.b8ea8cec.png",n="/assets/2023-03-29-00-10-47-image.6432abd9.png",h="/assets/2023-03-29-00-16-35-image.4d09a230.png",m="/assets/2023-03-29-00-17-59-image.8ad31299.png",g="/assets/2023-03-29-16-57-01-image.0bab36d3.png",u="/assets/2023-03-29-17-00-29-image.4b59b6df.png",b="/assets/2023-03-29-17-03-04-image.f7ccbf8a.png",_="/assets/2023-03-29-17-09-03-image.37ab28b0.png",f="/assets/2023-03-29-17-10-33-image.7d6c2830.png",k="/assets/2023-03-29-17-10-52-image.216f5ca9.png",q="/assets/2023-03-29-17-19-35-image.e36f54ff.png",O="/assets/2023-03-29-17-20-08-image.dc6938b8.png",x="/assets/2023-03-29-17-20-49-image.061c8590.png",A="/assets/2023-03-29-17-21-12-image.71f95cf7.png",F="/assets/2023-03-29-17-23-37-image.4d3c5ea8.png",R="/assets/2023-03-29-17-25-20-image.543538be.png",y="/assets/2023-03-29-17-28-36-image.4b5c9a21.png",v="/assets/2023-03-29-17-30-46-image.74a1b3bc.png",B="/assets/2023-03-29-17-30-55-image.a8a3f1c9.png",D="/assets/2023-03-29-17-35-05-image.7fa029f2.png",S="/assets/2023-03-29-17-36-37-image.a26a2b6d.png",w="/assets/2023-03-29-17-37-25-image.448f9218.png",N="/assets/2023-03-29-17-37-33-image.caeb1e4f.png",E="/assets/2023-03-29-17-38-40-image.e5307954.png",V="/assets/2023-03-29-17-38-46-image.4c5dea24.png",C="/assets/2023-03-29-18-02-20-image.13e0012a.png",I="/assets/2023-03-29-18-04-23-image.d939cf67.png",L="/assets/2023-03-29-18-01-33-image.d4218d0a.png",T="/assets/2023-03-29-18-01-50-image.2b3b1b5f.png",P="/assets/2023-03-29-18-08-43-image.727e28b1.png",G="/assets/2023-03-29-18-09-46-image.de7bf042.png",M="/assets/2023-03-29-18-10-22-image.3b42d01a.png",H="/assets/2023-03-29-18-11-12-image.57f699f4.png",K="/assets/2023-03-29-18-14-46-image.35617aa5.png",U="/assets/2023-03-29-18-17-23-image.289a96aa.png",Y="/assets/2023-03-29-18-18-01-image.2385195d.png",W="/assets/2023-03-29-18-18-26-image.3dfcec8d.png",Z="/assets/2023-03-29-18-18-44-image.4ba3421f.png",j="/assets/2023-03-29-18-19-28-image.26e9c63f.png",z="/assets/2023-03-29-22-09-05-image.31aa995d.png",J="/assets/2023-03-29-22-13-34-image.b2fdc80c.png",Q="/assets/2023-03-29-22-14-25-image.fa699be4.png",X="/assets/2023-03-29-22-19-26-image.6827678f.png",$="/assets/2023-03-29-22-20-01-image.1db9de23.png",aa="/assets/2023-03-29-22-22-35-image.d04367aa.png",ea="/assets/2023-03-29-22-22-47-image.b8918071.png",sa="/assets/2023-03-29-22-23-24-image.04ef0567.png",ia="/assets/2023-03-30-00-24-50-image.2d63a3d1.png",ta="/assets/2023-03-30-15-10-30-image.e6e2ca7c.png",pa="/assets/2023-03-30-15-10-54-image.4ea377b8.png",la="/assets/2023-03-30-15-11-41-image.e30b7eca.png",oa="/assets/2023-03-30-15-12-31-image.6d40a434.png",ra="/assets/2023-03-30-15-28-42-image.0471ffa1.png",da="/assets/2023-03-30-15-28-50-image.44c85725.png",ca="/assets/2023-03-30-15-14-07-image.5036754e.png",na="/assets/2023-03-30-15-46-16-image.451f1fad.png",ha="/assets/2023-03-30-15-48-11-image.2ad03327.png",ma="/assets/2023-03-30-15-48-47-image.8a02826c.png",ga="/assets/2023-03-30-15-49-43-image.63a3ef12.png",ua="/assets/2023-03-30-15-49-49-image.849f6808.png",ba="/assets/2023-03-30-15-51-39-image.6f256af4.png",_a="/assets/2023-03-30-15-52-34-image.0cf53d9a.png",fa="/assets/2023-03-30-15-53-14-image.87a4118e.png",ka="/assets/2023-03-30-15-53-41-image.ab145473.png",qa="/assets/2023-03-30-15-54-17-image.10f8d7a5.png",Oa="/assets/2023-03-30-15-54-26-image.2dec9c00.png",xa="/assets/2023-03-30-15-55-36-image.e56b6c53.png",Aa="/assets/2023-03-30-15-55-44-image.04143d1b.png",Fa="/assets/2023-03-30-16-02-17-image.0a0861e5.png",Ra="/assets/2023-03-30-16-02-29-image.4a1185ec.png",ya="/assets/2023-03-30-16-06-06-image.285a19de.png",va="/assets/2023-03-30-16-22-15-image.071f6594.png",Ba="/assets/2023-03-30-16-22-58-image.c5597464.png",Da="/assets/2023-03-30-16-24-22-image.d7e3f024.png",Sa="/assets/2023-03-30-16-26-20-image.42fd8efa.png",wa="/assets/2023-03-30-16-26-29-image.5a1c24f4.png",Na="/assets/2023-03-30-16-27-23-image.81dc1957.png",Ea="/assets/2023-03-30-16-27-53-image.44eaac89.png",Va="/assets/2023-03-30-16-28-36-image.f537420c.png",Ca="/assets/2023-03-30-16-29-00-image.1525c91b.png",Ia="/assets/2023-03-30-16-30-01-image.2a2d4956.png",La="/assets/2023-03-30-16-30-23-image.6e494995.png",Ta="/assets/2023-03-30-16-31-51-image.9636632f.png",Pa="/assets/2023-03-30-16-32-11-image.9f7371bb.png",Ga="/assets/2023-03-30-17-01-33-image.f546faae.png",Ma="/assets/2023-03-30-17-02-58-image.52e50f32.png",Ha="/assets/2023-03-30-17-03-25-image.d9a115d6.png",Ka="/assets/2023-03-30-17-03-39-image.369f203b.png",Ua="/assets/2023-03-30-17-54-22-image.c0c3fcea.png",Ya="/assets/2023-03-30-17-54-38-image.5e9aaefb.png",Wa={},Za=a("h2",{id:"_01、总体介绍",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_01、总体介绍","aria-hidden":"true"},"#"),e(" 01、总体介绍")],-1),ja=a("h3",{id:"官网地址",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#官网地址","aria-hidden":"true"},"#"),e(" 官网地址")],-1),za={href:"https://redis.io/docs/manual/persistence/",target:"_blank",rel:"noopener noreferrer"},Ja=o('<p><img src="'+d+'" alt=""></p><h3 id="为什么要持久化" tabindex="-1"><a class="header-anchor" href="#为什么要持久化" aria-hidden="true">#</a> 为什么要持久化？</h3><h2 id="_02、持化双雄" tabindex="-1"><a class="header-anchor" href="#_02、持化双雄" aria-hidden="true">#</a> 02、持化双雄</h2><h3 id="一图" tabindex="-1"><a class="header-anchor" href="#一图" aria-hidden="true">#</a> 一图</h3><p><img src="'+c+'" alt=""></p><h3 id="rdb-redis-database" tabindex="-1"><a class="header-anchor" href="#rdb-redis-database" aria-hidden="true">#</a> RDB（Redis DataBase）</h3><h4 id="官网介绍" tabindex="-1"><a class="header-anchor" href="#官网介绍" aria-hidden="true">#</a> 官网介绍</h4><p><img src="'+n+'" alt=""></p><blockquote><p>RDB（Redis 数据库）：RDB 持久性以指定的时间间隔执行数据集的时间点快照。</p></blockquote><h4 id="是什么" tabindex="-1"><a class="header-anchor" href="#是什么" aria-hidden="true">#</a> 是什么？</h4><blockquote><p>在指定的时间间隔，执行数据集的时间点快照</p></blockquote><p>实现类似照片记录效果的方式，就是把某一时刻的数据和状态以文件的形式写到磁盘上，也就是</p><p>快照。这样一来即使故障宕机，快照文件也不会丢失，数据的可靠性也就得到了保证。</p><p>这个快照文件就称为RDB文件(dump.rdb)，其中，RDB就是Redis DataBase的缩写。</p><h4 id="能干嘛" tabindex="-1"><a class="header-anchor" href="#能干嘛" aria-hidden="true">#</a> 能干嘛？</h4><ul><li><p>快照文件直接返回到内存里</p></li><li><p>一锅端</p><ul><li>Redis的数据都在内存中，保存备份时它执行的是<code>全量快照</code>，也就是说，把内存中的所有数据都记录到磁盘中，一锅端</li></ul></li><li><p>RDB保存的是dump.rdb文件</p></li></ul><h4 id="案例演示" tabindex="-1"><a class="header-anchor" href="#案例演示" aria-hidden="true">#</a> 案例演示</h4><h5 id="需求说明" tabindex="-1"><a class="header-anchor" href="#需求说明" aria-hidden="true">#</a> 需求说明</h5><p><img src="'+h+'" alt=""></p><blockquote><p>RDB保存到磁盘的文件叫dump.rdb</p></blockquote><h5 id="配置文件-6-vs-7" tabindex="-1"><a class="header-anchor" href="#配置文件-6-vs-7" aria-hidden="true">#</a> 配置文件（6 VS 7）</h5><ul><li>Redis6.0.16以下</li></ul><p><img src="'+m+'" alt=""></p><p><img src="'+g+'" alt=""></p><ul><li>Redis6.2以及Redis-7.0.0</li></ul><p><img src="'+u+'" alt=""></p><h5 id="操作步骤" tabindex="-1"><a class="header-anchor" href="#操作步骤" aria-hidden="true">#</a> 操作步骤</h5><h6 id="自动触发" tabindex="-1"><a class="header-anchor" href="#自动触发" aria-hidden="true">#</a> 自动触发</h6><ul><li>Redis7版本，按照redis.conf里配置的save &lt; seconds &gt; &lt; changes &gt;</li></ul><p><img src="'+b+'" alt=""></p><ul><li>本次案例5秒2次修改</li></ul><p><img src="'+_+'" alt=""></p><ul><li>修改dump文件保存路径</li></ul><blockquote><p>默认</p></blockquote><p><img src="'+f+'" alt=""></p><blockquote><p>自定义修改的路径且可以进入redis里用CONFIG GET dir获取目录</p></blockquote><p><img src="'+k+'" alt=""></p><blockquote><p>注意点：</p><ul><li><p>如果你修改完以上的配置获取其他配置建议重新启动redis让其生效</p></li><li><p>SHUTDOWN 关机</p></li><li><p>quit 退出</p></li><li><p>然后重新启动</p></li></ul></blockquote><p><img src="'+q+'" alt=""></p><ul><li>修改dump文件名称</li></ul><p><img src="'+O+'" alt=""></p><ul><li>触发备份</li></ul><blockquote><p>🚩第1次种情况</p></blockquote><p><img src="'+x+'" alt=""></p><blockquote><p>第2种情况</p></blockquote><p><img src="'+A+'" alt=""></p><ul><li>如何恢复</li></ul><blockquote><p>将备份文件（dump.rdb）移动到reids安装目录并启动服务即可</p></blockquote><blockquote><p>⚠️备份成功后故意用flushdb清空redis，看看是否可以恢复数据</p></blockquote><p><img src="'+F+'" alt=""></p><p><code>结论</code></p><p>执行flushall/flushdb命令也会产生dump.rdb文件，但是里面是空的，无意义</p><blockquote><p>✅物理恢复，一定服务和备份分机隔离</p></blockquote><p><img src="'+R+'" alt=""></p><p><strong>备注：不可以把备份文件dump.rdb和生产redis服务器放在同一台机器，必须分开各自存储，以防生产机物理损坏后备份文件也挂了。</strong></p><h6 id="手动触发" tabindex="-1"><a class="header-anchor" href="#手动触发" aria-hidden="true">#</a> 手动触发</h6><ul><li><code>save</code>和<code>bgsave</code></li></ul><blockquote><p>Redis提供了两个命令来生成RDB文件，分别是<code>save</code>和<code>bgsave</code></p></blockquote><p><img src="'+y+'" alt=""></p><ul><li>SAVE</li></ul><blockquote><p>在主程序中执行会阻塞当前redis服务器，直到持久化工作完成，执行save命令期间，Redis不能处理其他命令，线上禁止使用</p></blockquote><p><code>案例</code></p><p><img src="'+v+'" alt=""></p><p><img src="'+B+'" alt=""></p><ul><li>BGSAVE(默认)</li></ul><blockquote><p>Redis会在后台异步进行快照操作，<code>不阻塞</code></p><p>快照同时还可以响应客户端请求，该触发方式，会fork一个子进程由子进程复制持久化过程</p></blockquote><blockquote><p>官网说明</p></blockquote><p><img src="'+D+'" alt=""></p><blockquote><p>Redis会使用bgsave对当前内存中的所有数据做快照，这个操作是子进程在后台完成的，这就允许主进程同时可以修改数据。</p></blockquote><blockquote><p>fork是什么？</p></blockquote><ul><li>各位熟悉的</li></ul><p><img src="'+S+'" alt=""></p><ul><li>操作系统角度</li></ul><blockquote><ul><li>在Linux程序中，fork()会产生一个和父进程完全相同的子进程，但子进程在此后多会exec系统调用，出于效率考虑，尽量避免膨胀。</li></ul></blockquote><p><code>案例</code></p><p><img src="'+w+'" alt=""></p><p><img src="'+N+'" alt=""></p><blockquote><p>LASTSAVE</p></blockquote><p>可以通过lastsave命令获取最后一次成功执行快照的时间</p><p><code>案例</code></p><p><img src="'+E+'" alt=""></p><p><img src="'+V+'" alt=""></p><h4 id="优势" tabindex="-1"><a class="header-anchor" href="#优势" aria-hidden="true">#</a> 优势</h4><ol><li>官网说明</li></ol><p><img src="'+C+'" alt=""></p><p><img src="'+I+'" alt=""></p><ol start="2"><li>小总结</li></ol><ul><li><p>适合大规模的数据恢复</p></li><li><p>按照业务定时备份</p></li><li><p>对数据完整性和一致性要求不高</p></li><li><p>RDB文件在内存中的加载速度要比AOF快的多</p></li></ul><h4 id="劣势" tabindex="-1"><a class="header-anchor" href="#劣势" aria-hidden="true">#</a> 劣势</h4><ol><li>官网说明</li></ol><p><img src="'+L+'" alt=""></p><p><img src="'+T+'" alt=""></p><ol start="2"><li>小总结</li></ol><ul><li><p>在一定间隔使劲做一次备份，所以如果redis意外down掉的话，就会丢失从当前至最后一次快照期间的数据，<code>快照之间的数据会丢失</code></p></li><li><p>内存数据的全量同步，如果数据量太大会导致I/O严重影响服务器性能</p></li><li><p>RDB依赖于主进程的fork，在更大的数据集中，这可能会导致服务请求的瞬间延迟。fork的时候内存中的数据被克隆了一份，大致2倍的膨胀性，需要考虑</p></li></ul><ol start="3"><li>数据丢失案例</li></ol><ul><li>正常登入数据</li></ul><p><img src="'+P+'" alt=""></p><ul><li>kill -9故意模拟意外down机</li></ul><p><img src="'+G+'" alt=""></p><ul><li>redis重启恢复，查看数据是否丢失</li></ul><p><img src="'+M+'" alt=""></p><h4 id="如何检查修复dump-rdb文件" tabindex="-1"><a class="header-anchor" href="#如何检查修复dump-rdb文件" aria-hidden="true">#</a> 如何检查修复dump.rdb文件</h4><p><img src="'+H+'" alt=""></p><h4 id="哪些情况会触发rdb快照" tabindex="-1"><a class="header-anchor" href="#哪些情况会触发rdb快照" aria-hidden="true">#</a> 哪些情况会触发RDB快照</h4><ul><li><p>配置文件中默认的快照配置</p></li><li><p>手动save/bgsave命令</p></li><li><p>执行flushdb/flushall命令也会产生dump.rdb文件，但里面是空的，没有意义</p></li><li><p>执行shutdown且没有设置开启AOF持久化</p></li><li><p>主从复制时，主节点自动触发</p></li></ul><h4 id="如何禁用快照" tabindex="-1"><a class="header-anchor" href="#如何禁用快照" aria-hidden="true">#</a> 如何禁用快照</h4><ul><li><p>动态所有停止RDB保存规则的方法：<code>redis-cli config set save &quot;&quot;</code></p></li><li><p>快照禁用</p></li></ul><p><img src="'+K+'" alt=""></p><h4 id="rdb优化配置项详解" tabindex="-1"><a class="header-anchor" href="#rdb优化配置项详解" aria-hidden="true">#</a> RDB优化配置项详解</h4><blockquote><p>配置文件SNAPSHOTTING模块</p></blockquote><ul><li><p>save &lt; seconds &gt; &lt; changes &gt;</p></li><li><p>dirfilename</p></li><li><p>dir</p></li><li><p>stop-writes-on-bgsave-error 建议为yes</p></li></ul><p><img src="'+U+'" alt=""></p><p><code>默认yes</code></p><p><code>如果配置成no，表示你不在乎数据不一致或者有其他的手段发现和控制这种不一致，那么在快照写入失败时，也能确保redis继续接受新的写请求</code></p><ul><li>rdbcompression    建议为yes</li></ul><p><img src="'+Y+'" alt=""></p><table><thead><tr><th style="text-align:center;">默认yes</th></tr></thead><tbody><tr><td style="text-align:center;">对于存储到磁盘中的快照，可以设置是否进行压缩存储。如果是的话，redis会采用LZF算法进行压缩。<br>如果你不想消耗CPU来进行压缩的话，可以设置为关闭此功能</td></tr></tbody></table><ul><li>rdbchecksum    建议为yes</li></ul><p><img src="'+W+'" alt=""></p><table><thead><tr><th style="text-align:center;">默认yes</th></tr></thead><tbody><tr><td style="text-align:center;">在存储快照后，还可以让redis使用CRC64算法来进行数据校验，但是这样做会增加大约10%的性能消耗，如果希望获取到最大的性能提升，可以关闭此功能</td></tr></tbody></table><ul><li>rdb-del-sync-files    默认即可</li></ul><p><img src="'+Z+'" alt=""></p><p><code>rdb-del-sync-files：在没有持久性的情况下删除复制中使用的RDB文件启用。默认情况下no，此选项是禁用的。</code></p><h4 id="小总结" tabindex="-1"><a class="header-anchor" href="#小总结" aria-hidden="true">#</a> 小总结</h4><p><img src="'+j+'" alt=""></p><h3 id="aof-append-only-file" tabindex="-1"><a class="header-anchor" href="#aof-append-only-file" aria-hidden="true">#</a> AOF（Append Only File）</h3><h4 id="官网介绍-1" tabindex="-1"><a class="header-anchor" href="#官网介绍-1" aria-hidden="true">#</a> 官网介绍</h4><p><img src="'+z+'" alt=""></p><h4 id="是什么-1" tabindex="-1"><a class="header-anchor" href="#是什么-1" aria-hidden="true">#</a> 是什么？</h4><ul><li><p><code>以日志的形式来记录每个写操作</code>，将Redis执行过的所有写指令记录下来（读操作不记录），只许追加文件但不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，redis重启的话就根据日志文件的内容讲写操作从前到后执行一次以完成数据的恢复工作</p></li><li><p>默认情况下，redis是没有开启AOF（append Only File）的。</p></li><li><p>开启AOF功能需要设置配置： yes</p></li></ul><h4 id="能干嘛-1" tabindex="-1"><a class="header-anchor" href="#能干嘛-1" aria-hidden="true">#</a> 能干嘛？</h4><p><img src="'+J+'" alt=""></p><h4 id="aof保存的是appendonly-aof文件" tabindex="-1"><a class="header-anchor" href="#aof保存的是appendonly-aof文件" aria-hidden="true">#</a> AOF保存的是appendonly.aof文件</h4><h4 id="aof持久化工程流程" tabindex="-1"><a class="header-anchor" href="#aof持久化工程流程" aria-hidden="true">#</a> AOF持久化工程流程</h4><p><img src="'+Q+'" alt=""></p><table><thead><tr><th>1</th><th>Client作为命令的来源，会有多个源头以及源源不断的请求命令。</th></tr></thead><tbody><tr><td>2</td><td>在这些命令到达Redis Server 以后并不是直接写入AOF文件，会将其这些命令先放入AOF缓存中进行保存。这里的AOF缓冲区实际上是内存中的一片区域，存在的目的是当这些命令达到一定量以后再写入磁盘，避免频繁的磁盘IO操作。</td></tr><tr><td>3</td><td>AOF缓冲会根据AOF缓冲区<em><strong>同步文件的三种写回策略</strong></em>将命令写入磁盘上的AOF文件。</td></tr><tr><td>4</td><td>随着写入AOF内容的增加为避免文件膨胀，会根据规则进行命令的合并(又称<em><strong>AOF重写)</strong></em>，从而起到AOF文件压缩的目的。</td></tr><tr><td>5</td><td>当Redis Server 服务器重启的时候会从AOF文件载入数据。</td></tr></tbody></table><h4 id="aof缓冲区三种写回策略" tabindex="-1"><a class="header-anchor" href="#aof缓冲区三种写回策略" aria-hidden="true">#</a> AOF缓冲区三种写回策略</h4><h5 id="三种写回策略" tabindex="-1"><a class="header-anchor" href="#三种写回策略" aria-hidden="true">#</a> 三种写回策略</h5><p><img src="'+X+'" alt=""></p><ul><li>Always</li></ul><blockquote><p>同步写回，每个写命令执行完立刻同步地将日志写会磁盘</p></blockquote><ul><li>everysec</li></ul><blockquote><p>每秒写回，每个写命令执行完，只是先把日志写到AOF文件的内存缓冲区，每隔1秒把缓冲区中的内容写入磁盘</p></blockquote><ul><li>no</li></ul><blockquote><p>操作系统控制的写回，每个写命令执行完，只是先把日志写到AOF文件的内存缓冲区，由操作系统决定何时将缓冲区内容写会磁盘</p></blockquote><h5 id="三种写回策略小总结" tabindex="-1"><a class="header-anchor" href="#三种写回策略小总结" aria-hidden="true">#</a> 三种写回策略小总结</h5><p><img src="'+$+'" alt=""></p><h4 id="案例演示和说明-aof配置-启动-修复-恢复" tabindex="-1"><a class="header-anchor" href="#案例演示和说明-aof配置-启动-修复-恢复" aria-hidden="true">#</a> 案例演示和说明    AOF配置/启动/修复/恢复</h4><h5 id="配置文件说明-6-vs-7" tabindex="-1"><a class="header-anchor" href="#配置文件说明-6-vs-7" aria-hidden="true">#</a> 配置文件说明（6 VS 7）</h5><h6 id="如何开启aof" tabindex="-1"><a class="header-anchor" href="#如何开启aof" aria-hidden="true">#</a> 如何开启aof</h6><p><img src="'+aa+'" alt=""></p><p><img src="'+ea+'" alt=""></p><h6 id="使用默认写回策略-每秒钟" tabindex="-1"><a class="header-anchor" href="#使用默认写回策略-每秒钟" aria-hidden="true">#</a> 使用默认写回策略，每秒钟</h6><p><img src="'+sa+'" alt=""></p><h6 id="aof文件-保存路径" tabindex="-1"><a class="header-anchor" href="#aof文件-保存路径" aria-hidden="true">#</a> aof文件-保存路径</h6><ul><li>redis6</li></ul><blockquote><p>AOF保存文件的位置和RDB保存文件的位置一样，都是通过redis.conf配置文件的dir配置</p></blockquote><blockquote><p>官方文档</p></blockquote><p><img src="'+ia+'" alt=""></p><ul><li>redis7之后最新</li></ul><p><img src="'+ta+'" alt=""></p><blockquote><p>最终路径</p></blockquote><p><img src="'+pa+'" alt=""></p><p><code>dir + appenddirname</code></p><h6 id="aof文件-保存名称" tabindex="-1"><a class="header-anchor" href="#aof文件-保存名称" aria-hidden="true">#</a> aof文件-保存名称</h6><ul><li>redis6</li></ul><p><img src="'+la+'" alt=""></p><p>有且只有一个</p><ul><li>Redis7.0 Multi Part AOF的设计</li></ul><blockquote><p>官网说明</p></blockquote><p><img src="'+oa+'" alt=""></p><blockquote><p>从1到3</p><ul><li><p>base基本文件</p></li><li><p>incr增量文件</p></li><li><p>mainfest清单文件</p></li></ul></blockquote><p><img src="'+ra+'" alt=""></p><p><img src="'+da+'" alt=""></p><blockquote><p>Redis7.0 config中对应的配置项</p></blockquote><p><img src="'+ca+'" alt=""></p><h5 id="正常恢复" tabindex="-1"><a class="header-anchor" href="#正常恢复" aria-hidden="true">#</a> 正常恢复</h5><ol><li>启动：设置Yes</li></ol><blockquote><p>修改默认的appendonly no，改为<code>yes</code></p></blockquote><ol start="2"><li>写操作继续，生成aof文件到指定的目录</li></ol><p><img src="'+na+'" alt=""></p><ol start="3"><li><p>恢复1：重启redis然后重新加载，结果OK</p></li><li><p>恢复2</p></li></ol><ul><li><p>写入数据到redis，然后flushdb+shutdown服务器</p></li><li><p>新生成了dump和aof</p></li><li><p>备份新生成的aof.bak，然后删除dump/aof再看恢复</p></li></ul><p><img src="'+ha+'" alt=""></p><ul><li>重启redis然后重新加载试试？？？</li></ul><p><img src="'+ma+'" alt=""></p><ul><li>停止服务器，拿出我们的备份修改后再重新启动服务器看看</li></ul><p><img src="'+ga+'" alt=""></p><p><img src="'+ua+'" alt=""></p><h5 id="异常恢复" tabindex="-1"><a class="header-anchor" href="#异常恢复" aria-hidden="true">#</a> 异常恢复</h5><ol><li>故意乱写正常的AOF文件，模拟网络闪断文件写error</li></ol><blockquote><p>vim /myredis/appendonlydir/appendonly.aof.1.incr.aof</p></blockquote><p><img src="'+ba+'" alt=""></p><ol start="2"><li>重启Redis之后就会进行AOF文件的载入，发现启动都不行了，o(╥﹏╥)o</li></ol><p><img src="'+_a+'" alt=""></p><ol start="3"><li>异常修复命令：redis-check-aof --fix进行修复</li></ol><p><img src="'+fa+'" alt=""></p><blockquote><p>redis-check-aof --fix 进行修复</p></blockquote><ol start="4"><li>重启OK</li></ol><p><img src="'+ka+'" alt=""></p><h4 id="优势-1" tabindex="-1"><a class="header-anchor" href="#优势-1" aria-hidden="true">#</a> 优势</h4><p><img src="'+qa+'" alt=""></p><p><img src="'+Oa+'" alt=""></p><blockquote><p>更好的保护数据不丢失、性能高，可做紧急恢复</p></blockquote><h4 id="劣势-1" tabindex="-1"><a class="header-anchor" href="#劣势-1" aria-hidden="true">#</a> 劣势</h4><p><img src="'+xa+'" alt=""></p><p><img src="'+Aa+'" alt=""></p><ul><li><p>相同的数据集的数据而言aof文件远大于rdb文件，恢复速度慢于rdb</p></li><li><p>aof运行效率要慢于rdb，每秒同步策略效率较好，不同步效率和rdb相同</p></li></ul><h4 id="aof重写机制" tabindex="-1"><a class="header-anchor" href="#aof重写机制" aria-hidden="true">#</a> AOF重写机制</h4><h5 id="是什么-2" tabindex="-1"><a class="header-anchor" href="#是什么-2" aria-hidden="true">#</a> 是什么？</h5><ul><li>官网</li></ul><p><img src="'+Fa+'" alt=""></p><p><img src="'+Ra+'" alt=""></p><ul><li>一句话</li></ul><blockquote><p>启动AOF文件的内容压缩，只保留可以恢复数据的最小指令集。</p></blockquote><h5 id="触发机制" tabindex="-1"><a class="header-anchor" href="#触发机制" aria-hidden="true">#</a> 触发机制</h5><ul><li>官网默认配置</li></ul><p><img src="'+ya+'" alt=""></p><p>注意 ，同时满足，且的关系才会触发</p><p>1 根据上次重写后的aof大小，判断当前aof大小是不是增长了1倍</p><p>2 重写时满足的文件大小</p><ul><li><code>自动触发</code></li></ul><p>满足配置文件中的选项后，Redis会记录上次重写时的AOF大小，默认配置是当AOF文件大小是上次rewrite后大小的一倍且文件大于64M时</p><ul><li><code>手动触发</code></li></ul><p>客户端向服务器发送<code>bgrewriteaof</code>命令</p><h5 id="案例说明" tabindex="-1"><a class="header-anchor" href="#案例说明" aria-hidden="true">#</a> 案例说明</h5><ul><li>需求说明</li></ul><p>启动AOF文件的内容压缩，只保留可以恢复数据的最小指令集。</p><p>**举个例子：**比如有个key</p><p>一开始你  set k1 v1</p><p>然后改成  set k1 v2</p><p>最后改成  set k1 v3</p><p>如果不重写，那么这3条语句都在aof文件中，内容占空间不说启动的时候都要执行一遍，共计3条命令；</p><p>但是，我们实际效果只需要set k1 v3这一条，所以，</p><p>开启重写后，只需要保存set k1 v3就可以了只需要保留最后一次修改值，相当于给aof文件瘦身减肥，性能更好。</p><p>AOF重写不仅降低了文件的占用空间，同时更小的AOF也可以更快地被Redis加载。</p><ul><li>需求验证</li></ul><p>启动AOF文件的内容压缩，只保留可以恢复数据的最小指令集。</p><ul><li>步骤</li></ul><ol><li>前期配置准备</li></ol><blockquote><p>开启aof</p></blockquote><p><img src="'+va+'" alt=""></p><blockquote><p>重写峰值修改为  <code>1k</code></p></blockquote><p><img src="'+Ba+'" alt=""></p><blockquote><p>关闭混合，设置为no</p></blockquote><p><img src="'+Da+'" alt=""></p><blockquote><p>删除之前的全部aof和rdb，清除干扰项</p></blockquote><ol start="2"><li>自动触发案例01</li></ol><blockquote><p>完成上述正确配置，重启redis服务器，执行set k1 v1查看aof文件是否正常</p></blockquote><p><img src="'+Sa+'" alt=""></p><p><img src="'+wa+'" alt=""></p><blockquote><p>查看三大配置文件</p></blockquote><ul><li>复习配置项</li></ul><p><img src="'+Na+'" alt=""></p><ul><li>本次操作</li></ul><p><img src="'+Ea+'" alt=""></p><blockquote><p>k1不停111111暴涨</p></blockquote><p><img src="'+Va+'" alt=""></p><blockquote><p>重写触发</p></blockquote><p><img src="'+Ca+'" alt=""></p><ol start="3"><li>手动触发案例02</li></ol><blockquote><p>客户端向服务器发送bgrewriteaof命令</p></blockquote><p><img src="'+Ia+'" alt=""></p><ol start="4"><li>结论</li></ol><p><img src="'+La+'" alt=""></p><h5 id="重写原理" tabindex="-1"><a class="header-anchor" href="#重写原理" aria-hidden="true">#</a> 重写原理</h5><p>1：在重写开始前，redis会创建一个“重写子进程”，这个子进程会读取现有的AOF文件，并将其包含的指令进行分析压缩并写入到一个临时文件中。</p><p>2：与此同时，主进程会将新接收到的写指令一边累积到内存缓冲区中，一边继续写入到原有的AOF文件中，这样做是保证原有的AOF文件的可用性，避免在重写过程中出现意外。</p><p>3：当“重写子进程”完成重写工作后，它会给父进程发一个信号，父进程收到信号后就会将内存中缓存的写指令追加到新AOF文件中</p><p>4：当追加结束后，redis就会用新AOF文件来代替旧AOF文件，之后再有新的写指令，就都会追加到新的AOF文件中</p><p>5：重写aof文件的操作，并没有读取旧的aof文件，而是将整个内存中的数据库内容用命令的方式重写了一个新的aof文件，这点和快照有点类似</p><h4 id="aof游湖配置项详解" tabindex="-1"><a class="header-anchor" href="#aof游湖配置项详解" aria-hidden="true">#</a> AOF游湖配置项详解</h4><blockquote><p>配置文件APPEND ONLY MODE模块</p></blockquote><p><img src="'+Ta+'" alt=""></p><h4 id="小总结-1" tabindex="-1"><a class="header-anchor" href="#小总结-1" aria-hidden="true">#</a> 小总结</h4><p><img src="'+Pa+'" alt=""></p><h3 id="rdb-aof混合持久化" tabindex="-1"><a class="header-anchor" href="#rdb-aof混合持久化" aria-hidden="true">#</a> RDB-AOF混合持久化</h3><h4 id="官网建议" tabindex="-1"><a class="header-anchor" href="#官网建议" aria-hidden="true">#</a> 官网建议</h4><p><img src="'+Ga+'" alt=""></p><h4 id="rdb-vs-aof" tabindex="-1"><a class="header-anchor" href="#rdb-vs-aof" aria-hidden="true">#</a> rdb vs aof</h4><ol><li>问题</li></ol><ul><li><p>可否共存？</p></li><li><p>共存听谁的？</p></li></ul><ol start="2"><li>官方文档</li></ol><p><img src="'+Ma+'" alt=""></p><ol start="3"><li>数据恢复顺序和加载流程</li></ol><p><img src="'+Ha+'" alt=""></p><p><img src="'+Ka+'" alt=""></p><h4 id="你怎么选-用哪个" tabindex="-1"><a class="header-anchor" href="#你怎么选-用哪个" aria-hidden="true">#</a> 你怎么选？用哪个？</h4><ul><li><p>RDB持久化方式能够在指定的时间间隔能对你的数据进行快照存储</p></li><li><p>AOF持久化方式方式记录每次对服务器写的操作，当服务器重启的时候会优先载入AOF文件来恢复原始的数据，AOF命令以redis协议追加保存每次写的操作到文件末尾。</p></li></ul><h4 id="同时开启两种持久化方式" tabindex="-1"><a class="header-anchor" href="#同时开启两种持久化方式" aria-hidden="true">#</a> 同时开启两种持久化方式</h4><ul><li><p>在这种情况下，<code>当redis重启的时候会优先载入AOF文件来恢复原始的数据</code>，因为在通常情况下AOF文件保存数据集要比RDB 文件保存的数据集要完整。</p></li><li><p>RDB的数据不实时，同时使用两者时服务器重启也只会找AOF文件。那要不要只使用AOF呢？<code>作者建议不要</code>，因为RDB更适合用于备份数据库（AOF在不断变化不好备份），留着rdb作为一个万一的手段。</p></li></ul><h4 id="推荐方式" tabindex="-1"><a class="header-anchor" href="#推荐方式" aria-hidden="true">#</a> 推荐方式</h4><blockquote><p>RBD+AOF混合模式</p></blockquote><p>结合了RDB和AOF的优点，既能快速加载又能避免丢失过多的数据。</p><p><img src="'+Ua+'" alt=""></p><p>1 开启混合方式设置</p><p>设置aof-use-rdb-preamble的值为 yes   yes表示开启，设置为no表示禁用</p><p>2 RDB+AOF的混合方式---------&gt; 结论：RDB镜像做全量持久化，AOF做增量持久化</p><p>先使用RDB进行快照存储，然后使用AOF持久化记录所有的写操作，当重写策略满足或手动触发重写的时候，将最新的数据存储为新的RDB记录。这样的话，重启服务的时候会从RDB和AOF两部分恢复数据，既保证了数据完整性，又提高了恢复数据的性能。简单来说：混合持久化方式产生的文件一部分是RDB格式，一部分是AOF格式。<strong>----》AOF包括了RDB头部+AOF混写</strong></p><p><img src="'+Ya+'" alt=""></p><h3 id="纯缓存模式" tabindex="-1"><a class="header-anchor" href="#纯缓存模式" aria-hidden="true">#</a> 纯缓存模式</h3><h4 id="同时关闭rdb-aof" tabindex="-1"><a class="header-anchor" href="#同时关闭rdb-aof" aria-hidden="true">#</a> 同时关闭RDB+AOF</h4><ol><li>save &quot;&quot;</li></ol><ul><li><p>禁用rdb</p></li><li><p>禁用rdb持久化模式下，我们任然可以使用<code>save</code>、<code>bgsave</code>生成rdb文件</p></li></ul><ol start="2"><li>appendonly no</li></ol><ul><li><p>禁用aof</p></li><li><p>禁用aof持久化模式下，我们任然可以使用命令<code>bgrewriteaof</code>生成aof文件</p></li></ul>',306);function Qa(Xa,$a){const s=r("ExternalLinkIcon");return t(),p("div",null,[Za,ja,a("p",null,[e("官网："),a("a",za,[e("https://redis.io/docs/manual/persistence/"),l(s)])]),Ja])}const se=i(Wa,[["render",Qa],["__file","四、Redis持久化.html.vue"]]);export{se as default};
