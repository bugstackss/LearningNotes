import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c as p,d as s,e as n,b as c,a as l,r as t}from"./app.9b10ba0a.js";const i="/assets/33bdb8d2c5933f296b85910259fb5e2e-20230308182006511.700337d5.png",d="/assets/c14d13a2cf213e841186031f3e1c2f9c.691c8231.png",r="/assets/8abc1d37f16cef4c474696681cc8c20c.bd9f55a8.png",u="/assets/62b75590c0cf9ebd7e1fde808c801f5d.18c23b2a.png",k="/assets/9d61c65a3b6f3602c6d150ee34197ff9.1b02136e.png",m="/assets/615b65a7708cd1b57797a803c83bee75.c9d87a1b.png",v="/assets/a999bc9f9627cf34c49152b12b40bbe0.43dca8fb.png",b="/assets/025c85d44ca4939427dc81f77a8bcf85.f1bf9795.png",E="/assets/8c19214dcd659e45facd501a070c8c61.97242045.png",g="/assets/e0b20965a6fdfe9f34e32368ab443806-20230308183940798.37c874c2.png",A="/assets/e90d4a67035a36ef31c56e8a61d556f2.043cab76.png",y="/assets/9c7ce0bbf5adae8f0e46e87ee199862b.3367aa7f.png",T="/assets/ef1261e5591a1649f184e26d1eca071d.7f8d12bd.png",S="/assets/986c4e5d4198da2db49acc90c4953793.009bc862.png",w="/assets/c3e17b09139c51080054d93bf2031f95.f4b43131.png",h="/assets/b9e4a531deba869f9f75f43c5f6b121b.50dfed0a.png",L="/assets/722f175b9046384d82e6fc3fc842c2d9.a16d22f1.png",R="/assets/fba379afd57c42eefa9d73cfa7fc28fe.448cd1a6.png",I="/assets/17fdc6cd37b6b79f6c6afa236df54f8d.1910b13f.png",N="/assets/4227bf92d81b4d58595ef414328adb9c.e3a7eec3.png",_="/assets/a026a124a73830615bf24c2e835776f2.b1ace271.png",O="/assets/67ec23cb87af26abaef296de1315e507.d90a7459.png",q={},B=s("h1",{id:"第13章-事务基础知识",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#第13章-事务基础知识","aria-hidden":"true"},"#"),n(" 第13章_事务基础知识")],-1),f=s("h2",{id:"_1-数据库事务概述",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_1-数据库事务概述","aria-hidden":"true"},"#"),n(" 1. 数据库事务概述")],-1),C=s("p",null,[n("事务是数据库区别于文件系统的重要特性之一，当有了事务就会让数据库始终保持"),s("code",null,"一致性"),n("，同时还能通过事务的机制"),s("code",null,"恢复到某个时间点"),n("，这样可以保证已提交到数据库的修改不会因为系统崩溃而丢失")],-1),M={id:"_1-1-存储引擎支持情况",tabindex:"-1"},D=s("a",{class:"header-anchor",href:"#_1-1-存储引擎支持情况","aria-hidden":"true"},"#",-1),x={href:"https://so.csdn.net/so/search?q=%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"},V=l('<p><code>SHOW ENGINES </code>命令来查看当前 MySQL 支持的存储引擎都有哪些，以及这些存储引擎是否支持事务。</p><p><img src="'+i+`" alt="image-20230111230307559"></p><p>能看出在MysQL中，只有InnoDB是支持事务的</p><h3 id="_1-2-基本概念" tabindex="-1"><a class="header-anchor" href="#_1-2-基本概念" aria-hidden="true">#</a> 1.2 基本概念</h3><p>**事务：**一组逻辑操作单元，使数据从一种状态变换到另一种状态。</p><p><strong>事务处理的原则</strong>：保证所有事务都作为 <code>一个工作单元</code> 来执行，即使出现了故障，都不能改变这种执行方式。当在一个事务中执行多个操作时，要么所有的事务都被提交( <code>commit</code> )，那么这些修改就 <code>永久</code> 地保存下来；要么数据库管理系统将 <code>放弃</code> 所作的所有 <code>修改</code> ，整个事务回滚( <code>rollback</code> )到最初状态。</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>#案例:AA用户给BB用户转账100
update account set money = money - 100 where name = &#39;AA&#39;;

#服务器宕机
update account set money = money + 100 where name = &#39;BB&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-事务的acid特性" tabindex="-1"><a class="header-anchor" href="#_1-3-事务的acid特性" aria-hidden="true">#</a> 1.3 事务的ACID特性</h3><ul><li><p><strong>原子性（atomicity）：</strong></p><p>原子性是指事务是一个不可分割的工作单位，要么全部提交，要么全部失败回滚。即要么转账成功，要么转账失败，是不存在中间的状态。如果无法保证原子性会怎么样?就会出现数据不一致的情形，A账户减去100元，而B账户增加1o0元操作失败，系统将无故丢失100元。</p></li><li><p><strong>一致性（consistency）：</strong></p><p>（国内很多网站上对一致性的阐述有误，具体你可以参考 Wikipedia 对Consistency的阐述）</p><p>根据定义，一致性是指事务执行前后，数据从一个 <code>合法性状态</code> 变换到另外一个 <code>合法性状态</code> 。这种状态是 <code>语义上</code> 的而不是语法上的，跟具体的业务有关。</p></li></ul><p>那什么是合法的数据状态呢？满足 <code>预定的约束</code> 的状态就叫做合法的状态。通俗一点，这状态是由你自己来定义的（比如满足现实世界中的约束）。满足这个状态，数据就是一致的，不满足这个状态，数据就是不一致的！如果事务中的某个操作失败了，系统就会自动撤销当前正在执行的事务，返回到事务操作之前的状态。</p><p>**举例1:**A账户有200元，转账300元出去，此时A账户余额为-100元。你自然就发现了此时数据是不一致的，为什么呢?因为你定义了一个状态，余额这列必须&gt;=0。</p><p><strong>举例2∶</strong>A账户20o元，转账50元给B账户，A账户的钱扣了，但是B账户因为各种意外，余额并没有增加。你也知道此时数据是不一致的，为什么呢?因为你定义了一个状态，要求A+B的总余额必须不变。</p><p><strong>举例3∶</strong>在数据表中我们将<code>姓名</code>字段设置为<code>唯一性约束</code>，这时当事务进行提交或者事务发生回滚的时候，如果数据表中的姓名不唯一，就破坏了事务的一致性要求。</p><ul><li><p><strong>隔离型（isolation）：</strong></p><p>事务的隔离性是指一个事务的执行 <code>不能被其他事务干扰</code> ，即一个事务内部的操作及使用的数据对 <code>并发</code> 的 其他事务是隔离的，并发执行的各个事务之间不能互相干扰。</p><p>如果无法保证隔离性会怎么样？假设A账户有200元，B账户0元。A账户往B账户转账两次，每次金额为50 元，分别在两个事务中执行。如果无法保证隔离性，会出现下面的情形：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>UPDATE accounts SET money = money - 50 WHERE NAME = &#39;AA&#39;;

UPDATE accounts SET money = money + 50 WHERE NAME = &#39;BB&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>根据图解，发现出现了线程安全的问题，从而导致转账前后总金额不一致的情况~</p></blockquote><p><img src="`+d+`" alt="img"></p></li><li><p><strong>持久性（durability）：</strong></p><p>持久性是指一个事务一旦被提交，它对数据库中数据的改变就是 <code>永久性的</code> ，接下来的其他操作和数据库故障不应该对其有任何影响。</p><p>持久性是通过 <code>事务日志</code> 来保证的。日志包括了 <code>重做日志</code> 和 <code>回滚日志</code> 。当我们通过事务对数据进行修改的时候，首先会将数据库的变化信息记录到<code>重做日志</code>中，然后再对数据库中对应的行进行修改。这样做的好处是，即使数据库系统崩溃，数据库重启后也能找到没有更新到数据库系统中的重做日志，重新执行，从而使事务具有持久性。</p><blockquote><p>总结</p><p>ACID是事务的四大特性，在这四个特性中，原子性是基础，隔离性是手段一致性是约束条件，而持久性是 我们的目的。</p><p>数据库事务，其实就是数据库设计者为了方便起见，把需要保证<code>原子性</code>、<code>隔离性</code>、<code>一致性</code>和<code>持久性</code>的一个或多个数据库操作称为一个事务。</p></blockquote></li></ul><h3 id="_1-4-事务的状态" tabindex="-1"><a class="header-anchor" href="#_1-4-事务的状态" aria-hidden="true">#</a> 1.4 事务的状态</h3><p>我们现在知道 <code>事务</code> 是一个抽象的概念，它其实对应着一个或多个数据库操作，MySQL根据这些操作所执行的不同阶段把 <code>事务</code> 大致划分成几个状态：</p><ul><li><p><strong>活动的（active）</strong></p><p>事务对应的数据库操作正在执行过程中时，我们就说该事务处在 <code>活动的</code> 状态。</p></li><li><p><strong>部分提交的（partially committed）</strong></p><p>当事务中的最后一个操作执行完成，但由于操作都在内存中执行，所造成的影响并 <code>没有刷新到磁盘</code>时，我们就说该事务处在 <code>部分提交的</code> 状态。</p></li><li><p><strong>失败的（failed）</strong></p><p>当事务处在 <code>活动的</code> 或者 <code>部分提交的</code> 状态时，可能遇到了某些错误（数据库自身的错误、操作系统错误或者直接断电等）而无法继续执行，或者人为的停止当前事务的执行，我们就说该事务处在 <code>失败的</code> 状态。</p></li><li><p><strong>中止的（aborted）</strong></p><p>如果事务执行了一部分而变为 <code>失败的</code> 状态，那么就需要把已经修改的事务中的操作还原到事务执行前的状态。换句话说，就是要撤销失败事务对当前数据库造成的影响。我们把这个撤销的过程称之为 <code>回滚</code> 。当 <code>回滚</code> 操作执行完毕时，也就是数据库恢复到了执行事务之前的状态，我们就说该事务处在了 <code>中止的</code> 状态。</p><p>举例</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>UPDATE accounts SET money = money - 50 WHERE NAME = &#39;AA&#39;;

UPDATE accounts SET money = money + 50 WHERE NAME = &#39;BB&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>提交的（committed）</strong></p><p>当一个处在 <code>部分提交的</code> 状态的事务将修改过的数据都 <code>同步到磁盘</code> 上之后，我们就可以说该事务处在了 <code>提交的</code> 状态。</p></li></ul><p>一个基本的状态转换图如下所示</p><p><img src="`+r+`" alt="22_1_13_02"></p><p>图中可见，只有当事务处于<code>提交的</code>或者<code>中止的</code>状态时，一个事务的生命周期才算是结束了。对于已经提交的事务来说，该事务对数据库所做的修改将永久生效，对于处于中止状态的事务，该事务对数据库所做的所有修改都会被回滚到没执行该事务之前的状态。</p><h2 id="_2-如何使用事务" tabindex="-1"><a class="header-anchor" href="#_2-如何使用事务" aria-hidden="true">#</a> 2. 如何使用事务</h2><p>使用事务有两种方式，分别为 显式事务 和 隐式事务 。</p><h3 id="_2-1-显式事务" tabindex="-1"><a class="header-anchor" href="#_2-1-显式事务" aria-hidden="true">#</a> 2.1 显式事务</h3><ul><li>步骤1：开启事务：</li><li>步骤2：一系列的DML操作</li><li>…</li><li>步骤3：结束的状态：提交的状态（COMMIT）、中止的状态（ROLLBACK）</li></ul><p><mark>步骤1： <code>START TRANSACTION</code> 或者 <code>BEGIN</code> ，作用是显式开启一个事务</mark></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>mysql&gt; BEGIN;
#或者
mysql&gt; START TRANSACTION;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>START TRANSACTION</code> 语句相较于 BEGIN 特别之处在于，后边能跟随几个 修饰符 ：</p><p>① <code>READ ONLY</code> ：标识当前事务是一个 <code>只读事务</code> ，也就是属于该事务的数据库操作只能读取数据，而不能修改数据。</p><p>② <code>READ WRIT</code>E ：标识当前事务是一个 <code>读写事务</code> ，也就是属于该事务的数据库操作既可以读取数据，也可以修改数据。</p><p>③ <code>WITH CONSISTENT SNAPSHOT</code> ：启动一致性读。</p><p><strong>举例：</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span> <span class="token keyword">READ</span> ONLY<span class="token punctuation">;</span><span class="token comment">#开启一个只读事务</span>
<span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span> <span class="token keyword">READ</span> ONLY<span class="token punctuation">,</span><span class="token keyword">WITH</span> <span class="token keyword">CONSISTENT</span> <span class="token keyword">SNAPSHOT</span><span class="token punctuation">;</span><span class="token comment">#开启只读事多和一致性读</span>
<span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span> <span class="token keyword">READ</span> <span class="token keyword">WRITE</span><span class="token punctuation">,</span><span class="token keyword">WITH</span> <span class="token keyword">CONSISTENT</span> <span class="token keyword">SNAPSHOT</span><span class="token punctuation">;</span><span class="token comment">#开启读写事务和一致性读</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：</p><p><code>READ ONLY</code>和<code>READ WRITE</code>是用来设置所谓的事务<code>访问模式</code>的，就是以只读还是读写的方式来访问数据库中的数据，一个事务的访问模式不能同时既设置为只读的又设置为读写的，所以不能同时把<code>READ ONLY</code>和<code>READ WRITE</code>放到<code>START TRANSACTION</code>语句后边</p><p>如果不显式指定事务的访问模式，那么该事务的访问模式就是<code>读写</code>模式。</p></blockquote><p><mark>步骤2：一系列事务中的操作（主要是DML，不含DDL）</mark></p><p>一系列事务中的操作（主要是DML，不含DDL）</p><p><mark>步骤3：提交事务 或 中止事务（即回滚事务）</mark></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 提交事务。当提交事务后，对数据库的修改是永久性的</span>
<span class="token keyword">COMMIT</span><span class="token punctuation">;</span>
<span class="token comment"># 回滚事务。即撤销正在进行的所有没有提交的修改</span>
<span class="token keyword">ROLLBACK</span><span class="token punctuation">;</span>
<span class="token comment"># 将事务回滚到某个保存点</span>
<span class="token keyword">ROLLBACK</span> <span class="token keyword">TO</span> <span class="token punctuation">[</span><span class="token keyword">SAVEPOINT</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中关于SAVEPOINT相关操作有：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">#在事务中创建保存点，方便后续针对保存点进行回滚。一个事务中可么存在多个保存点</span>
<span class="token keyword">SAVEPOINT</span> 保存点名称<span class="token punctuation">;</span>
<span class="token comment">#删除某个保存点</span>
<span class="token keyword">RELEASE</span> <span class="token keyword">SAVEPOINT</span>保存点名称；
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-隐式事务" tabindex="-1"><a class="header-anchor" href="#_2-2-隐式事务" aria-hidden="true">#</a> 2.2 隐式事务</h3><p>MySQL中有一个系统变量 autocommit ：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>mysql&gt; SHOW VARIABLES LIKE &#39;autocommit&#39;;
+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| autocommit | ON |
+---------------+-------+
1 row in set (0.01 sec)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，如果不显式的使用<code>START TRANSACTION</code>或者<code>BEGIN</code>语句开启一个事务，那么每一条语句都算是一个独立的事务，这种特性称之为事务的<code>自动提交</code>。下边这两条语句就相当于放到两个独立的事务中去执行</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 假设此时autocommit是默认值</span>
<span class="token keyword">UPDATE</span> account <span class="token keyword">SET</span> balance <span class="token operator">=</span> balance <span class="token operator">-</span> <span class="token number">10</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">#此时这条DML操作是一个独立的事务</span>
<span class="token keyword">UPDATE</span> account <span class="token keyword">SET</span> balance <span class="token operator">=</span> balance <span class="token operator">+</span> <span class="token number">10</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">#此时这条DML操作是一个独立的事务</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，如果我们想关闭这种 <code>自动提交</code> 的功能，可以使用下边两种方法之一：</p><ul><li>显式的的使用 <code>START TRANSACTION</code> 或者 <code>BEGIN</code> 语句开启一个事务。这样在本次事务提交或者回滚前会暂时关闭掉自动提交的功能。</li><li>把系统变量 <code>autocommit</code> 的值设置为 <code>OFF</code> ，就像这样：</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SET</span> autocommit <span class="token operator">=</span> <span class="token keyword">OFF</span><span class="token punctuation">;</span>
<span class="token comment">#或</span>
<span class="token keyword">SET</span> autocommit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样的话，写入的多条语句就算是属于同一个事务了，直到我们显式的写出<code>COMMIT</code>语句来把这个事务提交掉，或者显式的写出<code>ROLLBACK</code>语句来把这个事务回滚掉。</p><blockquote><p>补充: Oracle 默认不自动提交，需要手写COMMIT命令，而MySQL 默认自动提交。</p></blockquote><h3 id="_2-3-隐式提交数据的情况" tabindex="-1"><a class="header-anchor" href="#_2-3-隐式提交数据的情况" aria-hidden="true">#</a> 2.3 隐式提交数据的情况</h3><ul><li><strong>数据定义语言</strong>(Data definition language，缩写为:DDL) 数据库对象，指的就是<code>数据库</code>、<code>表</code>、<code>视图</code>、<code>存储过程</code>等结构。当使用<code>CREATE </code>、<code>ALTER</code>、<code>DROP</code>等语句去修改数据库对象时，就会隐式的提交前边语句所属于的事务。即:</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">BEGIN</span><span class="token punctuation">;</span>

<span class="token keyword">SELECT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">#事务中的一条语句</span>
<span class="token keyword">UPDATE</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">#事务中的一条语句</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token comment">#事务中的其它语句</span>

<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 此语句会隐式的提交前边语句所属于的事务</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><strong>隐式使用或修改mysql数据库中的表</strong> 当使用<code>ALTER USER</code>、<code>CREATE USER</code>、<code>DROP USER</code> 、<code>GRANT</code>、<code>RENAME USER</code>、<code>REVOKE</code>、<code>SET PASSWORD</code>等语句时也会隐式的提交前边语句所属于的事务</p></li><li><p><strong>事务控制或关于锁定的语句</strong></p><p>① 当在一个事务还没提交或者回滚时就又使用<code>START TRANSACTION</code>或者<code>BEGIN</code>语句开启了另一个事务时，会<code>隐式的提交</code>上—个事务。即:</p></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">BEGIN</span><span class="token punctuation">;</span>

<span class="token keyword">SELECT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">#事务中的一条语句</span>
<span class="token keyword">UPDATE</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">#事务中的一条语句</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>       <span class="token comment">#事务中的其它语句</span>

<span class="token keyword">BEGIN</span><span class="token punctuation">;</span>   <span class="token comment">#此语句会隐式的提交前面语句所属于的事务</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>② 当前的 <code>autocommit </code>系统变量的值为 <code>OFF </code>，我们手动把它调为 <code>ON </code>时，也会 <code>隐式的提交</code> 前边语句所属的事务。</p><p>③ 使用 <code>LOCK TABLES</code> 、 <code>UNLOCK TABLES</code> 等关于锁定的语句也会 <code>隐式的提交</code> 前边语句所属的事务。</p><ul><li><p><strong>加载数据的语句</strong> 使用<code>LOAD DATA</code>语句来批量往数据库中导入数据时，也会<code>隐式的提交</code>前边语句所属的事务。</p></li><li><p><strong>关于MySQL复制的一些语句</strong> 使用<code>START SLAVE</code>、<code>STOP SLAVE</code>、<code>RESET SLAVE</code>、<code>CHANGE MASTER TO</code>等语句时会<code>隐式的提交</code>前边语句所属的事务。</p></li><li><p><strong>其它的一些语句</strong></p><p>使用<code>ANALYZE TABLE</code>、<code>CACHE INDEX</code>、<code>CHECK TABLE</code>、<code>FLUSH</code>、<code>LOAD INDEX INTO CACHE </code>、<code>OPTIMIZE TABLE</code>、<code>REPAIR TABLE</code>、<code>RESET </code>等语句也会隐式的提交前边语句所属的事务。</p></li></ul><h3 id="_2-4-使用举例1-提交与回滚" tabindex="-1"><a class="header-anchor" href="#_2-4-使用举例1-提交与回滚" aria-hidden="true">#</a> 2.4 使用举例1：提交与回滚</h3><p>我们看下在 MySQL 的默认状态下，下面这个事务最后的处理结果是什么。</p><p>先创建user3表</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">USE</span> atguigudb2<span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> user3<span class="token punctuation">(</span>NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>情况一：</strong></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">BEGIN</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> user3 <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">#此时不会自动提交数据</span>
<span class="token keyword">COMMIT</span><span class="token punctuation">;</span>

<span class="token keyword">BEGIN</span><span class="token punctuation">;</span> <span class="token comment">#开启一个新的事务</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> user3 <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;李四&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">#此时不会自动提交数据</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> user3 <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;李四&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">#受主键的影响，不能添加成功</span>
<span class="token keyword">ROLLBACK</span><span class="token punctuation">;</span>

<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user3<span class="token punctuation">;</span>
<span class="token comment">/*
+--------+
| NAME   |
+--------+
| 张三   |
+--------+
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>情况二：</strong></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">TRUNCATE</span> <span class="token keyword">TABLE</span> user3<span class="token punctuation">;</span>  <span class="token comment">#DDL操作会自动提交数据，不受autocommit变量的影响。</span>

<span class="token keyword">BEGIN</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> user3 <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">#此时不会自动提交数据</span>
<span class="token keyword">COMMIT</span><span class="token punctuation">;</span>

<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> user3 <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;李四&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 默认情况下(即autocommit为true)，DML操作也会自动提交数据。</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> user3 <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;李四&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">#事务的失败的状态</span>

<span class="token keyword">ROLLBACK</span><span class="token punctuation">;</span>

<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user3<span class="token punctuation">;</span>
<span class="token comment">/*
+--------+
| NAME   |
+--------+
| 张三   |
| 李四   |
+--------+
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>情况三：</strong></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">TRUNCATE</span> <span class="token keyword">TABLE</span> user3<span class="token punctuation">;</span>  <span class="token comment">#DDL操作会自动提交数据，不受autocommit变量的影响。</span>

<span class="token keyword">SELECT</span> @<span class="token variable">@completion_type</span><span class="token punctuation">;</span>

<span class="token keyword">SET</span> @<span class="token variable">@completion_type</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token keyword">BEGIN</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> user3 <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">COMMIT</span><span class="token punctuation">;</span>


<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user3<span class="token punctuation">;</span>

<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> user3 <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;李四&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> user3 <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;李四&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token keyword">ROLLBACK</span><span class="token punctuation">;</span>


<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user3<span class="token punctuation">;</span>
<span class="token comment">/*
+--------+
| NAME   |
+--------+
| 张三   |
+--------+
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>能看到相同的SQL代码，只是在事务开始之前设置了<code>SET @@completion_type = 1</code>;结果就和第一次处理的一样，只有一个“张三”。这是为什么呢?</p><p>这里讲解下 MySQL中completion_type参数的作用，实际上这个参数有3种可能:</p><ul><li><p><code>completion=0</code>，这是<code>默认情况</code>。当执行COMNIT的时候会提交事务，在执行下一个事务时，还需要使<code>START TRANSACTION </code>或者<code>BEGIN</code>来开启。</p></li><li><p><code>completion=1</code>，这种情况下，当提交事务后，相当于执行了<code>COMMIT AND CHAIN</code>，也就是开启一个链式事务，即提交事务之后会开启一个相同隔离级别的事务。</p></li><li><p><code>completion=2</code>，这种情况下<code>CONMMIT=COMMIT AND RELEASE</code>，也就是提交后，会自动与服务器断开连接</p></li></ul><blockquote><p>当我们设置 autocommit=0 时，不论是否采用 START TRANSACTION 或者 BEGIN 的方式来开启事务，都需要用 COMMIT 进行提交，让事务生效，使用 ROLLBACK 对事务进行回滚。</p><p>当我们设置 autocommit=1 时，每条 SQL 语句都会自动进行提交。 不过这时，如果你采用 START TRANSACTION 或者 BEGIN 的方式来显式地开启事务，那么这个事务只有在 COMMIT 时才会生效，在 ROLLBACK 时才会回滚。</p></blockquote><p>链事务跳转到4.分类</p><h3 id="_2-5-使用举例2-测试不支持事务的engine" tabindex="-1"><a class="header-anchor" href="#_2-5-使用举例2-测试不支持事务的engine" aria-hidden="true">#</a> 2.5 使用举例2：测试不支持事务的Engine</h3><p>1、创建测试的表</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">USE</span> atguigudb3<span class="token punctuation">;</span>
<span class="token comment">#举例2：体会INNODB 和 MyISAM</span>

<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test1<span class="token punctuation">(</span>i <span class="token keyword">INT</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">INNODB</span><span class="token punctuation">;</span>

<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test2<span class="token punctuation">(</span>i <span class="token keyword">INT</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> MYISAM<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、针对于innodb表,ROLLBACK 会生效~</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">BEGIN</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test1 <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">ROLLBACK</span><span class="token punctuation">;</span>

<span class="token comment"># 执行完，发现表为空，说明回滚成功~</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test1<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、针对于myisam表:不支持事务，<code>BEGIN</code>、<code>ROLLBACK</code> 这些都会失效~</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">BEGIN</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> test2 <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">ROLLBACK</span><span class="token punctuation">;</span>

<span class="token comment"># 执行完，发现表中有上面插入的记录，说明MyISAM不支持事务~</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test2<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-6-使用举例3-savepoint" tabindex="-1"><a class="header-anchor" href="#_2-6-使用举例3-savepoint" aria-hidden="true">#</a> 2.6 使用举例3：SAVEPOINT</h3><p>1、创建测试表，并简单测试</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> user3<span class="token punctuation">(</span>NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span>balance <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">BEGIN</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> user3<span class="token punctuation">(</span>NAME<span class="token punctuation">,</span>balance<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">COMMIT</span><span class="token punctuation">;</span>

<span class="token comment"># 执行完，发现表中有上面插入的记录，说明默认创建的表是InnoDB的~</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user3<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、测试<code>SAVEPOINT</code></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 开启事务</span>
<span class="token keyword">BEGIN</span><span class="token punctuation">;</span>
<span class="token keyword">UPDATE</span> user3 <span class="token keyword">SET</span> balance <span class="token operator">=</span> balance <span class="token operator">-</span> <span class="token number">100</span> <span class="token keyword">WHERE</span> NAME <span class="token operator">=</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">UPDATE</span> user3 <span class="token keyword">SET</span> balance <span class="token operator">=</span> balance <span class="token operator">-</span> <span class="token number">100</span> <span class="token keyword">WHERE</span> NAME <span class="token operator">=</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">;</span>

<span class="token comment">#设置保存点（类似于虚拟机的快照）</span>
<span class="token keyword">SAVEPOINT</span> s1<span class="token punctuation">;</span>

<span class="token keyword">UPDATE</span> user3 <span class="token keyword">SET</span> balance <span class="token operator">=</span> balance <span class="token operator">+</span> <span class="token number">1</span> <span class="token keyword">WHERE</span> NAME <span class="token operator">=</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">;</span>

<span class="token comment">#回滚到保存点</span>
<span class="token keyword">ROLLBACK</span> <span class="token keyword">TO</span> s1<span class="token punctuation">;</span> 

<span class="token comment"># 执行完，发现balance=800，说明回滚到保存点s1成功~</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user3<span class="token punctuation">;</span>

<span class="token comment"># 由于我们还么有commit，所以本次可以 对此次事务彻底回滚~</span>
<span class="token keyword">ROLLBACK</span><span class="token punctuation">;</span> <span class="token comment">#回滚操作</span>

<span class="token comment"># 执行完，发现balance=1000，说明回滚成功~</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user3<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-事务隔离级别" tabindex="-1"><a class="header-anchor" href="#_3-事务隔离级别" aria-hidden="true">#</a> 3. 事务隔离级别</h2><p>MySQL是一个 <code>客户端／服务器</code> 架构的软件，对于同一个服务器来说，可以有若干个客户端与之连接，每个客户端与服务器连接上之后，就可以称为一个会话（ <code>Session</code> ）。每个客户端都可以在自己的会话中向服务器发出请求语句，一个请求语句可能是某个事务的一部分，也就是对于服务器来说可能同时处理多个事务。事务有 <code>隔离性</code> 的特性，理论上在某个事务 <code>对某个数据进行访问</code> 时，其他事务应该进行 <code>排队</code> ，当该事务提交之后，其他事务才可以继续访问这个数据。但是这样对 <code>性能影响太大</code> ，我们既想保持事务的隔离性，又想让服务器在处理访问同一数据的多个事务时 <code>性能尽量高些</code> ，那就看二者如何权衡取舍了。</p><h3 id="_3-1-数据准备" tabindex="-1"><a class="header-anchor" href="#_3-1-数据准备" aria-hidden="true">#</a> 3.1 数据准备</h3><p>我们需要创建一个表：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>CREATE TABLE student (
studentno INT,
name VARCHAR(20),
class varchar(20),
PRIMARY KEY (studentno)
) Engine=InnoDB CHARSET=utf8;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后向这个表里插入一条数据：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>INSERT INTO student VALUES(1, &#39;小谷&#39;, &#39;1班&#39;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在表里的数据就是这样的：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>mysql&gt; select * from student;
+-----------+--------+-------+
| studentno | name | class |
+-----------+--------+-------+
| 1 | 小谷 | 1班 |
+-----------+--------+-------+
1 row in set (0.00 sec)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-数据并发问题" tabindex="-1"><a class="header-anchor" href="#_3-2-数据并发问题" aria-hidden="true">#</a> 3.2 数据并发问题</h3><p>针对事务的隔离性和并发性，我们怎么做取舍呢？先看一下访问相同数据的事务在 不保证串行执行 （也就是执行完一个再执行另一个）的情况下可能会出现哪些问题：</p><h4 id="_1-脏写-dirty-write" tabindex="-1"><a class="header-anchor" href="#_1-脏写-dirty-write" aria-hidden="true">#</a> 1. 脏写（ Dirty Write ）</h4><p>对于两个事务 Session A、Session B，如果事务Session A 修改了 另一个 未提交 事务Session B 修改过 的数据，那就意味着发生了 脏写</p><p><img src="`+u+'" alt="image-20230116212006528"></p><p>Session A和Sessione各开启了一个事务，Session B中的事务先将studentno列为1的记录的name列更新为李四，然后Session A中的事务接着又把这条studentno列为1的记录的name列更新为张三’。如果之后Session B中的事务进行了回滚，那么Session A中的更新也将不复存在，这科现象就称之为脏写。</p><p>这时Session A中的事务就没有效果了，明明把数据更新了，最后也提交事务了，最后看到的数据什么变化也没有。这里大家对事务的隔离级比较了解的话，会发现默认隔离级别下，上面SessionA中的更新语句会处于等待状态，这里只是跟大家说明一下会出现这样现象。</p><h4 id="_2-脏读-dirty-read" tabindex="-1"><a class="header-anchor" href="#_2-脏读-dirty-read" aria-hidden="true">#</a> 2. 脏读（ Dirty Read ）</h4><p>对于两个事务 Session A、Session B，Session A <code>读取</code> 了已经被 Session B <code>更新</code> 但还 <code>没有被提交</code> 的字段。之后若 Session B <code>回滚</code> ，Session A <code>读取</code> 的内容就是 <code>临时且无效</code> 的。</p><p><img src="'+k+'" alt="image-20230116212448090"></p><p>Session A和Session B各开启了一个事务，Session B中的事务先将studentno列为1的记录的name列更新为’张三’，然后Session A中的事务再去查询这条studentno为1的记录，如果读到列name的值为’张三’，而Session B中的事务稍后进行了回滚，那么Session A中的事务相当于读到了一个不存在的数据，这种现象就称之为 <code>脏读</code> 。</p><h4 id="_3-不可重复读-non-repeatable-read" tabindex="-1"><a class="header-anchor" href="#_3-不可重复读-non-repeatable-read" aria-hidden="true">#</a> 3. 不可重复读（ Non-Repeatable Read ）</h4><p>对于两个事务Session A、Session B，Session A <code>读取</code> 了一个字段，然后 Session B <code>更新</code> 了该字段。 之后Session A <code>再次读取</code>同一个字段，<code> 值就不同</code> 了。那就意味着发生了不可重复读。</p><p><img src="'+m+'" alt="image-20230116212712018"></p><p>在Session B中提交了几个 <code>隐式事务</code> （注意是隐式事务，意味着语句结束事务就提交了），这些事务都修改了studentno列为1的记录的列name的值，每次事务提交之后，如果Session A中的事务都可以查看到最新的值，这种现象也被称之为 <code>不可重复读</code> 。</p><h4 id="_4-幻读-phantom" tabindex="-1"><a class="header-anchor" href="#_4-幻读-phantom" aria-hidden="true">#</a> <strong>4. 幻读（ Phantom ）</strong></h4><p>对于两个事务Session A、Session B, Session A 从一个表中 <code>读取</code> 了一个字段, 然后 Session B 在该表中 <code>插入</code> 了一些新的行。 之后, 如果 Session A <code>再次读取</code> 同一个表, 就会多出几行。那就意味着发生了幻读。</p><p><img src="'+v+`" alt="image-20230116213259278"></p><p>Session A中的事务先根据条件 studentno &gt; 0这个条件查询表student，得到了name列值为’张三’的记录；之后Session B中提交了一个 <code>隐式事务 </code>，该事务向表student中插入了一条新记录；之后Session A中的事务再根据相同的条件 studentno &gt; 0查询表student，得到的 结果集中包含Session B中的事务新插入的那条记录，这种现象也被称之为 <code>幻读</code> 。我们把新插入的那些记录称之为<code>幻影记录</code>。</p><p><strong>注意1:</strong></p><p>有的同学会有疑问，那如果Session B中删除了一些符合studentno &gt; 的记录而不是插入新记录，那SessionA之后再根据<code>studentno &gt; 0</code>的条件读取的记录变少了，这种现象算不算幻读呢?这种现象<code>不属于幻读</code>，幻读强调的是一个事务按照某个<code>相同条件多次读取</code>记录时，后读取时读到了之前<code>没有读到的记录</code>。</p><p><strong>注意2:</strong></p><p>那对于先前已经读到的记录，之后又读取不到这种情况，算啥呢? 这相当于对每一条记录都发生了<code>不可重复读</code>的现象。幻读只是重点强调了读取到了之前读取没有获取到的记录</p><h3 id="_3-3-sql中的四种隔离级别" tabindex="-1"><a class="header-anchor" href="#_3-3-sql中的四种隔离级别" aria-hidden="true">#</a> 3.3 SQL中的四种隔离级别</h3><p>上面介绍了几种并发事务执行过程中可能遇到的一些问题，这些问题有轻重缓急之分，我们给这些问题按照严重性来排一下序：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>脏写 &gt; 脏读 &gt; 不可重复读 &gt; 幻读
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们愿意舍弃一部分隔离性来换取一部分性能在这里就体现在：设立一些隔离级别，隔离级别越低，并发问题发生的就越多。 <code>SQL标准</code> 中设立了4个 <code>隔离级别</code> ：</p><ul><li><p><code>READ UNCOMMITTED</code> ：读未提交，在该隔离级别，所有事务都可以看到其他未提交事务的执行结果。不能避免脏读、不可重复读、幻读。</p></li><li><p><code>READ COMMITTED</code> ：读已提交，它满足了隔离的简单定义：一个事务只能看见已经提交事务所做的改变。这是大多数数据库系统的默认隔离级别（但不是MySQL默认的）。可以避免脏读，但不可重复读、幻读问题仍然存在。</p></li><li><p><code>REPEATABLE READ</code> ：可重复读，事务A在读到一条数据之后，此时事务B对该数据进行了修改并提交，那么事务A再读该数据，读到的还是原来的内容。可以避免脏读、不可重复读，但幻读问题仍然存在。这是MySQL的默认隔离级别。</p></li><li><p><code>SERIALIZABLE </code>：可串行化，确保事务可以从一个表中读取相同的行。在这个事务持续期间，禁止其他事务对该表执行插入、更新和删除操作。所有的并发问题都可以避免，但性能十分低下。能避免脏读、不可重复读和幻读。</p></li></ul><p><code>SQL标准</code> 中规定，针对不同的隔离级别，并发事务可以发生不同严重程度的问题，具体情况如下：</p><p><img src="`+b+'" alt="image-20230116213753190"></p><blockquote><p>YES表示没有解决</p></blockquote><p><code>脏写</code> 怎么没涉及到？因为脏写这个问题太严重了，不论是哪种隔离级别，都不允许脏写的情况发生。</p><p>不同的隔离级别有不同的现象，并有不同的锁和并发机制，隔离级别越高，数据库的并发性能就越差，4种事务隔离级别与并发性能的关系如下：</p><p><img src="'+E+`" alt="image-20230116213915702"></p><h3 id="_3-4-mysql支持的四种隔离级别" tabindex="-1"><a class="header-anchor" href="#_3-4-mysql支持的四种隔离级别" aria-hidden="true">#</a> 3.4 MySQL支持的四种隔离级别</h3><p>不同的数据库厂商对SQL标准中规定的四种隔离级别支持不一样。比如,<code>Oracle就只支持READ COMNITTED（默认隔离级别）和SERIALIZABLE隔离级别</code>。MySQL虽然支持4种隔离级别，但与SQL标准中所规定的各级隔离级别允许发生的问题却有些出入，MySQL在REPEATABLE READ隔离级别下，是可以禁止幻读问题的发生的，禁止幻读的原因在第16章讲解。</p><p>MySQL的默认隔离级别为<code>REPEATABLE READ</code>，可以手动修改一下事务的隔离级别</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 查看隔离级别，MySQL 5.7.20的版本之前：</span>
<span class="token keyword">SHOW</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">&#39;tx_isolation&#39;</span><span class="token punctuation">;</span>
<span class="token comment">/*
+---------------+-----------------+
| Variable_name | Value           |
+---------------+-----------------+
| tx_isolation | REPEATABLE-READ  |
+---------------+-----------------+
*/</span>

<span class="token comment"># MySQL 5.7.20版本之后，引入transaction_isolation来替换tx_isolation</span>

<span class="token comment"># 查看隔离级别，MySQL 5.7.20的版本及之后：</span>
<span class="token keyword">SHOW</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">&#39;transaction_isolation&#39;</span><span class="token punctuation">;</span>
<span class="token comment">/*
+-----------------------+-----------------+
| Variable_name         | Value           |
+-----------------------+-----------------+
| transaction_isolation | REPEATABLE-READ |
+-----------------------+-----------------+
*/</span>

<span class="token comment">#或者不同MySQL版本中都可以使用的：</span>
<span class="token keyword">SELECT</span> @<span class="token variable">@transaction_isolation</span><span class="token punctuation">;</span>
<span class="token comment">/*
+-------------------------+
| @@transaction_isolation |
+-------------------------+
| REPEATABLE-READ         |
+-------------------------+
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-5-如何设置事务的隔离级别" tabindex="-1"><a class="header-anchor" href="#_3-5-如何设置事务的隔离级别" aria-hidden="true">#</a> 3.5 如何设置事务的隔离级别</h3><p>通过下面的语句修改事务的隔离级别：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SET [GLOBAL|SESSION] TRANSACTION ISOLATION LEVEL 隔离级别;
#其中，隔离级别格式：
&gt; READ UNCOMMITTED
&gt; READ COMMITTED
&gt; REPEATABLE READ
&gt; SERIALIZABLE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SET [GLOBAL|SESSION] TRANSACTION_ISOLATION = &#39;隔离级别&#39;
#其中，隔离级别格式：
&gt; READ-UNCOMMITTED
&gt; READ-COMMITTED
&gt; REPEATABLE-READ
&gt; SERIALIZABLE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、关于设置时使用GLOBAL或SESSION的影响：</p><p>①使用<code>GLOBAL</code>关键字（在全局范围影响）：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SET</span> <span class="token keyword">GLOBAL</span> <span class="token keyword">TRANSACTION</span> <span class="token keyword">ISOLATION</span> <span class="token keyword">LEVEL</span> <span class="token keyword">SERIALIZABLE</span><span class="token punctuation">;</span>
<span class="token comment">#或</span>
<span class="token keyword">SET</span> <span class="token keyword">GLOBAL</span> TRANSACTION_ISOLATION <span class="token operator">=</span> <span class="token string">&#39;SERIALIZABLE&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>则：</p><ul><li>当前已经存在的会话无效</li><li>只对执行完该语句之后产生的会话起作用</li></ul><p>②使用 SESSION 关键字（在会话范围影响）：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SET</span> <span class="token keyword">SESSION</span> <span class="token keyword">TRANSACTION</span> <span class="token keyword">ISOLATION</span> <span class="token keyword">LEVEL</span> <span class="token keyword">SERIALIZABLE</span><span class="token punctuation">;</span>
<span class="token comment">#或</span>
<span class="token keyword">SET</span> <span class="token keyword">SESSION</span> TRANSACTION_ISOLATION <span class="token operator">=</span> <span class="token string">&#39;SERIALIZABLE&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>则：</p><ul><li>对当前会话的所有后续的事务有效</li><li>如果在事务之间执行，则对后续的事务有效</li><li>该语句可以在已经开启的事务中间执行，但不会影响当前正在执行的事务</li></ul><p>如果在服务器启动时想改变事务的默认隔离级别，可以修改启动参数<code>transaction_isolation</code>的值。比如，在启动服务器时指定了<code>transaction_isolation=SERIALIZABLE</code>,那么事务的默认隔离级别就从原来的<code>REPEATABLE-READ</code>变成了 <code>SERIALIZABLE</code>。</p><blockquote><p>小结：</p><p>数据库规定了多种事务隔离级别，不同隔离级别对应不同的干扰程度，隔离级别越高，数据一致性就越好，但并发性越弱</p></blockquote><p>3、演示global</p><ul><li>开启会话A</li></ul><p><img src="`+g+'" alt="image-20230116223912102"></p><ul><li>再开启另一个会话B</li></ul><p><img src="'+A+'" alt="image-20230116224955767"></p><ul><li>会话A中退出mysql，再登录，会发现设置的隔离级别已经生效了~</li></ul><blockquote><p>msql服务器重启 <code>systemctl restart mysqld</code> 后，隔离级别又重新回到默认~ 毕竟咱们设置的都是在内存级别的~</p></blockquote><p>4、演示session</p><ul><li>会话A中</li></ul><p><img src="'+y+`" alt="image-20230116225823169"></p><ul><li>会话B中，事务隔离级别也变更成了我们设置的那个~</li></ul><h3 id="_3-6-不同隔离级别举例" tabindex="-1"><a class="header-anchor" href="#_3-6-不同隔离级别举例" aria-hidden="true">#</a> 3.6 不同隔离级别举例</h3><p>1、创建数据表，并初始化数据</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">use</span> atguigudb3<span class="token punctuation">;</span>
<span class="token keyword">create</span> <span class="token keyword">table</span> account<span class="token punctuation">(</span>
  id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
  name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  balance <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> account <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token punctuation">,</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;100&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&#39;李四&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、在Xshell中开两个Session，模拟两个事务~</p><p>3、将两个session中的隔离级别都设置成<code>read-uncommitted</code></p><p><img src="`+T+'" alt="image-20230117150951856"></p><p><strong>4、演示1. 读未提交之脏读</strong></p><ul><li>案例一</li></ul><p><img src="'+S+'" alt="image-20230117152005238"></p><p><img src="'+w+'" alt="image-20230117151854807"></p><blockquote><p>之后事务1进行回滚，事务2读取的数据就回到了 100~</p></blockquote><ul><li>案例二</li></ul><p><img src="'+h+`" alt="img"></p><p>5、演示2：读已提交</p><ul><li>环境准备</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">truncate</span> <span class="token keyword">table</span> account<span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.02</span> sec<span class="token punctuation">)</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> account <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token punctuation">,</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;100&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&#39;李四&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>
Records: <span class="token number">2</span>  Duplicates: <span class="token number">0</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> account<span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">----+--------+---------+</span>
<span class="token operator">|</span> id <span class="token operator">|</span> name   <span class="token operator">|</span> balance <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----+--------+---------+</span>
<span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> 张三   <span class="token operator">|</span>     <span class="token number">100</span> <span class="token operator">|</span>
<span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> 李四   <span class="token operator">|</span>       <span class="token number">0</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">----+--------+---------+</span>
<span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>将两个session的隔离级别设置为：<code>read-committed</code></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">set</span> <span class="token keyword">session</span> transaction_isolation <span class="token operator">=</span> <span class="token string">&#39;read-committed&#39;</span><span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> @<span class="token variable">@transaction_isolation</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">-------------------------+</span>
<span class="token operator">|</span> @<span class="token variable">@transaction_isolation</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------------------------+</span>
<span class="token operator">|</span> <span class="token keyword">READ</span><span class="token operator">-</span><span class="token keyword">COMMITTED</span>          <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------------------------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>演示图解</li></ul><p><img src="`+L+`" alt="img"></p><p>6、演示三、可重复读</p><ul><li>将两个session的隔离级别设置为：<code>repeatable-read</code></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">set</span> <span class="token keyword">session</span> transaction_isolation <span class="token operator">=</span> <span class="token string">&#39;repeatable-read&#39;</span><span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>

mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> @<span class="token variable">@transaction_isolation</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">-------------------------+</span>
<span class="token operator">|</span> @<span class="token variable">@transaction_isolation</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------------------------+</span>
<span class="token operator">|</span> <span class="token keyword">REPEATABLE</span><span class="token operator">-</span><span class="token keyword">READ</span>         <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">-------------------------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>演示图解</li></ul><p><img src="`+R+'" alt="img"></p><p>7、演示四、幻读</p><p><img src="'+I+'" alt="image-20230117235449796"></p><p><img src="'+N+'" alt="img"></p><p>这里要灵活的<code>理解读取</code>的意思，第一次select是读取，第二次的insert其实也属于隐式的读取，只不过是在mysql的机制中读取的，插入数据也是要先读取一下有没有主键冲突才能决定是否执行插入。</p><p>幻读，并不是说两次读取获取的结果集不同，幻读侧重的方面是某一次的select操作得到的结果所表征的数据状态无法支撑后续的业务操作。更为具体一些: select.某记录是否存在，不存在，准备插入此记录，但执行insert时发现此记录已存在，无法插入，此时就发生了幻读。</p><p>在RR隔离级别下，step1、step2是会正常执行的，step3则会报错主键冲突，对于事务1的业务来说是执行失败的，这里事务1就是发生了幻读，因为事务1在step1中读取的数据状态并不能支撑后续的业务操作，事务1:“见鬼了，我刚才读到的结果应该可以支持我这样操作才对啊，为什么现在不可以”。事务1不敢相信的又执行了step4，发现和setp1读取的结果是一样的(RR下的MVCc机制)。此时，幻读无疑已经发生，事务1无论读取多少次，都查不到id =3的记录，但它的确无法插入这条他通过读取来认定不存在的记录（此数据已被事务2插入)，对于事务1来说，它幻读了。</p><p>其实RR也是可以避免幻读的，通过对select操作手动加<code>行X锁(独占锁)</code> (SELECT ... FOR UPDATE 这也正是SERIALIZABLE隔离级别下会隐式为你做的事情)。同时，即便当前记录不存在，比如id = 3是不存在的，当前事务也会获得一把记录锁（因为InnoDB的行锁锁定的是索引，故记录实体存在与否没关系，存在就加行X锁，不存在就加间隙锁），其他事务则无法插入此索引的记录，故杜绝了幻读。</p><p>在<code>SERIALIZABLE隔离级别</code>下，step1执行时是会隐式的添加<code>行(X)锁</code>/<code>gap(X)锁</code>的，从而step2会被阻塞，step3会正常执行，待事务1提交后，事务2才能继续执行（主键冲突执行失败)，对于事务1来说业务是正确的，成功的阻塞扼杀了扰乱业务的事务2，对于事务1来说他前期读取的结果是可以支撑其后续业务的。</p><p>所以MySQL的幻读并非什么读取两次返回结果集不同，而是事务在插入事先检测不存在的记录时，惊奇的发现这些数据已经存在了，之前的检测读获取到的数据如同鬼影一般。</p><p>补充：隔离级别是 <code>SERIALIZABLE</code> 时的效果：</p><p><img src="'+_+'" alt="img"></p><h2 id="_4-事务的常见分类" tabindex="-1"><a class="header-anchor" href="#_4-事务的常见分类" aria-hidden="true">#</a> 4. 事务的常见分类</h2><p>从事务理论的角度来看，可以把事务分为以下几种类型：</p><ul><li><p>扁平事务（Flat Transactions）</p></li><li><p>带有保存点的扁平事务（Flat Transactions with Savepoints）</p></li><li><p>链事务（Chained Transactions）</p></li><li><p>嵌套事务（Nested Transactions）</p></li><li><p>分布式事务（Distributed Transactions）</p></li></ul><p>下面简单介绍这几种类型：</p><p>1）<code>扁平事务</code>是事务类型中最简单的一种，但是在实际生产环境中，这可能是使用最频繁的事务，在扁平事务中，所有操作都处于同一层次，其由BEGIN WORK开始，由COMMIT WORK或ROLLBACK WORK结束，其间的操作是原子的，要么都执行，要么都回滚，因此，扁平事务是应用程序成为原子操作的基本组成模块。扁平事务虽然简单，但是在实际环境中使用最为频繁，也正因为其简单，使用频繁，故每个数据库系统都实现了对扁平事务的支持。扁平事务的主要限制是不能提交或者回滚事务的某一部分，或分几个步骤提交。</p><p>扁平事务一般有三种不同的结果：①事务成功完成。在平常应用中约占所有事务的96%。②应用程序要求停止事务。比如应用程序在捕获到异常时会回滚事务，约占事务的3%。③外界因素强制终止事务。如连接超时或连接断开，约占所有事务的1%。</p><p>2）<code>带有保存点的扁平事务</code>除了支持扁平事务支持的操作外，还允许在事务执行过程中回滚到同一事务中较早的一个状态。这是因为某些事务可能在执行过程中出现的错误并不会导致所有的操作都无效，放弃整个事务不合乎要求，开销太大。</p><p><code>保存点（Savepoint）</code>用来通知事务系统应该记住事务当前的状态，以便当之后发生错误时，事务能回到保存点当时的状态。对于扁平的事务来说，隐式的设置了一个保存点，然而在整个事务中，只有这一个保存点，因此，回滚只能会滚到事务开始时的状态。</p><p>3）<code>链事务</code>是指一个事务由多个子事务链式组成，它可以被视为保存点模式的一个变种。带有保存点的扁平事务，当发生系统崩溃时，所有的保存点都将消失，这意味着当进行恢复时，事务需要从开始处重新执行，而不能从最近的一个保存点继续执行。链事务的思想是：在提交一个事务时，释放不需要的数据对象，将必要的处理上下文隐式地传给下一个要开始的事务，前一个子事务的提交操作和下一个子事务的开始操作合并成一个原子操作，这意味着下一个事务将看到上一个事务的结果，就好像在一个事务中进行一样。这样，在提交子事务时就可以释放不需要的数据对象，而不必等到整个事务完成后才释放。其工作方式如下：</p><p><img src="'+O+'" alt="image-20230116230734528"></p><p>链事务与带有保存点的扁平事务的不同之处体现在：</p><p>①带有保存点的扁平事务能回滚到任意正确的保存点，而链事务中的回滚仅限于当前事务，即只能恢复到最近的一个保存点。</p><p>②对于锁的处理，两者也不相同，链事务在执行COMMIT后即释放了当前所持有的锁，而带有保存点的扁平事务不影响迄今为止所持有的锁。</p><p>4）<code>嵌套事务</code>是个层次结构框架，由一个顶层事务（Top-Level Transaction）控制着各个层次的事务，顶层事务之下嵌套的事务被称为子事务（Subtransaction），其控制着每一个局部的变换，子事务本身也可以是嵌套事务。因此，嵌套事务的层次结构可以看成是一棵树。</p><p>5）<code>分布式事务</code>通常是在一个分布式环境下运行的扁平事务，因此，需要根据数据所在位置访问网络中不同节点的数据库资源。例如，一个银行用户从招商银行的账户向工商银行的账户转账1000元，这里需要用到分布式事务，因为不能仅调用某一家银行的数据库就完成任务。</p>',209);function P(U,G){const a=t("ExternalLinkIcon");return o(),p("div",null,[B,f,C,s("h3",M,[D,n(" 1.1 "),s("a",x,[n("存储引擎"),c(a)]),n("支持情况")]),V])}const H=e(q,[["render",P],["__file","第13章_事务基础知识.html.vue"]]);export{H as default};
