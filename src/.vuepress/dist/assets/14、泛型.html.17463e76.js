const e=JSON.parse('{"key":"v-93d168ee","path":"/notes/javacore/java/14%E3%80%81%E6%B3%9B%E5%9E%8B.html","title":"14、泛型","lang":"zh-CN","frontmatter":{"title":"14、泛型","category":["Java"],"tag":["Java"],"sticky":false,"star":false,"article":true,"timeline":true,"description":"01、为什么要有泛型 泛型：标签 1.1、举例 中药店，每个抽屉外面贴着标签; 超市购物架上很多瓶子，每个瓶子装的是什么，有标签。; 1.2、泛型的设计背景 集合容器类在设计阶段/声明阶段不能确定这个容器到底实际存的是什么类型的对象，所以在JDK1.5之前只能把元素类型设计为Object，JDK1.5之后使用泛型来解决。因为这个时候除了元素的类型不确定...","head":[["meta",{"property":"og:url","content":"https://Ragnarokoo.github.io/LearningNotes/notes/javacore/java/14%E3%80%81%E6%B3%9B%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"📚全栈开发学习指南"}],["meta",{"property":"og:title","content":"14、泛型"}],["meta",{"property":"og:description","content":"01、为什么要有泛型 泛型：标签 1.1、举例 中药店，每个抽屉外面贴着标签; 超市购物架上很多瓶子，每个瓶子装的是什么，有标签。; 1.2、泛型的设计背景 集合容器类在设计阶段/声明阶段不能确定这个容器到底实际存的是什么类型的对象，所以在JDK1.5之前只能把元素类型设计为Object，JDK1.5之后使用泛型来解决。因为这个时候除了元素的类型不确定..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://Ragnarokoo.github.io/LearningNotes/"}],["meta",{"property":"og:updated_time","content":"2023-05-31T09:16:41.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"14、泛型"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:modified_time","content":"2023-05-31T09:16:41.000Z"}]]},"excerpt":"","headers":[{"level":2,"title":"01、为什么要有泛型","slug":"_01、为什么要有泛型","link":"#_01、为什么要有泛型","children":[{"level":3,"title":"1.1、举例","slug":"_1-1、举例","link":"#_1-1、举例","children":[]},{"level":3,"title":"1.2、泛型的设计背景","slug":"_1-2、泛型的设计背景","link":"#_1-2、泛型的设计背景","children":[]},{"level":3,"title":"1.3、其他说明","slug":"_1-3、其他说明","link":"#_1-3、其他说明","children":[]},{"level":3,"title":"1.4、那么为什么要有泛型呢","slug":"_1-4、那么为什么要有泛型呢","link":"#_1-4、那么为什么要有泛型呢","children":[]}]},{"level":2,"title":"02、在集合中使用泛型","slug":"_02、在集合中使用泛型","link":"#_02、在集合中使用泛型","children":[{"level":3,"title":"2.1、举例","slug":"_2-1、举例","link":"#_2-1、举例","children":[]},{"level":3,"title":"2.2、练习","slug":"_2-2、练习","link":"#_2-2、练习","children":[]}]},{"level":2,"title":"03、自定义泛型结构","slug":"_03、自定义泛型结构","link":"#_03、自定义泛型结构","children":[{"level":3,"title":"3.1、自定义泛型类举例","slug":"_3-1、自定义泛型类举例","link":"#_3-1、自定义泛型类举例","children":[]},{"level":3,"title":"3.2、自定义泛型类泛型接口的注意点","slug":"_3-2、自定义泛型类泛型接口的注意点","link":"#_3-2、自定义泛型类泛型接口的注意点","children":[]},{"level":3,"title":"3.3、自定义泛型方法举例","slug":"_3-3、自定义泛型方法举例","link":"#_3-3、自定义泛型方法举例","children":[]},{"level":3,"title":"3.4、举例泛型类和泛型方法的使用情境","slug":"_3-4、举例泛型类和泛型方法的使用情境","link":"#_3-4、举例泛型类和泛型方法的使用情境","children":[]}]},{"level":2,"title":"04、泛型在继承上的体现【通配符】","slug":"_04、泛型在继承上的体现【通配符】","link":"#_04、泛型在继承上的体现【通配符】","children":[]},{"level":2,"title":"05、通配符的使用","slug":"_05、通配符的使用","link":"#_05、通配符的使用","children":[{"level":3,"title":"5.1、使用通配符后数据的读取和写入要求","slug":"_5-1、使用通配符后数据的读取和写入要求","link":"#_5-1、使用通配符后数据的读取和写入要求","children":[]},{"level":3,"title":"5.2、有限制条件的通配符的使用","slug":"_5-2、有限制条件的通配符的使用","link":"#_5-2、有限制条件的通配符的使用","children":[]}]},{"level":2,"title":"06、泛型应用举例","slug":"_06、泛型应用举例","link":"#_06、泛型应用举例","children":[{"level":3,"title":"6.1、泛型嵌套","slug":"_6-1、泛型嵌套","link":"#_6-1、泛型嵌套","children":[]},{"level":3,"title":"6.2、实际案例","slug":"_6-2、实际案例","link":"#_6-2、实际案例","children":[]}]},{"level":2,"title":"07、自定义泛型类练习","slug":"_07、自定义泛型类练习","link":"#_07、自定义泛型类练习","children":[]}],"git":{"createdTime":1685524601000,"updatedTime":1685524601000,"contributors":[{"name":"kirito","email":"2724964601@qq.com","commits":1}]},"readingTime":{"minutes":20.38,"words":6115},"filePathRelative":"notes/javacore/java/14、泛型.md","localizedDate":"2023年5月31日"}');export{e as data};
