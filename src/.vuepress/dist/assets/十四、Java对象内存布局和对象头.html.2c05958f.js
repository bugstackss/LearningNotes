import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c,d as a,e as n,b as e,a as t,r}from"./app.9b10ba0a.js";const d="/assets/image-20210927225655948.e4a56757.png",l="/assets/image-20210927225734825.4091d929.png",u="/assets/image-20210927225858356.2a9a58fd.png",m="/assets/image-20210927225903931.a90dd5ec.png",h="/assets/image-20210927225919957.4ba5ec24.png",g="/assets/image-20210927230011055.ca7cf3ef.png",i="/assets/image-20210927230137020.8dce9e9d.png",v="/assets/image-20210927230150668.36eaabbc.png",k="/assets/image-20210927230308057.81276a24.png",_="/assets/image-20210927230321279.7bf92a7c.png",b="/assets/image-20210927230415577.20ed1c04.png",j="/assets/image-20210927230442184.736bde8d.png",f="/assets/image-20210927230617433.bb1cac80.png",x="/assets/image-20210927230700348.25c885eb.png",y="/assets/image-20210927230717948.fbea2355.png",w="/assets/image-20210927230743485.01bc8098.png",M="/assets/image-20210927230805766.a1a1daa1.png",C="/assets/image-20210927230808775.7c94d42d.png",I={},O=t('<h2 id="十四、java对象内存布局和对象头" tabindex="-1"><a class="header-anchor" href="#十四、java对象内存布局和对象头" aria-hidden="true">#</a> 十四、Java对象内存布局和对象头</h2><h3 id="_1、对象在堆内存中布局" tabindex="-1"><a class="header-anchor" href="#_1、对象在堆内存中布局" aria-hidden="true">#</a> 1、对象在堆内存中布局</h3><p><img src="'+d+'" alt="image20210927225655948"></p><h4 id="_1、对象在堆内存中的存储布局" tabindex="-1"><a class="header-anchor" href="#_1、对象在堆内存中的存储布局" aria-hidden="true">#</a> 1、对象在堆内存中的存储布局</h4><p><img src="'+l+'" alt="image20210927225734825"></p><p>对象内部结构分为：对象头、实例数据、对齐填充（保证8个字节的倍数）。 对象头分为对象标记（markOop）和类元信息（klassOop），类元信息存储的是指向该对象类元数据（klass）的首地址。</p><h4 id="_2、对象头" tabindex="-1"><a class="header-anchor" href="#_2、对象头" aria-hidden="true">#</a> 2、对象头</h4><h5 id="_1、对象标记mark-word" tabindex="-1"><a class="header-anchor" href="#_1、对象标记mark-word" aria-hidden="true">#</a> 1、对象标记Mark Word</h5><p><img src="'+u+'" alt="image20210927225858356"></p><p><img src="'+m+'" alt="image20210927225903931"></p><p>在64位系统中，Mark Word占了8个字节，类型指针占了8个字节，一共是16个字节</p><p><img src="'+h+'" alt="image20210927225919957"></p><p>默认存储对象的HashCode、分代年龄和锁标志位等信息。这些信息都是与对象自身定义无关的数据，所以MarkWord被设计成一个非固定的数据结构以便在极小的空间内存存储尽量多的数据。它会根据对象的状态复用自己的存储空间，也就是说在运行期间MarkWord里存储的数据会随着锁标志位的变化而变化。</p><h5 id="_2、类元信息-又叫类型指针" tabindex="-1"><a class="header-anchor" href="#_2、类元信息-又叫类型指针" aria-hidden="true">#</a> 2、类元信息(又叫类型指针)</h5><p><img src="'+g+'" alt="image20210927230011055"></p><p>对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。</p><h5 id="_3、对象头多大" tabindex="-1"><a class="header-anchor" href="#_3、对象头多大" aria-hidden="true">#</a> 3、对象头多大</h5><p>在64位系统中，Mark Word占了8个字节，类型指针占了8个字节，一共是16个字节。</p><h4 id="_3、实例数据" tabindex="-1"><a class="header-anchor" href="#_3、实例数据" aria-hidden="true">#</a> 3、实例数据</h4><p>存放类的属性(Field)数据信息，包括父类的属性信息，如果是数组的实例部分还包括数组的长度，这部分内存按4字节对齐。</p><h4 id="_4、对齐填充" tabindex="-1"><a class="header-anchor" href="#_4、对齐填充" aria-hidden="true">#</a> 4、对齐填充</h4><p>虚拟机要求对象起始地址必须是8字节的整数倍。填充数据不是必须存在的，仅仅是为了字节对齐这部分内存按8字节补充对齐。</p>',22),S={href:"http://openjdk.java.net/groups/hotspot/docs/HotSpotGlossary.html",target:"_blank",rel:"noopener noreferrer"},E={href:"http://hg.openjdk.java.net/jdk8u/jdk8u/hotspot/file/89fb452b3688/src/share/vm/oops/oop.hpp",target:"_blank",rel:"noopener noreferrer"},T=t('<p><img src="'+i+'" alt="image20210927230137020"></p><p>_mark字段是mark word，_metadata是类指针klass pointer， 对象头（object header）即是由这两个字段组成，这些术语可以参考Hotspot术语表，</p><p><img src="'+v+'" alt="image20210927230150668"></p><h3 id="_2、markword" tabindex="-1"><a class="header-anchor" href="#_2、markword" aria-hidden="true">#</a> 2、MarkWord</h3><h4 id="_1、oop-hpp" tabindex="-1"><a class="header-anchor" href="#_1、oop-hpp" aria-hidden="true">#</a> 1、oop.hpp</h4><p><img src="'+i+`" alt="image20210927230137020"></p><h4 id="_2、markoop-hpp" tabindex="-1"><a class="header-anchor" href="#_2、markoop-hpp" aria-hidden="true">#</a> 2、markOop.hpp</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>hash： 保存对象的哈希码
age： 保存对象的分代年龄
biased_lock： 偏向锁标识位
lock： 锁状态标识位
JavaThread* ：保存持有偏向锁的线程ID
epoch： 保存偏向时间戳
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+k+'" alt="image20210927230308057"></p><p>markword(64位)分布图，对象布局、GC回收和后面的锁升级就是对象标记MarkWord里面标志位的变化</p><p><img src="'+_+'" alt="image20210927230321279"></p><h3 id="_3、聊聊object-obj-new-object" tabindex="-1"><a class="header-anchor" href="#_3、聊聊object-obj-new-object" aria-hidden="true">#</a> 3、聊聊Object obj = new Object()</h3><h4 id="_1、jol证明" tabindex="-1"><a class="header-anchor" href="#_1、jol证明" aria-hidden="true">#</a> 1、JOL证明</h4>',13),V={href:"http://openjdk.java.net/projects/code-tools/jol/",target:"_blank",rel:"noopener noreferrer"},L=t(`<div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--
官网：http://openjdk.java.net/projects/code-tools/jol/
定位：分析对象在JVM的大小和分布
--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.openjdk.jol<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jol-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
public class MyObject
{
    public static void main(String[] args){
        //VM的细节详细情况
        System.out.println(VM.current().details());
        //所有的对象分配的字节都是8的整数倍。
        System.out.println(VM.current().objectAlignment());
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+b+`" alt="image20210927230415577"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JOLDemo</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">Object</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token class-name">ClassLayout</span><span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPrintable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+j+'" alt="image20210927230442184"></p><table><thead><tr><th>OFFSET</th><th>偏移量，也就是到这个字段位置所占用的byte数</th></tr></thead><tbody><tr><td>SIZE</td><td>后面类型的字节大小</td></tr><tr><td>TYPE</td><td>是Class中定义的类型</td></tr><tr><td>DESCRIPTION</td><td>DESCRIPTION是类型的描述</td></tr><tr><td>VALUE</td><td>VALUE是TYPE在内存中的值</td></tr></tbody></table><p><strong>GC年龄采用4位bit存储，最大为15，例如MaxTenuringThreshold参数默认值就是15</strong></p><p>-XX:MaxTenuringThreshold=16</p><p><img src="'+f+`" alt="image20210927230617433"></p><h4 id="_2、默认开启压缩说明" tabindex="-1"><a class="header-anchor" href="#_2、默认开启压缩说明" aria-hidden="true">#</a> 2、默认开启压缩说明</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>java -XX:+PrintCommandLineFlags -version
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+x+`" alt="image20210927230700348"></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-XX:+UseCompressedClassPointers
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+y+`" alt="image20210927230717948"></p><p>上述表示开启了类型指针的压缩，以节约空间，假如不加压缩？？？</p><p><strong>手动关闭压缩再看看</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-XX:-UseCompressedClassPointers
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+w+'" alt="image20210927230743485"></p><h3 id="_4、换成其他对象试试" tabindex="-1"><a class="header-anchor" href="#_4、换成其他对象试试" aria-hidden="true">#</a> 4、换成其他对象试试</h3><p><img src="'+M+'" alt="image20210927230805766"></p><p><img src="'+C+'" alt="image20210927230808775"></p>',20);function P(X,J){const s=r("ExternalLinkIcon");return o(),c("div",null,[O,a("p",null,[a("a",S,[n("http://openjdk.java.net/groups/hotspot/docs/HotSpotGlossary.html"),e(s)])]),a("p",null,[a("a",E,[n("http://hg.openjdk.java.net/jdk8u/jdk8u/hotspot/file/89fb452b3688/src/share/vm/oops/oop.hpp"),e(s)])]),T,a("p",null,[a("a",V,[n("http://openjdk.java.net/projects/code-tools/jol/"),e(s)])]),L])}const D=p(I,[["render",P],["__file","十四、Java对象内存布局和对象头.html.vue"]]);export{D as default};
