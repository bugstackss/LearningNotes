import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as p,c as o,d as s,e as n,b as c,a,r as l}from"./app.9b10ba0a.js";const u="/assets/QKqArlmZxPzCpoh.43214492.gif",i="/assets/SfYarMA4hQJ3RTi.693ac3d2.gif",r="/assets/a3sw5tfcev7lGkI.a734e3a8.png",d="/assets/3mWdpg4VTKhMzSR.9afec985.png",k="/assets/rmZGLnNF5aAP2xj.7e761ca4.png",m="/assets/UVnWNgq2FQiXmuj.45384578.png",v="/assets/OJ9tdEyHU72AmhL.5b5f3c3e.png",g="/assets/QLDiYPmeBuUal3t.ff8239a6.png",b="/assets/e5577a33-514f-4394-a331-b291d7775ea2.80e3be09.gif",q="/assets/Heg6x9wvX82aj5Y.3c824225.png",h="/assets/9Fu65poPBDlmryn.17fe42fb.gif",S="/assets/krTeLAUEmiNR9a3.96f8c79b.png",f="/assets/GudNs7mcepnOTSP.2e6bf52e.png",x="/assets/8vWNJEQTldkn2YC.f0ba15e2.png",y="/assets/FInHqy8QMuk6oD4.0e3dfd44.png",w={},C=a(`<h1 id="_02、springmvc-获取请求参数" tabindex="-1"><a class="header-anchor" href="#_02、springmvc-获取请求参数" aria-hidden="true">#</a> 02、SpringMVC 获取请求参数</h1><h2 id="_1、通过-servlet-api-获取" tabindex="-1"><a class="header-anchor" href="#_1、通过-servlet-api-获取" aria-hidden="true">#</a> 1、通过 Servlet API 获取</h2><p>将<code>HttpServletRequest</code>作为控制器方法的形参，此时<code>HttpServletRequest</code>类型的参数表示封装了当前请求的请求报文的对象</p><p>后台测试代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/testServletAPI&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testServletAPI</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> username <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> password <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;username=&quot;</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">&quot;,password=&quot;</span> <span class="token operator">+</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前台测试代码</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@{/paramController/testServletAPI(username=&#39;admin&#39;,password=&#39;123456&#39;)}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>通过 Servlet API 获取<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>测试结果</p><p><img src="`+u+`" alt="动画 "></p><p>后台日志信息</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>username=admin,password=123456
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p><strong>Q</strong>：为何将<code>HttpServletRequest request</code>传入 testServletAPI() 方法中就可以使用？</p><p><strong>A</strong>：SpringMVC 的 IOC 容器帮我们注入了<code>HttpServletRequest </code>请求对象，同时<code>DispatherServlet</code>为我们调用 testServletAPI() 方法时自动给<code>request</code>参数赋了值，因此可以在方法形参位置传入请求对象<code>HttpServletRequest </code>就可以直接使用其<code>getParameter()</code>方法获取参数</p></blockquote><p>尽管上述 Servlet API 原生方式可以获取请求参数，但是这样做就没有必要了。因为 SpringMVC 中帮我们封装好了更加便捷的方式获取请求参数</p><h2 id="_2、通过控制器方法形参获取" tabindex="-1"><a class="header-anchor" href="#_2、通过控制器方法形参获取" aria-hidden="true">#</a> 2、通过控制器方法形参获取</h2><p>在控制器方法的形参位置，设置和请求参数同名的形参，当浏览器发送请求，匹配到请求映射时，在<code>DispatcherServlet</code>中就会将请求参数赋值给相应的形参</p><blockquote><p><strong>注意</strong>：在<code>@RequestMapping</code>注解的“路径中的占位符”一节中，我们测试过了 restful 风格在不使用<code>@PathVariable</code>转而通过同名形参的方式，试图获取<em>占位符</em>的值，不过 SpringMVC 并没有很智能地给我们为同名参数赋值。但是这里 SpringMVC 允许我们使用同名形参为<em>请求参数</em>赋值。这是<em>占位符</em>和<em>请求参数</em>的一个区别，需要注意区分！！！</p></blockquote><h3 id="_2-1、同名形参" tabindex="-1"><a class="header-anchor" href="#_2-1、同名形参" aria-hidden="true">#</a> 2.1、同名形参</h3><p>后台测试代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/testParam&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testParam</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;username=&quot;</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">&quot;,password=&quot;</span> <span class="token operator">+</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前台测试代码</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@{/paramController/testParam(username=&#39;admin&#39;,password=&#39;123456&#39;)}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>通过控制器方法形参获取<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>测试结果</p><p><img src="`+i+`" alt="动画  (1)"></p><p>后台日志信息</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>username=admin,password=123456
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-2、同名形参多值" tabindex="-1"><a class="header-anchor" href="#_2-2、同名形参多值" aria-hidden="true">#</a> 2.2、同名形参多值</h3><p>若请求所传输的请求参数中有多值情况，此时可以在控制器方法的形参中设置<em>字符串数组</em>或者<em>字符串类型</em>的形参接收此请求参数</p><ul><li>若使用字符串数组类型的形参，此参数的数组中包含了每一个数据</li><li>若使用字符串类型的形参，此参数的值为每个数据中间使用逗号拼接的结果</li></ul><p>当某个请求参数有多个值时，比如前台含有复选框的情况，还能否使用这种方式呢？“实践出真知”，现在就进行测试</p><p>后台测试代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/testParam2&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testParam2</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">,</span> <span class="token class-name">String</span> hobby<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;username=&quot;</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">&quot;, password=&quot;</span> <span class="token operator">+</span> password <span class="token operator">+</span> <span class="token string">&quot;, hobby=&quot;</span> <span class="token operator">+</span> hobby<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前台测试代码</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!--为了更直观地在地址栏中看到请求参数，这里使用get类型请求方式--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@{paramController/testParam2}<span class="token punctuation">&quot;</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>get<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>
    密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>
    爱好：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>checkbox<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hobby<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Spring<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Spring
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>checkbox<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hobby<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>SpringMVC<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>SpringMVC
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>checkbox<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hobby<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>SpringBoot<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>SpringBoot
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>测试请求参数<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试结果</p><p><img src="https://s2.loli.net/2022/03/18/qLZdEQg1G9HuJ2i.gif" alt="动画  (2)"></p><p>前台请求路径中复选框的值为<code>hobby=Spring&amp;hobby=SpringMVC&amp;hobby=SpringBoot</code>，即出现了多个<code>hobby=value</code>的情况</p><p>后台日志信息</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>username=hah, password=111111, hobby=Spring,SpringMVC,SpringBoot
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可见 SpringMVC 的控制器方法，对多个<code>hobby</code>值使用了<code>,</code>进行拼接并赋值给同名形参</p><blockquote><p><strong>扩展</strong>：如果这里使用 Servlet API 进行获取请求参数，就不能使用<code>getParameter()</code>方法获取 hobby 值了，而要使用<code>getParameterValues()</code>方法</p><p>后台代码测试</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>@RequestMapping(&quot;/testServletAPI2&quot;)
public String testServletAPI2(HttpServletRequest request) {
 String hobby = request.getParameter(&quot;hobby&quot;);
 String[] hobby2 = request.getParameterValues(&quot;hobby&quot;);
 System.out.println(&quot;hobby=&quot; + hobby + &quot;, hobby2=&quot; + Arrays.toString(hobby2));
 return &quot;success&quot;;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>后台日志信息：通过<code>getParameter()</code>只能获取到 hobby 的第一个值，而<code>getParameterValues()</code>可以以数组的形式返回 hobby 的所有值</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>username=sdfg, password=sdfg, hobby=Spring, hobby2=[Spring, SpringMVC, SpringBoot]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当然还是那句话：不建议在 SpringMVC 中使用原生 Servlet API 方法！！！这里稍作回顾和了解即可</p></blockquote><p>另外，控制器方法中使用<code>String</code>类型的数组接收 hobby 值也是可以的</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/testParam3&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testParam3</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hobby<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;username=&quot;</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">&quot;, password=&quot;</span> <span class="token operator">+</span> password <span class="token operator">+</span> <span class="token string">&quot;, hobby=&quot;</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>hobby<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>后台日志信息</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>username=aaaaaaaaa, password=aaaaaaaa, hobby=[Spring, SpringMVC, SpringBoot]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_3、-requestparam" tabindex="-1"><a class="header-anchor" href="#_3、-requestparam" aria-hidden="true">#</a> 3、@RequestParam</h2><p><code>@RequestParam</code>是将请求参数和控制器方法的形参创建映射关系</p><p>一共有三个属性：</p><ul><li><code>value</code>：指定为形参赋值的请求参数的参数名<code>required</code>：设置是否必须传输此请求参数，默认值为<code>true</code><ul><li>若设置为<code>true</code>，则当前请求必须传输<code>value</code>所指定的请求参数，若没有传输该请求参数，且没有设置<code>defaultValue</code>属性，则页面报错<code>400：Required String parameter&#39;xxx&#39;is not present</code>；</li><li>若设置为<code>false</code>，则当前请求不是必须传输<code>value</code>所指定的请求参数，若没有传输，则注解所标识的形参的值为<code>null</code></li></ul></li><li><code>defaultValue</code>：不管<code>required</code>属性值为<code>true</code>或<code>false</code>，当<code>value</code>所指定的请求参数没有传输或传输的值为空值时，则使用默认值为形参赋值</li></ul><p>实际开发中，请求参数与控制器方法形参未必一致，一旦出现这种情况，还能否接收到请求参数了呢？</p><p>这里简单地将前台<code>name=&quot;username&quot;</code>改为<code>name=&quot;user_name&quot;</code>进行测试，看下后台日志信息，果然没有接收到 user_name 这个请求参数</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>username=null, password=aaaaaaaa, hobby=[Spring, SpringMVC, SpringBoot]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p><strong>扩展思考</strong>：这里也侧面证明一件事，SpringMVC 中对请求参数的赋值是根据是否同名来决定的，而不会根据参数在方法上的第几个位置决定，也就是说 SpringMVC 没有考虑将<em>请求参数个数、类型与顺序</em>与<em>控制器方法形参个数、类型与顺序</em>进行绑定。如果我们来设计 SpringMVC，应该考虑这种方案么？</p><p>个人觉得，这种方案虽然可以实现与 Java 重载方法的一一绑定关系，但实际操作起来有一定难度：</p><ul><li>比如数字类型可以当作 String 处理，也可以当作 Integer 处理，不好区分</li><li>退一步来讲，如果考虑重载方法，SpringMVC 底层势必要对类中所有重载方法进行循环，判断是否满足个数、类型和顺序的要求，性能上一定有所影响</li></ul><p>而限制请求路径和请求方式不能完全相同的话，就没有这种苦恼了。即使是重载方法，通过不同请求路径或请求方法来界定到底访问哪个方法就可以了</p><p>SpringMVC 借助注解的方式，将请求参数与控制器方法形参关系绑定的决定权，交到开发者的手中。这种开发思维启发我们，如果有些功能不能很好地在底层进行实现，甚至可能会留下很多隐患时，还不如交给实际使用者，由他们去决定，否则很容易被使用者诟病（没有，我没有暗示某语言啊(●&#39;◡&#39;●)）</p></blockquote><p>此时使用<code>@RequestParam</code>注解就可以实现请求参数与控制器方法形参的绑定</p><p>后台测试代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/testParam3&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testParam3</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">&quot;user_name&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hobby<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;username=&quot;</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">&quot;, password=&quot;</span> <span class="token operator">+</span> password <span class="token operator">+</span> <span class="token string">&quot;, hobby=&quot;</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>hobby<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>后台日志信息</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>username=ss, password=aaaaa, hobby=[Spring, SpringMVC, SpringBoot]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>关于<code>@RequestParam</code>怎么使用，可以看下源码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">PARAMETER</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">RequestParam</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    
    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    
    <span class="token keyword">boolean</span> <span class="token function">required</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    
    <span class="token class-name">String</span> <span class="token function">defaultValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">ValueConstants</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_NONE</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>name</code>和<code>value</code>：绑定的请求参数名，互为别名，用哪个都一样</li><li><code>required</code>属性：默认为<code>true</code>，表示必须要有此参数，不传则报错；不确定是否传参又不想报错，赋值为<code>false</code>即可</li><li><code>defaultValue</code>属性：不管<code>required</code>是<code>true</code>还是<code>false</code>，只要请求参数值为空（<code>&quot;&quot;</code>或<code>null</code>），就为形参附上此值</li></ul><h3 id="_3-1、required" tabindex="-1"><a class="header-anchor" href="#_3-1、required" aria-hidden="true">#</a> 3.1、required</h3><p><code>required</code>默认为<code>true</code>，即要求该请求参数不能为空。因为是默认值，所以添加<code>required=&quot;true&quot;</code>与不写<code>required</code>属性是一样的</p><p>这里先测试下默认情况下不传对应请求参数时系统的反应如何，只需要将<code>user_name</code>一行注释即可，或直接在浏览器地址栏删除该请求参数也一样</p><p>测试结果</p><p><img src="`+r+`" alt="image-20220318220615418"></p><p>报错信息：<code>400</code>错误的请求，必须的请求参数&#39;user_name&#39;...不存在</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>HTTP Status 400 - Required request parameter &#39;user_name&#39; for method parameter type String is not present
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>经测试，不论是为 username 传空值还是不传值，都是<code>400</code>错误</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/testParam3?user_name=&amp;password=11&amp;hobby=Spring&amp;hobby=SpringMVC
/testParam3?password=11&amp;hobby=Spring&amp;hobby=SpringMVC
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果将<code>required</code>设置为<code>false</code>，还会报错吗？</p><p>后台测试代码：只需要对<code>@RequestParam(&quot;user_name&quot;)</code>稍作改动，修改为<code>@RequestParam(value = &quot;user_name&quot;, required = false)</code>即可</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/testParam3&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testParam3</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;user_name&quot;</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hobby<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;username=&quot;</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">&quot;, password=&quot;</span> <span class="token operator">+</span> password <span class="token operator">+</span> <span class="token string">&quot;, hobby=&quot;</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>hobby<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试结果：可以发现，这次并没有报<code>400</code>错误</p><p><img src="`+d+`" alt="image-20220318221131481"></p><p>后台日志信息</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>username=null, password=1111, hobby=[Spring, SpringMVC]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这是不传 user_name 的情况，如果是传空值呢？</p><p>测试结果：同样访问成功，没有报<code>400</code>错误</p><p><img src="`+k+`" alt="image-20220318222554198"></p><p>后台日志信息</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>username=, password=111, hobby=[Spring, SpringMVC]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p><strong>Q</strong>：不是说默认是<code>true</code>吗？为什么在没有使用<code>@RequestParam</code>注解时，也能正常访问呢？</p><p><strong>A</strong>：这个默认值本身就是在使用<code>@RequestParam</code>注解时生效的，如果都没有使用到<code>@RequestParam</code>，就没有相应限制了</p></blockquote><h3 id="_3-2、defaultvalue" tabindex="-1"><a class="header-anchor" href="#_3-2、defaultvalue" aria-hidden="true">#</a> 3.2、defaultValue</h3><p>后台测试代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/testParam3&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testParam3</span><span class="token punctuation">(</span>
    <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;user_name&quot;</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> defaultValue <span class="token operator">=</span> <span class="token string">&quot;heh&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> username<span class="token punctuation">,</span>
    <span class="token class-name">String</span> password<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hobby<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;username=&quot;</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">&quot;, password=&quot;</span> <span class="token operator">+</span> password <span class="token operator">+</span> <span class="token string">&quot;, hobby=&quot;</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>hobby<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请求路径：传空值和不传值两种情况</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/testParam3?user_name=&amp;password=asdf&amp;hobby=Spring&amp;hobby=SpringMVC
/testParam3?password=asdf&amp;hobby=Spring&amp;hobby=SpringMVC
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>后台日志信息</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>username=heh, password=asdf, hobby=[Spring, SpringMVC]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以发现，不管是为 username 传空值还是不传值，最终都会被赋上默认值</p><p>这里将<code>required</code>修改为<code>true</code>，即默认值的情况，发现也是可以请求成功的</p><blockquote><p><strong>注意</strong>：<code>required</code>一节测试中，在<code>required</code>的默认值情况下，没有为请求参数赋值传值或传空值，会产生<code>400</code>的错误。</p><p>而只要为请求参数设置默认值，即使用<code>@RequestParam</code>注解的<code>defaultValue</code>属性赋上值，就不会有<code>400</code>错误了。</p><p>换句话说，只要设置了<code>defaultValue</code>属性值，<code>required</code>属性就失效形同虚设了</p></blockquote><h2 id="_4、-requestheader" tabindex="-1"><a class="header-anchor" href="#_4、-requestheader" aria-hidden="true">#</a> 4、@RequestHeader</h2><p><code>@RequestHeader</code>是将请求头信息和控制器方法的形参创建映射关系</p><p>一共有三个属性：<code>value</code>、<code>required</code>、<code>defaultValue</code>，用法同<code>@RequestParam</code></p><p>因为<code>@RequestHeader</code>与<code>@RequestParam</code>别无二致，所以这里我们简单测试下效果</p><p>后台测试代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/testHeader&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testHeader</span><span class="token punctuation">(</span>
    <span class="token annotation punctuation">@RequestHeader</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;Host&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> host<span class="token punctuation">,</span>
    <span class="token annotation punctuation">@RequestHeader</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;Test&quot;</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> defaultValue <span class="token operator">=</span> <span class="token string">&quot;RequestHeader&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> test<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Host=&quot;</span> <span class="token operator">+</span> host <span class="token operator">+</span> <span class="token string">&quot;, test=&quot;</span> <span class="token operator">+</span> test<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请求路径</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http://localhost:8080/SpringMVC/paramController/testParam4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>后台日志信息</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Host=localhost:8080, test=RequestHeader
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_5、-cookievalue" tabindex="-1"><a class="header-anchor" href="#_5、-cookievalue" aria-hidden="true">#</a> 5、@CookieValue</h2><p><code>@CookieValue</code>是将 Cookie 数据和控制器方法的形参创建映射关系</p><p>一共有三个属性：<code>value</code>、<code>required</code>、<code>defaultValue</code>，用法同<code>@RequestParam</code></p><blockquote><p><strong>注意</strong>：</p><ul><li><p>在<code>JSP</code>中，<code>Session</code>依赖于<code>Cookie</code>，<code>Session</code>是服务器端的会话技术，<code>Cookie</code>是客户端的会话技术。</p></li><li><p>会话技术默认的生命周期是浏览器开启和浏览器关闭，只要浏览器不关闭，<code>Cookie</code>将一直存在。</p></li><li><p>调用<code>getSession()</code>方法时，首先会检测请求报文中是否有携带JSESSIONID</p><p>的Cookie</p><p>。如果没有，说明当前会话是第一次创建<code>Session</code></p><p>对象，则</p><ul><li>在服务端创建一个<code>Cookie</code>，以键值对形式存储。键是固定的<code>JSESSIONID</code>，值是一个 UUID 随机序列</li><li>在服务端创建一个<code>HttpSession</code>对象，并放在服务器所维护的 Map 集合中。Map 的键是<code>JSESSIONID</code>的值，值就是<code>HttpSession</code>对象</li><li>最后把<code>Cookie</code>相应给浏览器客户端，此时<code>JSESSIONID</code>的<code>Cookie</code>存在于响应报文中。每次浏览器向服务器发送请求都会携带<code>Cookie</code>，此后<code>JSESSIONID</code>的<code>Cookie</code>将存在于请求报文中</li></ul></li></ul></blockquote><p>为了能获取到<code>Cookie</code>值，需要先调用下<code>getSession()</code>方法。我们直接在之前的 testServletAPI() 方法中稍作修改</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/testServletAPI&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testServletAPI</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">HttpSession</span> session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首次发送请求后，F12 查看前台该请求的<em>响应报文</em>信息</p><p><img src="`+m+`" alt="image-20220319113953469"></p><p>会发现在<code>Set-Cookie</code>属性中存在<code>JSESSIONID=xxx</code>的信息</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Set-Cookie: JSESSIONID=C3DFF845C38BF655C02DDA0BD2DD5638; Path=/SpringMVC; HttpOnly
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>后面每次发送请求，<code>JSESSIONID</code>的<code>Cookie</code>将会放在<em>请求报文</em>信息</p><p><img src="`+v+`" alt="image-20220319120344633"></p><p>会发现在<code>Cookie</code>属性中存在<code>JSESSIONID=xxx</code>的信息</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Cookie: JSESSIONID=C3DFF845C38BF655C02DDA0BD2DD5638
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>经过上面的折腾，我们产生了<code>Cookie</code>数据，现在我们就可以使用<code>@CookieValue</code>注解进行操作了。正片开始~</p><p>后台测试代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/testCookie&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testCookie</span><span class="token punctuation">(</span>
    <span class="token annotation punctuation">@CookieValue</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;JSESSIONID&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> jSessionId<span class="token punctuation">,</span>
    <span class="token annotation punctuation">@CookieValue</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;Test&quot;</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> defaultValue <span class="token operator">=</span> <span class="token string">&quot;CookieValue&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> test<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;jSessionId=&quot;</span> <span class="token operator">+</span> jSessionId <span class="token operator">+</span> <span class="token string">&quot;, test=&quot;</span> <span class="token operator">+</span> test<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前台请求报文信息</p><p><img src="`+g+`" alt="image-20220319121031037"></p><p>后台日志信息</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>jSessionId=C3DFF845C38BF655C02DDA0BD2DD5638, test=CookieValue
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_6、通过实体类获取" tabindex="-1"><a class="header-anchor" href="#_6、通过实体类获取" aria-hidden="true">#</a> 6、通过实体类获取</h2><p>可以在控制器方法的形参位置设置一个实体类类型的形参，此时浏览器传输的请求参数的参数名和实体类中的属性名一致，那么请求参数就会为此属性赋值</p><p>前台测试代码</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@{/paramController/testBean}<span class="token punctuation">&quot;</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>post<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>
    密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>
    性别：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>radio<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>gender<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>男人<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>男
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>radio<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>gender<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>女人<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>
    年龄：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>age<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>
    邮箱：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>email<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>测试请求参数<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>后台测试代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/testBean&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testBean</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>User 类：要求属性名与请求参数名一致</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> gender<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> age<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>
    <span class="token comment">// Setter、Getter方法略</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;User{&quot;</span> <span class="token operator">+</span><span class="token string">&quot;username=&#39;&quot;</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span> <span class="token string">&quot;, password=&#39;&quot;</span> <span class="token operator">+</span> password <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span> <span class="token string">&quot;, gender=&#39;&quot;</span> <span class="token operator">+</span> gender <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span><span class="token string">&quot;, age=&#39;&quot;</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span> <span class="token string">&quot;, email=&#39;&quot;</span> <span class="token operator">+</span> email <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span><span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试结果</p><p><img src="`+b+`" alt="e5577a33-514f-4394-a331-b291d7775ea2"></p><p>后台日志信息</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>User{username=&#39;aa&#39;, password=&#39;11&#39;, gender=&#39;å¥³äºº&#39;, age=&#39;12&#39;, email=&#39;123@qq.com&#39;}
User{username=&#39;aa&#39;, password=&#39;11&#39;, gender=&#39;ç·äºº&#39;, age=&#39;12&#39;, email=&#39;123@qq.com&#39;}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>貌似基本成功了，但却出现了乱码的情况，什么原因呢？</p><h2 id="_7、处理乱码问题" tabindex="-1"><a class="header-anchor" href="#_7、处理乱码问题" aria-hidden="true">#</a> 7、处理乱码问题</h2><blockquote><p><strong>注意</strong>：在 Servlet 阶段，是通过<code>request.setCharacterEncoding(&quot;UTF-8&quot;);</code>的方式解决乱码问题的。虽然 SpringMVC 中可以使用<code>HttpServletRequest</code>对象，但是没有效果。原因也很简单，是因为请求参数获取在前，设置编码格式在后</p></blockquote><p>事实胜于雄辩，简单测试下</p><p>后台测试代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/testServletAPI3&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testServletAPI3</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UnsupportedEncodingException</span> <span class="token punctuation">{</span>
    request<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> username <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;username=&quot;</span> <span class="token operator">+</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前台测试代码</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@{/paramController/testServletAPI3}<span class="token punctuation">&quot;</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>post<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>测试请求参数<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>后台日志信息</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>username=å¼ ä¸
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可能你会说，上面的测试都是<code>post</code>请求，如果是<code>get</code>请求呢？<s>问得好，下次不要问了</s></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@{/paramController/testServletAPI3(username=&#39;张三&#39;)}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>通过setCharacterEncoding设置编码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>后台日志信息</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>username=张三
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p><strong>Q</strong>：这是为什么呢？怎么<code>get</code>请求还搞特殊？</p><p><strong>A</strong>：这是因为 Tomcat 的 conf 目录下的 <code>server.xml</code>中配置了<code>URIEncoding=&quot;UTF-8&quot;</code>的原因。这样<code>get</code>请求的乱码问题就可以一次性解决了</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot; connectionTimeout=&quot;20000&quot; redirectPort=&quot;8443&quot; URIEncoding=&quot;UTF-8&quot;/&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果一开始就没有配置，那<code>get</code>请求也会乱码，所以拜托不是<code>get</code>请求搞特殊了喂！</p><p><strong>Q</strong>：既然在<code>server.xml</code>配置下编码格式就行了，为什么只支持<code>get</code>请求啊？还说不是搞特殊？</p><p><strong>A</strong>：...你赢了</p><p><strong>Q</strong>：退一步来说，<code>post</code>请求能不能在请求参数获取之后再去处理也可以吧，只要知道其本身的编码</p><p><strong>A</strong>：试一下咯</p></blockquote>`,150),_={href:"https://gitee.com/link?target=http%3A%2F%2Fwww.mytju.com%2Fclasscode%2Ftools%2Fmessycoderecover.asp",target:"_blank",rel:"noopener noreferrer"},R=a('<p><img src="'+q+`" alt="image-20220319150515999"></p><p>很显然，乱码本身为<code>ISO-8859-1</code>格式，我们转换为<code>UTF-8</code>编码格式即可</p><p>后台测试代码</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// 对其进行iso-8859-1解码并重新UTF-8编码
username = new String(username.getBytes(&quot;ISO-8859-1&quot;), &quot;UTF-8&quot;);
System.out.println(&quot;username=&quot; + username);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>后台日志信息</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>username=张三
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>有上述测试可知，要想处理乱码问题，思路有二：</p><ol><li>获取请求参数之后，手动解码编码。但是这种方式要求每次处理<code>post</code>请求的请求参数都要手动处理，太不人性化了吧。<s>你嫌烦，我还嫌烦呢</s>（❌）</li><li>获取请求参数之前“做手脚”：发送请求之前，也就是在<code>Servlet</code>处理请求之前（👌）</li></ol><p>那什么组件时在<code>Servlet</code>之前执行的呢？</p><p>众所周知 <s>（我不知道）</s>，JavaWeb 服务器中三大组件：监听器、过滤器、<code>Servlet</code>。很显然，监听器和过滤器都在<code>Servlet</code>之前</p><ul><li><code>ServletContextListener</code>监听器：只是来监听<code>ServletContext</code>的创建和销毁，都是只执行一次</li><li><code>Filter</code>过滤器：只要设置了过滤路径，只要当前所访问的请求地址满足过滤路径，那么都会被过滤器过滤</li></ul><p>很显然，用过滤器就可以做到在发送请求之前“做手脚”，这样所有请求都要经过过滤器的处理，再交给<code>DispatherServlet</code>处理</p><p>但是，这个过滤不需要我们写，SpringMVC 已为我们准备好了，只要再<code>web.xml</code>中进行配置即可</p></blockquote><p>我们先对<code>web.xml</code>进行配置</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--处理编码--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>characterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>forceResponseEncoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>characterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启后测试，看下后台日志信息</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>username=张三
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Perfect! 配置很简单，测试结果立竿见影，乱码问题得到了解决</p><p><img src="`+h+'" alt="img"></p><blockquote><p>“知其然，知其所以然”</p></blockquote><p>这个神奇的<code>CharacterEncodingFilter</code>到底干了什么？我们一起来看下源码一探究竟</p><p><img src="'+S+'" alt="image-20220319160141358"></p><p>我们知道，在<code>&lt;init-param&gt;</code>标签中配置的属性值，其实就是为对应类进行的属性注入。这里可以很清楚地看到<code>encoding</code>和<code>forceResponseEncoding</code>两个属性值，同时注意到<code>encoding</code>被<code>@Nullable</code>注解修饰，表示其可以为空，<code>forceResponseEncoding</code>默认为<code>false</code>，即不配置不生效</p><p>另外，看一个<code>Filter</code>最重要的找它的<code>doFilter()</code>方法</p><p><img src="'+f+'" alt="image-20220319160550784"></p><p>可以看到，<code>CharacterEncodingFilter</code>类中并没有<code>doFilter()</code>方法，那去它的基类中找找吧~</p><p><img src="'+x+`" alt="image-20220319160644342"></p><p>直接读源码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span>
    <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 就是判断是不是http请求和相应，不管</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>request <span class="token keyword">instanceof</span> <span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token punctuation">(</span>response <span class="token keyword">instanceof</span> <span class="token class-name">HttpServletResponse</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServletException</span><span class="token punctuation">(</span><span class="token string">&quot;OncePerRequestFilter just supports HTTP requests&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 拿到一些了对象和参数，继续往下看看有什么用处</span>
    <span class="token class-name">HttpServletRequest</span> httpRequest <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> request<span class="token punctuation">;</span>
    <span class="token class-name">HttpServletResponse</span> httpResponse <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">)</span> response<span class="token punctuation">;</span>
    <span class="token class-name">String</span> alreadyFilteredAttributeName <span class="token operator">=</span> <span class="token function">getAlreadyFilteredAttributeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> hasAlreadyFilteredAttribute <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>alreadyFilteredAttributeName<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token comment">// 三个条件判断，一一看下</span>
    <span class="token comment">// 1、跳过转发或不过滤的，就直接进行过滤链的下一个请求（确信）</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">skipDispatch</span><span class="token punctuation">(</span>httpRequest<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">shouldNotFilter</span><span class="token punctuation">(</span>httpRequest<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 2、已经过滤属性的，多了一层判断，貌似时处理错误转发的？（不太懂）</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>hasAlreadyFilteredAttribute<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">DispatcherType</span><span class="token punctuation">.</span><span class="token constant">ERROR</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getDispatcherType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">doFilterNestedErrorDispatch</span><span class="token punctuation">(</span>httpRequest<span class="token punctuation">,</span> httpResponse<span class="token punctuation">,</span> filterChain<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 3、其他情况（应该就是正常情况吧）：设置下属性，再走 doFilterInternal 方法（还有印象吗？这个方法我们在其子类CharacterEncodingFilter中看到过的，那就顺藤摸瓜）</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>alreadyFilteredAttributeName<span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">TRUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token function">doFilterInternal</span><span class="token punctuation">(</span>httpRequest<span class="token punctuation">,</span> httpResponse<span class="token punctuation">,</span> filterChain<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            request<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span>alreadyFilteredAttributeName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>回到<code>CharacterEncodingFilter</code>中看下<code>doFilterInternal()</code>方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doFilterInternal</span><span class="token punctuation">(</span>
    <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span>
    <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
	<span class="token comment">// 获取编码格式，很明显就是获取web.xml中的配置值了（确信）</span>
    <span class="token class-name">String</span> encoding <span class="token operator">=</span> <span class="token function">getEncoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>encoding <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 二选一：配置了forceRequestEncoding为true或者请求的字符编码没有被设置，就给请求对象设置编码格式</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isForceRequestEncoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> request<span class="token punctuation">.</span><span class="token function">getCharacterEncoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            request<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span>encoding<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 配置了forceResponseEncoding为true，就给响应对象设置编码格式</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isForceResponseEncoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span>encoding<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出</p><ul><li><p>没有在<code>web.xml</code>设置编码格式就不管了，爱咋咋地</p></li><li><p>设置了<code>encoding</code></p><p>就看下是请求对象还是响应对象</p><ul><li>请求对象：如果打开了<code>forceRequestEncoding</code>即<em>强制请求编码</em>开关，就给设置下编码；就算没打开这个开关，只要请求对象还没有设置过字符编码格式，那就给它设置下</li><li>响应对象：只有打开了<code>forceResponseEncoding</code>即<em>强制响应编码</em>开关，才给设置编码</li></ul></li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>获取请求的方式有两种：</p><ul><li>通过 Servlet API 获取（不推荐）</li><li>通过控制器方法获取（就是要用它，不然学 SpringMVC 干什么，<s>不是</s>）</li></ul><p>SpringMVC 获取请求参数的注解：<code>@RequestParam</code>、<code>@RequestHeader</code>、<code>@CookieValue</code></p><ul><li>都是作用在控制器方法上的形参的（就是获取请求参数的，还能作用在别的地方？）</li><li>都有三个属性：<code>value</code>/<code>name</code>、<code>required</code>、<code>defaultValue</code>（这不是四个吗？<s>呸</s>）</li><li>主要解决形参和请求参数名不同名的问题，其次是必填问题，最后是缺省值的问题（顺序确定对吗？<s>别误人子弟了，不是，我错了</s>）</li></ul><p>如果请求参数与控制器方法形参同名，就可以不用上述的<code>@RequestParam</code>注解</p><p>如果请求参数有多个值，通过字符串类型或字符数组类型都可以获取</p><p>如果请求参数与控制器方法形参对象属性同名，同理。即满足同名条件时，SpringMVC 中允许通过实体类接收请求参数</p><blockquote><p><strong>Q</strong>：那请求头和<code>Cookie</code>呢，同名也可以不加注解么？</p><p><strong>A</strong>：大哥，这刚开始我是没想到的，不过我又回头试了下，确信不可以！</p></blockquote><p>最后附上导图，仅供参考</p><p><img src="`+y+'" alt="02-SpringMVC 获取请求参数"></p>',38);function P(V,I){const t=l("ExternalLinkIcon");return p(),o("div",null,[C,s("p",null,[n("我们先通过 "),s("a",_,[n("在线乱码恢复"),c(t)]),n(" 看下，乱码的文本实际编码是什么")]),R])}const A=e(w,[["render",P],["__file","02、SpringMVC 获取请求参数.html.vue"]]);export{A as default};
