const e=JSON.parse('{"key":"v-69c47670","path":"/web/es6/20.Generator%20%E5%87%BD%E6%95%B0%E7%9A%84%E5%BC%82%E6%AD%A5%E5%BA%94%E7%94%A8.html","title":"Generator 函数的异步应用","lang":"zh-CN","frontmatter":{"title":"Generator 函数的异步应用","category":["es6"],"tag":["ECMASCRIPT","javascript"],"sticky":false,"star":false,"article":true,"timeline":true,"description":"异步编程对 JavaScript 语言太重要。JavaScript 语言的执行环境是“单线程”的，如果没有异步编程，根本没法用，非卡死不可。本章主要介绍 Generator 函数如何完成异步操作。 传统方法 ES6 诞生以前，异步编程的方法，大概有下面四种。 回调函数; 事件监听; 发布/订阅; Promise 对象; Generator 函数将 Ja...","head":[["meta",{"property":"og:url","content":"https://Ragnarokoo.github.io/LearningNotes/web/es6/20.Generator%20%E5%87%BD%E6%95%B0%E7%9A%84%E5%BC%82%E6%AD%A5%E5%BA%94%E7%94%A8.html"}],["meta",{"property":"og:site_name","content":"📚全栈开发学习指南"}],["meta",{"property":"og:title","content":"Generator 函数的异步应用"}],["meta",{"property":"og:description","content":"异步编程对 JavaScript 语言太重要。JavaScript 语言的执行环境是“单线程”的，如果没有异步编程，根本没法用，非卡死不可。本章主要介绍 Generator 函数如何完成异步操作。 传统方法 ES6 诞生以前，异步编程的方法，大概有下面四种。 回调函数; 事件监听; 发布/订阅; Promise 对象; Generator 函数将 Ja..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-05-31T09:16:41.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"ECMASCRIPT"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:modified_time","content":"2023-05-31T09:16:41.000Z"}]]},"excerpt":"","headers":[{"level":2,"title":"传统方法","slug":"传统方法","link":"#传统方法","children":[]},{"level":2,"title":"基本概念","slug":"基本概念","link":"#基本概念","children":[{"level":3,"title":"异步","slug":"异步","link":"#异步","children":[]},{"level":3,"title":"回调函数","slug":"回调函数","link":"#回调函数","children":[]},{"level":3,"title":"Promise","slug":"promise","link":"#promise","children":[]}]},{"level":2,"title":"Generator 函数","slug":"generator-函数","link":"#generator-函数","children":[{"level":3,"title":"协程","slug":"协程","link":"#协程","children":[]},{"level":3,"title":"协程的 Generator 函数实现","slug":"协程的-generator-函数实现","link":"#协程的-generator-函数实现","children":[]},{"level":3,"title":"Generator 函数的数据交换和错误处理","slug":"generator-函数的数据交换和错误处理","link":"#generator-函数的数据交换和错误处理","children":[]},{"level":3,"title":"异步任务的封装","slug":"异步任务的封装","link":"#异步任务的封装","children":[]}]},{"level":2,"title":"Thunk 函数","slug":"thunk-函数","link":"#thunk-函数","children":[{"level":3,"title":"参数的求值策略","slug":"参数的求值策略","link":"#参数的求值策略","children":[]},{"level":3,"title":"Thunk 函数的含义","slug":"thunk-函数的含义","link":"#thunk-函数的含义","children":[]},{"level":3,"title":"JavaScript 语言的 Thunk 函数","slug":"javascript-语言的-thunk-函数","link":"#javascript-语言的-thunk-函数","children":[]},{"level":3,"title":"Thunkify 模块","slug":"thunkify-模块","link":"#thunkify-模块","children":[]},{"level":3,"title":"Generator 函数的流程管理","slug":"generator-函数的流程管理","link":"#generator-函数的流程管理","children":[]},{"level":3,"title":"Thunk 函数的自动流程管理","slug":"thunk-函数的自动流程管理","link":"#thunk-函数的自动流程管理","children":[]}]},{"level":2,"title":"co 模块","slug":"co-模块","link":"#co-模块","children":[{"level":3,"title":"基本用法","slug":"基本用法","link":"#基本用法","children":[]},{"level":3,"title":"co 模块的原理","slug":"co-模块的原理","link":"#co-模块的原理","children":[]},{"level":3,"title":"基于 Promise 对象的自动执行","slug":"基于-promise-对象的自动执行","link":"#基于-promise-对象的自动执行","children":[]},{"level":3,"title":"co 模块的源码","slug":"co-模块的源码","link":"#co-模块的源码","children":[]},{"level":3,"title":"处理并发的异步操作","slug":"处理并发的异步操作","link":"#处理并发的异步操作","children":[]},{"level":3,"title":"实例：处理 Stream","slug":"实例-处理-stream","link":"#实例-处理-stream","children":[]}]}],"git":{"createdTime":1685524601000,"updatedTime":1685524601000,"contributors":[{"name":"kirito","email":"2724964601@qq.com","commits":1}]},"readingTime":{"minutes":20.03,"words":6008},"filePathRelative":"web/es6/20.Generator 函数的异步应用.md","localizedDate":"2023年5月31日"}');export{e as data};
