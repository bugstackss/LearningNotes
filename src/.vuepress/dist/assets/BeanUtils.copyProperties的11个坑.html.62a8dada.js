import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,a as e}from"./app.9b10ba0a.js";const p="/assets/99187d273af744a19ed18e188966af10~tplv-k3u1fbpfcp-zoom-in-crop-mark_1512_0_0_0.7663c2a0.jpeg",t="/assets/33ffc6d294fb43ae94f0fd7118a0bc05~tplv-k3u1fbpfcp-zoom-in-crop-mark_1512_0_0_0.bf7e473c.jpeg",c="/assets/4ad21e7fac65499292128c00d86be079~tplv-k3u1fbpfcp-zoom-in-crop-mark_1512_0_0_0.7ec2eb21.jpeg",o="/assets/56a35d644ab4415395a36a472d53584b~tplv-k3u1fbpfcp-zoom-in-crop-mark_1512_0_0_0.f84df17c.jpeg",l="/assets/2abb818cbaad4d41b6d014583cdcf0a9~tplv-k3u1fbpfcp-zoom-in-crop-mark_1512_0_0_0.499977bf.jpeg",i={},u=e('<p>我们日常开发中，经常涉及到<code>DO、DTO、VO</code>对象属性拷贝赋值，很容易想到<code>org.springframework.beans.BeanUtils</code>的<code>copyProperties</code>。它会自动通过反射机制获取源对象和目标对象的属性，<strong>并将对应的属性值进行复制</strong>。可以减少手动编写属性复制代码的工作量，提高代码的可读性和维护性。</p><p>但是你知道嘛？使用<code>BeanUtils</code>的<code>copyProperties</code>，会有好几个坑呢，今天田螺哥个大家盘点一下哈：</p><p><img src="'+p+`" alt="99187d273af744a19ed18e188966af10~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0"></p><h2 id="第1个坑-类型不匹配" tabindex="-1"><a class="header-anchor" href="#第1个坑-类型不匹配" aria-hidden="true">#</a> 第1个坑： 类型不匹配</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SourceBean</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TargetBean</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SourceBean</span> source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SourceBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        source<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">25L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">TargetBean</span> target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TargetBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//拷贝赋值失败，输出null</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述<code>demo</code>中，源对象<code>SourceBean</code>的<code>age</code>属性是一个<code>Long</code>类型，而目标对象<code>TargetBean</code>的<code>age</code>属性是一个<code>String</code>类型。由于类型不匹配，<code>BeanUtils.copyProperties</code>不会赋值成功的。我跑<code>demo</code>的结果，控制台输出<code>null</code>。</p><h2 id="第2个坑-beanutils-copyproperties是浅拷贝" tabindex="-1"><a class="header-anchor" href="#第2个坑-beanutils-copyproperties是浅拷贝" aria-hidden="true">#</a> 第2个坑: BeanUtils.copyProperties是浅拷贝</h2><p>先给大家复习一下，什么是深拷贝？什么是浅拷贝？</p><ul><li>浅拷贝是指创建一个新对象，该对象的属性值与原始对象相同，但对于引用类型的属性，仍然共享相同的引用。换句话说，浅拷贝只复制对象及其引用，而不复制引用指向的对象本身。</li><li>深拷贝是指创建一个新对象，该对象的属性值与原始对象相同，包括引用类型的属性。深拷贝会递归复制引用对象，创建全新的对象，<strong>以确保拷贝后的对象与原始对象完全独立</strong>。</li></ul><p><img src="`+t+`" alt="img"></p><p>我再给个代码<code>demo</code>给大家看看哈：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> city<span class="token punctuation">;</span>
    <span class="token comment">//getter 和 setter 方法省略</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Address</span> address<span class="token punctuation">;</span>
    <span class="token comment">//getter 和 setter 方法省略</span>
<span class="token punctuation">}</span>

 <span class="token class-name">Person</span> sourcePerson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 sourcePerson<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token class-name">Address</span> address <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 address<span class="token punctuation">.</span><span class="token function">setCity</span><span class="token punctuation">(</span><span class="token string">&quot;New York&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 sourcePerson<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token class-name">Person</span> targetPerson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>sourcePerson<span class="token punctuation">,</span> targetPerson<span class="token punctuation">)</span><span class="token punctuation">;</span>

 sourcePerson<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCity</span><span class="token punctuation">(</span><span class="token string">&quot;London&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>targetPerson<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出为 &quot;London&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，源对象<code>Person</code>的属性<code>address</code>是一个引用类型。当使用<code>BeanUtils.copyProperties</code>方法进行属性复制时，实际上只复制了引用，即目标对象<code>targetPerson</code>的 <code>address</code> 属性引用和源对象 <code>sourcePerson</code> 的 <code>address</code> 属性引用指向同一个对象。因此，当修改源对象的<code>address</code>对象时，目标对象的<code>address</code>对象也会被修改。</p><p>大家日常开发中，要注意这个坑哈~</p><h2 id="第3个坑-属性名称不一致" tabindex="-1"><a class="header-anchor" href="#第3个坑-属性名称不一致" aria-hidden="true">#</a> 第3个坑：属性名称不一致</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SourceBean</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>

    <span class="token comment">// getter 和 setter 方法省略</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TargetBean</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span>
    <span class="token comment">// getter 和 setter 方法省略</span>
<span class="token punctuation">}</span>

 <span class="token class-name">SourceBean</span> source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SourceBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 source<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">&quot;捡田螺的小男孩&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token class-name">TargetBean</span> target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TargetBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 输出为 null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，源对象<code>SourceBean</code> 的属性名称是<code>username</code>，而目标对象<code>TargetBean</code>的属性名称也是<code>userName</code>。<strong>但是</strong>，两个 <code>username</code>，一个N是大写，一个n是小写，即<strong>属性名称不一致</strong>，<code>BeanUtils.copyProperties</code>方法无法自动映射这些属性（无法忽略大小写自动匹配），因此目标对象的<code>userName</code>属性值为<code>null</code>。</p><p>大家日常开发中，要注意这个坑哈~ <strong>比如大小写不一致，差一两个字母等等</strong>。</p><h2 id="第4个坑-null-值覆盖" tabindex="-1"><a class="header-anchor" href="#第4个坑-null-值覆盖" aria-hidden="true">#</a> 第4个坑：Null 值覆盖</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SourceBean</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span>

<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TargetBean</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">SourceBean</span> source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SourceBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
source<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
source<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">TargetBean</span> target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TargetBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
target<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">&quot;田螺address&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出为 null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，源对象 SourceBean 的 address 属性值为 null。默认情况下，BeanUtils.copyProperties 方法会将源对象中的 null 值属性覆盖到目标对象中。因此，目标对象的 address 属性值也为 null。</p><p>如果你不希望 null 值覆盖目标对象中的属性，可以使用 BeanUtils.copyProperties 方法的重载方法，并传入一个自定义的 ConvertUtilsBean 实例来进行配置。</p><h2 id="第5个坑-注意引入的包" tabindex="-1"><a class="header-anchor" href="#第5个坑-注意引入的包" aria-hidden="true">#</a> 第5个坑：注意引入的包</h2><p><code>BeanUtils.copyProperties</code>其实有两个包，分别是<code>spring、apache</code>。大家注意一下哈，这两个包，是有点不一样的：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//org.springframework.beans.BeanUtils(源对象在左边，目标对象在右边)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">copyProperties</span><span class="token punctuation">(</span><span class="token class-name">Object</span> source<span class="token punctuation">,</span> <span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> 
<span class="token comment">//org.apache.commons.beanutils.BeanUtils（源对象在右边，目标对象在左边）</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">copyProperties</span><span class="token punctuation">(</span><span class="token class-name">Object</span> dest<span class="token punctuation">,</span> <span class="token class-name">Object</span> orig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大家使用的时候，要注意一下哈，千万注意自己引入的哪个<code>BeanUtils</code>，写对应参数位置。</p><h2 id="第6个坑-boolean类型数据-is属性开头的坑" tabindex="-1"><a class="header-anchor" href="#第6个坑-boolean类型数据-is属性开头的坑" aria-hidden="true">#</a> 第6个坑：Boolean类型数据+is属性开头的坑</h2><p>把<code>SourceBean和TargetBean</code>中的都有个属性<code>isTianLuo</code>,它们的数据类型保持不变,但是一个为基本类型<code>boolean</code>，一个为包装类型<code>Boolean</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SourceBean</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> isTianLuo<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TargetBean</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> isTianLuo<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>跑测试用里的时候，发现赋值不上：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">SourceBean</span> source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SourceBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
source<span class="token punctuation">.</span><span class="token function">setTianLuo</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">TargetBean</span> target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TargetBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getIsTianLuo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出为 null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为什么呢？即使是一个包装类型，一个基本类型，应该可以赋值上才对的。</p><blockquote><p>这是因为当属性类型为<code>boolean</code>时，属性名以<code>is</code>开头,属性名会去掉前面的<code>is</code>，因此源对象和目标对象属性对不上啦。</p></blockquote><p>大家使用<code>BeanUtils.copyProperties</code>过程中，要注意哈~</p><h2 id="第7个坑-查找不到字段引用" tabindex="-1"><a class="header-anchor" href="#第7个坑-查找不到字段引用" aria-hidden="true">#</a> 第7个坑：查找不到字段引用</h2><p>在某些开发场景呢，如果我们要修改某个字段的赋值，我们可能会全文搜索它的所有<code>set</code>方法，看哪些地方引用到。</p><p><img src="`+c+'" alt="img"></p><p>但是呢，如果使用<code>BeanUtils.copyProperties</code>，<strong>就不知道是否引用到对应的ste方法啦</strong>，<strong>即查找不到字段引用</strong>。这就可能导致你会漏掉修改对应的字段。</p><p><img src="'+o+`" alt="img"></p><h2 id="第8个坑-不同内部类-即使相同属性-也是赋值失败" tabindex="-1"><a class="header-anchor" href="#第8个坑-不同内部类-即使相同属性-也是赋值失败" aria-hidden="true">#</a> 第8个坑：不同内部类，即使相同属性，也是赋值失败</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CopySource</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> outerName<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">CopySource<span class="token punctuation">.</span>InnerClass</span> innerClass<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Data</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">InnerClass</span> <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token class-name">InnerName</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CopyTarget</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> outerName<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">CopyTarget<span class="token punctuation">.</span>InnerClass</span> innerClass<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Data</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">InnerClass</span> <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token class-name">InnerName</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token class-name">CopySource</span> test1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CopySource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
test1<span class="token punctuation">.</span>outerName <span class="token operator">=</span> <span class="token string">&quot;outTianluo&quot;</span><span class="token punctuation">;</span>

<span class="token class-name">CopySource<span class="token punctuation">.</span>InnerClass</span> innerClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CopySource<span class="token punctuation">.</span>InnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token namespace">innerClass<span class="token punctuation">.</span></span>InnerName</span> <span class="token operator">=</span> <span class="token string">&quot;innerTianLuo&quot;</span><span class="token punctuation">;</span>
test1<span class="token punctuation">.</span>innerClass <span class="token operator">=</span> innerClass<span class="token punctuation">;</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>test1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">CopyTarget</span> test2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CopyTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>test1<span class="token punctuation">,</span> test2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>test2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//输出CopyTarget(outerName=outTianluo, innerClass=null)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上<code>demo</code>中，<code>CopySource</code>和<code>CopyTarget</code>各自存在一个内部类<code>InnerClass</code>，虽然这个内部类属性也相同，类名也相同，但是在不同的类中，因此<code>Spring</code>会认为属性不同,不会<code>Copy</code>;</p><p>如果要复制成功，可以让他们指向同一个内部类。</p><h2 id="第9个坑-bean对应的属性-没有getter和setter方法-赋值失败" tabindex="-1"><a class="header-anchor" href="#第9个坑-bean对应的属性-没有getter和setter方法-赋值失败" aria-hidden="true">#</a> 第9个坑：bean对应的属性，没有getter和setter方法，赋值失败</h2><p><code>BeanUtils.copyProperties</code>要拷贝属性值成功，需要对应的<code>bean</code>要有<code>getter和setter</code>方法。因为它是用反射拿到set和get方法再去拿属性值和设置属性值的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SourceBean</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> value<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Getter</span>   <span class="token comment">//没有对应的setter方法</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TargetBean</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> value<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">SourceBean</span> source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SourceBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
source<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string">&quot;捡田螺的小男孩&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">TargetBean</span> target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TargetBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出null </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第10个坑-beanutils-copyproperties-泛型" tabindex="-1"><a class="header-anchor" href="#第10个坑-beanutils-copyproperties-泛型" aria-hidden="true">#</a> 第10个坑：BeanUtils.copyProperties + 泛型</h2><p>如果BeanUtils.copyProperties遇到泛型，也是很可能赋值失败的哈。大家看下这个例子：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CopySource</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> outerName<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CopySource<span class="token punctuation">.</span>InnerClass</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Data</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">InnerClass</span> <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token class-name">InnerName</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@ToString</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CopyTarget</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> outerName<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CopyTarget<span class="token punctuation">.</span>InnerClass</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Data</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">InnerClass</span> <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token class-name">InnerName</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token class-name">CopySource</span> test1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CopySource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
test1<span class="token punctuation">.</span>outerName <span class="token operator">=</span> <span class="token string">&quot;outTianluo&quot;</span><span class="token punctuation">;</span>

<span class="token class-name">CopySource<span class="token punctuation">.</span>InnerClass</span> innerClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CopySource<span class="token punctuation">.</span>InnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token namespace">innerClass<span class="token punctuation">.</span></span>InnerName</span> <span class="token operator">=</span> <span class="token string">&quot;innerTianLuo&quot;</span><span class="token punctuation">;</span>

<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CopySource<span class="token punctuation">.</span>InnerClass</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
clazz<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>innerClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
test1<span class="token punctuation">.</span><span class="token function">setClazz</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>test1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">CopyTarget</span> test2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CopyTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>test1<span class="token punctuation">,</span> test2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>test2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//输出CopyTarget(outerName=outTianluo, clazz=null)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里面的例子，<code>BeanUtils.copyProperties</code>方法拷贝包含泛型属性的对象<code>clazz</code>。<code>CopyTarget</code>和<code>CopySource</code>的泛型属性类型不匹配，因此拷贝赋值失败。</p><p>如果是低版本的包，泛型如果不匹配，则会报错，高本版则知识拷贝赋值失败。</p><h2 id="第11个坑-性能问题" tabindex="-1"><a class="header-anchor" href="#第11个坑-性能问题" aria-hidden="true">#</a> 第11个坑：性能问题</h2><p>由于这些<code>BeanUtils</code>类都是采用反射机制实现的，对程序的效率也会有影响。我跑了个<code>demo</code>对比：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">SourceBean</span> sourceBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SourceBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sourceBean<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;tianLuoBoy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">TargetBean</span> target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TargetBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">long</span> beginTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//循环10万次</span>
      target<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>sourceBean<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;common setter time:&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> beginTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">long</span> beginTime1 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//循环10万次</span>
    <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>sourceBean<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;bean copy time:&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> beginTime1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//输出</span>
common setter time<span class="token operator">:</span><span class="token number">3</span>
bean copy time<span class="token operator">:</span><span class="token number">331</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以发现，简单的<code>setter</code>和<code>BeanUtils.copyProperties</code>对比，性能差距非常大。因此，慎用<code>BeanUtils.copyProperties！！！</code></p><h2 id="_12-替换beanutils-copyproperties的方案" tabindex="-1"><a class="header-anchor" href="#_12-替换beanutils-copyproperties的方案" aria-hidden="true">#</a> 12. 替换BeanUtils.copyProperties的方案</h2><p>以上聊了<code>BeanUtils.copyProperties</code>的11个坑，都是在跟大家聊，要慎用<code>BeanUtils.copyProperties</code>。那有没有推荐替换它的方案呢。</p><p>第一种，那就是使用原始的<code>setter和getter</code>方法。</p><blockquote><p>使用手动的setter方法进行属性赋值。这种方法可能需要编写更多的代码，但是可以提供更细粒度的控制，并且在性能方面通常比BeanUtils.copyProperties更高效。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Target</span> target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Target</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
target<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
target<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果实在对象<code>bean</code>的属性比较多的话，可以使用插件<code>GenerateAllSetter</code>，它可以一键生成对象的<code>set</code>方法，挺方便的。</p><p><img src="`+l+`" alt="img"></p><p>第二种方案，使用映射工具库，如<code>MapStruct、ModelMapper</code>等，它们可以自动生成属性映射的代码。这些工具库可以减少手动编写setter方法的工作量，并提供更好的性能。</p><p>使用<code>MapStruct</code>的示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SourceTargetMapper</span> <span class="token punctuation">{</span>
    <span class="token class-name">SourceTargetMapper</span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token class-name">Mappers</span><span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">SourceTargetMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>source <span class="token operator">=</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>source <span class="token operator">=</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">Target</span> <span class="token function">mapToTarget</span><span class="token punctuation">(</span><span class="token class-name">Source</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">Target</span> target <span class="token operator">=</span> <span class="token class-name">SourceTargetMapper</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">.</span><span class="token function">mapToTarget</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>

觉得有收获的伙伴，给个三连支持一下哈，感谢<span class="token operator">~</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,65),r=[u];function k(d,v){return s(),a("div",null,r)}const g=n(i,[["render",k],["__file","BeanUtils.copyProperties的11个坑.html.vue"]]);export{g as default};
