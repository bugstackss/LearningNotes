import{_ as a}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as l,c as r,d as e,e as s,b as n,a as d,r as c}from"./app.9b10ba0a.js";const t="/assets/9eb8879b804447ae83d916210b772481.2f0444de.png",o="/assets/4a53fd8f2b51d1dce6a64c112aa1f338.bacb7372.png",u="/assets/4324820cab7373df9a29381b21b27789.16c0e254.png",m="/assets/53c37d5512ee846a9b71f4c5e31d0e06.5331a216.png",v="/assets/d5cd28181ea97299996e94d6721f5e26.34a434f9.png",p="/assets/f0563300c188dd4b55a48428bf8e22d2.595b2589.png",b="/assets/d68d98002017050bba0b12fca4b0aa12.375bd49d.png",g="/assets/cd63b6825f41d504d5c18c162e4caf7f.7624bb2f.png",E="/assets/5771074ee447c74de2bccf0990d78ac7.a371f7fe.png",_="/assets/5331c2e43807c3c572317ee5ec25394c.eccc7e68.png",h="/assets/bc95b7b05ca9cdc0f6d6a957abf12b99.1dea7940.png",N="/assets/102d580939afb0511e653cfcc9bbeb65.35e06db5.png",L="/assets/fa01a12fa7a1eeb3b7c2a403a8dc1cbf.a68743ea.png",I="/assets/cfb81a86c4f631e5b3f39e94c79688fb.2ba3bb47.png",y="/assets/ac8413df7c21a0103940973247bef46a.777ee551.png",R="/assets/e32665a3112252326b3d5e1037ffc02e.7845fc41.png",f="/assets/35c5dda3a608a4d6c06394d3f07a9024.9f7f7621.png",q="/assets/e09460bd88d0954714bedac4464cc8c6.2e0222e1.png",O="/assets/6d9c6290c92e93862c46483d331b87a9.2d17167f.png",A="/assets/d1c059ef0356aa29f240b7cb181fe146.cf492548.png",T="/assets/aa465f9e249274dacd64d1e99f635afe.564d179d.png",C="/assets/a353df7c3ae7612d70c17a9674e1d9e6.47a10cbf.png",x="/assets/cf312aa7bfcb9ddc110570d56c206fb6.c69488c4.png",S="/assets/f456b78d5a8be6a95e48b5ecc7fa5484.8927e006.png",D="/assets/06d040a0518dd8e8c710cbc539dfb1ee.17a5df8f.png",M="/assets/fcd137d00ba262d885fbf4f39934cad0.afddcd9a.png",U="/assets/abec8ae5b82a64d48f07c3dd48cdde2b.951f430e.png",H="/assets/8b7f42a9fa2e1be05aeddf7c95664f5f.2ad3ae51.png",k="/assets/50d97f7ca0dc9c2073c5bd7a345eaaa8.001f84a5.png",F="/assets/223ad6ae2d6f4b14055ab6981401e79c.bb01d17d.png",B="/assets/7fdcbbc0ecb443f3c93a86f3189a6078.50aad13a.png",P="/assets/5169d82efc2b0494decc0630dfc33c6e.0dd5a693.png",X="/assets/e64a8330d52f6e7d9084b6b937435a85.a6104956.png",Q="/assets/e0361726ea4c20a897a0f9c0408a3d4b.e6b301cd.png",W="/assets/06baa836c203795f1b1c097033f6a338.464b8739.png",Y="/assets/6962f2bd11403dc22d20586d92ff48a2.a32e5584.png",J="/assets/a0a386dc1b1fa4724ae113b781d4e3ec.e3bdfde4.png",w="/assets/77bdff108e982213025e0eea65fe37d6.933edc87.png",j="/assets/5b1a301fd1b905ad2f756133d480bed5.ddcd6012.png",z="/assets/e966085fb4c532b03a313acd6f3ca89f.3a64dcd9.png",G="/assets/b33b9588645b056d97f24fe382207b8d.a232499f.png",K="/assets/b454bcec07773e38bdc882b182c8e164.8fa9f3b6.png",V="/assets/b5ca4bfc45a05d78c785efcee23b204f.3a15fedc.png",Z="/assets/54f2c6c2d0b6f196cab0459cfb9be561.30b971be.png",$="/assets/3eae0e5e1c835ca64a6529a30a73f094.6307449b.png",ee="/assets/7e60e2c9da0984373065f4d48653f2c2.aa6d4970.png",se="/assets/b74eb73255783a331be7b9cb9b3e4488.5e702abf.png",ie="/assets/a793ef56ea987f7fac9265f9903fe50b.e374c54e.png",ne="/assets/bfdc2bfcff45b35695eb8c14a2d42410.545cad01.png",de="/assets/f9ac7ee89496f32f9b162cb95f2c93be.7aa4d355.png",ae="/assets/aa8619993d6bf6e18de04ce46341c857.7b6376d4.png",le="/assets/a3c32c6d127812f5764b28aae57c28b6.a60ce6da.png",re="/assets/77d3772f97b70c6b1299a8b074134f15.22e1c8f4.png",ce="/assets/679794525ef0ec6d97361a56392386dd.90ade7d3.png",te="/assets/be3a1dc2f69807f5c78f7363cc1d40f8.b320d599.png",oe="/assets/f411523446c4d575f592e4ddfd311dff.0aba04b4.png",ue="/assets/aa8619993d6bf6e18de04ce46341c857.7b6376d4.png",me="/assets/848bc55bc7c4b466d85dec20ffc7ece1.ac1bc157.png",ve="/assets/d7d320d93f63c781a44fc68a5f4c4600.1befc9b2.png",pe="/assets/6229e74a29c674e8b783ee0c95ce6d51.ac708469.png",be="/assets/6ba0d043be250f9829d5982d1fb1ee1a.9123e1f0.png",ge={},Ee=e("h1",{id:"第-10-章-索引优化与查询优化",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#第-10-章-索引优化与查询优化","aria-hidden":"true"},"#"),s(" 第 10 章_索引优化与查询优化")],-1),_e=e("p",null,"讲师：尚硅谷-宋红康（江湖人称：康师傅）",-1),he={href:"http://www.atguigu.com",target:"_blank",rel:"noopener noreferrer"},Ne=d(`<hr><p>都有哪些纬度可以进行数据库调优？简言之：</p><ul><li>索引失效、没有充分利用所以——<strong>索引建立</strong></li><li>关联查询太多 JOIN（设计缺陷或不得已的需求）——<strong>SQL 优化</strong></li><li>服务器调优及各个参数设置（缓冲、 线程数）——<strong>调整 my.cnf</strong></li><li>数据过多——<strong>分库分表</strong></li></ul><p>关于数据库调优的知识点非常分散，不同 DBMS，不同的公司，不同的职位，不同的项目遇到的问题都不尽相同。</p><p>虽然 SQL 查询优化的技术很多，但是大体方向上完全可以分为 <code>物理查询优化</code> 和 <code>逻辑查询优化</code> 两大块。</p><p>物理查询优化是通过 <code>索引</code> 和 <code>表连接方式</code> 等技术来进行优化，这里重点需要掌握索引的使用 逻辑查询优化就是通过 SQL <code>等价变换</code> 提升查询效率，直白一点来讲就是，换一种执行效率更高的查询写法</p><h2 id="_1-数据准备" tabindex="-1"><a class="header-anchor" href="#_1-数据准备" aria-hidden="true">#</a> <strong>1.数据准备</strong></h2><p>学员表插50万条，班级表插一万条。</p><p><strong>步骤一：建表</strong></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>#班级表
CREATE TABLE \`class\` (
\`id\` INT(11) NOT NULL AUTO_INCREMENT,
\`className\` VARCHAR(30) DEFAULT NULL,
\`address\` VARCHAR(40) DEFAULT NULL,
\`monitor\` INT NULL ,
PRIMARY KEY (\`id\`)
) ENGINE=INNODB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;

#学员表
CREATE TABLE \`student\` (
\`id\` INT(11) NOT NULL AUTO_INCREMENT,
\`stuno\` INT NOT NULL ,
\`name\` VARCHAR(20) DEFAULT NULL,
\`age\` INT(3) DEFAULT NULL,
\`classId\` INT(11) DEFAULT NULL,
PRIMARY KEY (\`id\`)
#CONSTRAINT \`fk_class_id\` FOREIGN KEY (\`classId\`) REFERENCES \`t_class\` (\`id\`)
) ENGINE=INNODB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>步骤2：设置参数</strong></p><p>命令开启：允许创建函数设置：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>set global log_bin_trust_function_creators=1;   
# 不加global只是当前窗口有效。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>步骤3：创建函数</strong></p><p>随机产生字符串，保证每条数据都不同。</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>#随机产生字符串
DELIMITER //
CREATE FUNCTION rand_string(n INT) RETURNS VARCHAR(255)
BEGIN  
DECLARE chars_str VARCHAR(100) DEFAULT
&#39;abcdefghijklmnopqrstuvwxyzABCDEFJHIJKLMNOPQRSTUVWXYZ&#39;;
DECLARE return_str VARCHAR(255) DEFAULT &#39;&#39;;
DECLARE i INT DEFAULT 0;
WHILE i &lt; n DO 
SET return_str =CONCAT(return_str,SUBSTRING(chars_str,FLOOR(1+RAND()*52),1)); 
SET i = i + 1;
END WHILE;
RETURN return_str;
END //
DELIMITER ;

#假如要删除
#drop function rand_string;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>随机产生班级编号</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>#用于随机产生多少到多少的编号
DELIMITER //
CREATE FUNCTION rand_num (from_num INT ,to_num INT) RETURNS INT(11)
BEGIN 
DECLARE i INT DEFAULT 0; 
SET i = FLOOR(from_num +RAND()*(to_num - from_num+1))  ;
RETURN i; 
END //
DELIMITER ;

#假如要删除
#drop function rand_num;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>步骤4：创建存储过程</strong></p><p>创建往stu表中插入数据的存储过程</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>#创建往stu表中插入数据的存储过程
DELIMITER //
CREATE PROCEDURE insert_stu(  START INT , max_num INT )
BEGIN 
	DECLARE i INT DEFAULT 0; 
	SET autocommit = 0;   #设置手动提交事务
	REPEAT  #循环
	SET i = i + 1;  #赋值
	INSERT INTO student (stuno, name ,age ,classId ) VALUES
	((START+i),rand_string(6),rand_num(1,50),rand_num(1,1000)); 
	UNTIL i = max_num 
	END REPEAT; 
	COMMIT;  #提交事务
END //
DELIMITER ;

#假如要删除
#drop PROCEDURE insert_stu;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建往class表中插入数据的存储过程</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>#执行存储过程，往class表添加随机数据
DELIMITER //
CREATE PROCEDURE \`insert_class\`( max_num INT )
BEGIN 
	DECLARE i INT DEFAULT 0; 
	SET autocommit = 0;  
	REPEAT 
	SET i = i + 1; 
	INSERT INTO class ( classname,address,monitor ) VALUES
	(rand_string(8),rand_string(10),rand_num(1,100000)); 
	UNTIL i = max_num 
	END REPEAT; 
	COMMIT;
END //
DELIMITER ;

#假如要删除
#drop PROCEDURE insert_class;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>步骤5：调用存储过程</strong></p><p>往class表添加1万条数据</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>#执行存储过程，往class表添加1万条数据 
CALL insert_class(10000);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>往stu表添加50万条数据,这个时间会稍微有点长，请耐心等待哟~</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>#执行存储过程，往stu表添加80万条数据 
CALL insert_stu(100000,800000);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>查询下数据是否插入成功</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SELECT COUNT(*) FROM class;
SELECT COUNT(*) FROM student;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>步骤6：删除某表上的索引</strong></p><p>创建删除索引存储过程。这是为了方便我们的学习，因为我们在演示某个索引的效果时，可能需要删除其它索引，如果需要一个个手工删除，就太费劲了。</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>DELIMITER //
CREATE  PROCEDURE \`proc_drop_index\`(dbname VARCHAR(200),tablename VARCHAR(200))
BEGIN
   DECLARE done INT DEFAULT 0;
   DECLARE ct INT DEFAULT 0;
   DECLARE _index VARCHAR(200) DEFAULT &#39;&#39;;
   DECLARE _cur CURSOR FOR  SELECT  index_name  FROM
information_schema.STATISTICS  WHERE table_schema=dbname AND table_name=tablename AND
seq_in_index=1 AND  index_name &lt;&gt;&#39;PRIMARY&#39; ;
#每个游标必须使用不同的declare continue handler for not found set done=1来控制游标的结束
   DECLARE  CONTINUE HANDLER FOR NOT FOUND set done=2 ;   
#若没有数据返回,程序继续,并将变量done设为2
    OPEN _cur;
    FETCH _cur INTO _index;
    WHILE _index&lt;&gt;&#39;&#39; DO
       SET @str = CONCAT(&quot;drop index &quot; , _index , &quot; on &quot; , tablename );
       PREPARE sql_str FROM @str ;
       EXECUTE sql_str;
       DEALLOCATE PREPARE sql_str;
       SET _index=&#39;&#39;;
       FETCH _cur INTO _index;
    END WHILE;
 CLOSE _cur;
END //
DELIMITER ;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行存储过程</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>CALL proc_drop_index(&quot;dbname&quot;,&quot;tablename&quot;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_2-索引失效案例" tabindex="-1"><a class="header-anchor" href="#_2-索引失效案例" aria-hidden="true">#</a> <strong>2.<code>索引失效</code>案例</strong></h2><p><img src="`+t+`" alt="image-20220816104223377"></p><h3 id="_2-1-全值匹配我最爱" tabindex="-1"><a class="header-anchor" href="#_2-1-全值匹配我最爱" aria-hidden="true">#</a> 2.1 全值匹配我最爱</h3><p><strong>全值匹配可以充分的利用组合索引~</strong></p><p>系统中经常出现的sql语句如下，当没有建立索引时，<code>possible_keys</code>和<code>key</code>都为NULL</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code># SQL_NO_CACHE表示不使用查询缓存。
EXPLAIN SELECT SQL_NO_CACHE * FROM student WHERE age=30;
EXPLAIN SELECT SQL_NO_CACHE * FROM student WHERE age=30 AND classId=4;
EXPLAIN SELECT SQL_NO_CACHE * FROM student WHERE age=30 AND classId=4 AND NAME = &#39;abcd&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时执行SQL，数据查询速度会比较慢，耗时0.12s</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>mysql&gt; SELECT SQL_NO_CACHE * FROM student WHERE age=30 AND classId=4 AND NAME = &#39;abcd&#39;;
Empty set, 1 warning (0.12 sec)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来我们建立索引</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>CREATE INDEX idx_age ON student(age);

CREATE INDEX idx_age_classid ON student(age,classId);

CREATE INDEX idx_age_classid_name ON student(age,classId,NAME);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>💌Q 上面三个索引有什么区别，为什么这么建立索引？ 上面建立索引是与三条sql的使用场景对应的，遵守了全值匹配的规则，就是说建立几个复合索引字段，最好就用上几个字段。且按照顺序来用。</p></blockquote><p>建立索引后执行，发现使用到了联合索引，且耗时较短 0.00s</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>mysql&gt; EXPLAIN SELECT SQL_NO_CACHE * FROM student WHERE age=30 AND classId=4 AND NAME = &#39;abcd&#39;;
+----+-------------+---------+------------+------+----------------------------------------------+----------------------+---------+-------------------+------+----------+-------+
| id | select_type | table   | partitions | type | possible_keys                                | key                  | key_len | ref               | rows | filtered | Extra |
+----+-------------+---------+------------+------+----------------------------------------------+----------------------+---------+-------------------+------+----------+-------+
|  1 | SIMPLE      | student | NULL       | ref  | idx_age,idx_age_classid,idx_age_classid_name | idx_age_classid_name | 73      | const,const,const |    1 |   100.00 | NULL  |
+----+-------------+---------+------------+------+----------------------------------------------+----------------------+---------+-------------------+------+----------+-------+
1 row in set, 2 warnings (0.00 sec)

mysql&gt; SELECT SQL_NO_CACHE * FROM student WHERE age=30 AND classId=4 AND NAME = &#39;abcd&#39;;
Empty set, 1 warning (0.00 sec)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>**注意：**上面的索引可能不生效哦，在数据量较大的情况下，我们进行全值匹配<code>SELECT *</code>，优化器可能经过计算发现，我们使用索引查询所有的数据后，还需要对查找到的数据进行回表操作，性能还不如全表扫描。这里我们没有造这么多数据，所以就不演示效果咯。</p>`,49),Le={id:"_2-2-最左匹配原则",tabindex:"-1"},Ie=e("a",{class:"header-anchor",href:"#_2-2-最左匹配原则","aria-hidden":"true"},"#",-1),ye={href:"https://so.csdn.net/so/search?q=%E6%9C%80%E5%B7%A6%E5%8C%B9%E9%85%8D%E5%8E%9F%E5%88%99&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"},Re=d(`<p>在 MySQL 建立联合索引时会遵守最佳左前缀匹配原则，即最左优先，在检索数据时从联合索引的最左边开始匹配。</p><p><strong>1. 下面的SQL将使用索引idx_age</strong></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>EXPLAIN SELECT SQL_NO_CACHE * FROM student WHERE student.age=30 AND student.name=&#39;abcd&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>2. 下面的sql不会使用索引，因为我没有创建classId或者name的索引</strong></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>EXPLAIN SELECT SQL_NO_CACHE * FROM student WHERE student.classId=4 AND student.name=&#39;abcd&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>Q:为什么不会使用idx_age_classid索引？ 索引idx_age_classid的B+树会先使用age排序，在使用classId给age相同的数据排序，这个索引根本用不上哟。这就是下面的最左前缀原则。</p></blockquote><p><strong>3.下面的sql查询就是遵守这一原则的正确打开方式</strong></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>EXPLAIN SELECT SQL_NO_CACHE * FROM student WHERE student.age = 30 AND student.classId=4 AND student.name=&#39;abcd&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>4. 思考：下面sql会不会使用索引呢？</strong></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>EXPLAIN SELECT SQL_NO_CACHE * FROM student WHERE student.classId=4 AND student.age = 30 AND student.name=&#39;abcd&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>答案是会！因为优化器会执行优化的哦，会调整查询条件的顺序。不过在开发过程中我们还是要保持良好的开发习惯哟。</p><p><strong>5. 思考：删去索引<code>idx_age_classid</code>和<code>idx_age</code>,只保留<code>idx_age_classid_name</code>，执行如下sql，会不会使用索引？</strong></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>EXPLAIN SELECT SQL_NO_CACHE * FROM student WHERE  student.age = 30 AND student.name=&#39;abcd&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>答案是会，但是只会用一部分。看看执行结果</p><p><img src="`+o+'" alt="image-20220824161042002"></p><p>使用了idx_age_classid_name，但是key_len是5，也就是说只使用了age部分的排序，因为age是int类型，4个字节加上null值列表一共5个字节哦。想想就知道，B+树是先按照age排序，再按照classid排序，最后按照name排序，因此不能跳过classId的排序直接就使用name的排序哦。</p><p>结论：MySQL 可以为多个字段创建索引，一个索引可以包括 16 个字段，对于多列字段，<mark>过滤条件要使用索引那必须按照索引建立时的顺序，依次满足，一旦跳过某个字段，索引后面的字段都无法使用</mark>。如果查询条件中没有使用这些字段中的第一个字段时，多列索引不会被使用。</p><blockquote><p><strong>拓展:Alibaba《Java开发手册》</strong></p><p>索引文件具有 B-Tree 的最左前缀匹配特性，如果左边的值未确定，那么无法使用此索引。</p></blockquote><h3 id="_2-3-主键插入顺序" tabindex="-1"><a class="header-anchor" href="#_2-3-主键插入顺序" aria-hidden="true">#</a> 2.3 主键插入顺序</h3><p>对于一个使用 InnoDB 存储引擎的表来说，在我们没有显式的创建索引时，表中的数据实际上都是存储在 <code>聚簇索引</code> 的叶子节点的。而记录又是存储在数据页中，数据页和记录又是按照 <code>记录主键值从小到大</code> 的顺序进行排序，所以如果我们 插入 的记录的 <code>主键是依次增大</code> 的话，那我们每插满一个数据页就换到下一个数据页继续插，而如果我们插入的 <code>主键值忽大忽小</code> 的话，就比较麻烦了，假设某个数据页存储的记录已经满了，它存储的主键值在 1~100 之间：</p><p><img src="'+u+'" alt="image-20220824161409652"></p><p>如果此时再插入一条主键值为 <code>9</code> 的记录，那它插入的位置就如下图:</p><p><img src="'+m+'" alt="image-20220824161420173"></p><p>可这个数据页已经满了，再插进来咋办呢?我们需要把当前 <code>页面分裂</code> 成两个页面，把本页中的一些记录移动到新创建的这个页中。页面分裂和记录移位意味着什么？意味着：<code>性能损耗</code>！所以如果我们想尽量避免这样无谓的性能损耗，最好让插入的记录的 <code>主键值依次递增</code> ，这样就不会发生这样的性能损耗了。 所以我们建议：让主键具有 <code>AUTO_INCREMENT</code> ，让存储引擎自己为表生成主键，而不是我们手动插入，比如<code>person_info</code>表：</p><p><img src="'+v+`" alt="image-20220824161706495"></p><p>我们自定义的主键列 <code>id</code> 拥有 <code>AUTO_INCREMENT</code> 属性，在插入记录时存储引擎会自动为我们填入自增的主键值。这样的主键占用空间小，顺序写入，减少页分裂。</p><blockquote><p>🎀Tips：我们一般将主键策略设置为自动递增<code>AUTO_INCREMENT</code>哦！(核心业务表除外，后面会介绍这种情况)</p></blockquote><h3 id="_2-4-计算、函数、类型转换-自动或手动-导致索引失效" tabindex="-1"><a class="header-anchor" href="#_2-4-计算、函数、类型转换-自动或手动-导致索引失效" aria-hidden="true">#</a> 2.4 计算、函数、类型转换（自动或手动）导致索引失效</h3><p><strong>举例1：当使用函数时</strong></p><ol><li>这两条 sql 哪种写法更好？</li></ol><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code># 此语句比下一条要好！（能够使用上索引）
EXPLAIN SELECT SQL_NO_CACHE * FROM student WHERE student.name LIKE &#39;abc%&#39;;
EXPLAIN SELECT SQL_NO_CACHE * FROM student WHERE LEFT(student.name,3) = &#39;abc&#39;; 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>创建索引</li></ol><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>CREATE INDEX idx_name ON student(NAME); 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>第一种：索引优化生效</li></ol><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>mysql&gt; EXPLAIN SELECT SQL_NO_CACHE * FROM student WHERE student.name LIKE &#39;abc%&#39;;
+----+-------------+---------+------------+-------+---------------+----------+---------+------+------+----------+-----------------------+
| id | select_type | table   | partitions | type  | possible_keys | key      | key_len | ref  | rows | filtered | Extra                 |
+----+-------------+---------+------------+-------+---------------+----------+---------+------+------+----------+-----------------------+
|  1 | SIMPLE      | student | NULL       | range | idx_name      | idx_name | 63      | NULL |   22 |   100.00 | Using index condition |
+----+-------------+---------+------------+-------+---------------+----------+---------+------+------+----------+-----------------------+
mysql&gt; SELECT SQL_NO_CACHE * FROM student WHERE student.name LIKE &#39;abc%&#39;;
+---------+--------+--------+------+---------+
| id      | stuno  | name   | age  | classId |
+---------+--------+--------+------+---------+
| 4290221 | 247516 | aBCiho |   48 |     936 |
| ......  |          ........				 |
| 4243832 | 201127 | ABcIkb |   26 |     483 |
+---------+--------+--------+------+---------+
22 rows in set, 1 warning (0.00 sec)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>第二种：索引优化失效</li></ol><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>mysql&gt; EXPLAIN SELECT SQL_NO_CACHE * FROM student WHERE LEFT(student.name,3) = &#39;abc&#39;;
+----+-------------+---------+------------+------+---------------+------+---------+------+--------+----------+-------------+
| id | select_type | table   | partitions | type | possible_keys | key  | key_len | ref  | rows   | filtered | Extra       |
+----+-------------+---------+------------+------+---------------+------+---------+------+--------+----------+-------------+
|  1 | SIMPLE      | student | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 499907 |   100.00 | Using where |
+----+-------------+---------+------------+------+---------------+------+---------+------+--------+----------+-------------+
1 row in set, 2 warnings (0.00 sec)
mysql&gt; SELECT SQL_NO_CACHE * FROM student WHERE LEFT(student.name,3) = &#39;abc&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>type 为“ALL”，表示没有使用到索引，查询时间为 0.21 秒，查询效率较之前低很多</p><p><strong>举例2：当条件有计算时</strong></p><ol><li>student表的字段stuno上设置有索引</li></ol><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>CREATE INDEX idx_sno ON student(stuno);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>索引优化失效</li></ol><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>EXPLAIN SELECT SQL_NO_CACHE id, stuno, NAME FROM student WHERE stuno+1 = 900001; 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+p+`" alt="image-20220824165532304"></p><p>可以看到如果对索引进行了表达式计算，索引就失效了。这是因为我们需要把索引字段的值都取出来，然后一次进行表达式的计算来进行条件判断，因此采用的就是<code>全表扫描</code> 的方式，运行时间也会慢很多。</p><ol start="3"><li>去掉上面SQL的计算，索引优化生效：</li></ol><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>EXPLAIN SELECT SQL_NO_CACHE id, stuno, NAME FROM student WHERE stuno = 900000; 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+b+`" alt="image-20220824165631933"></p><p><strong>举例3：类型转换导致索引失效</strong></p><p>下列哪个SQL语句可以用到索引（假设name字段上设置有索引）</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code># 未使用到索引
EXPLAIN SELECT SQL_NO_CACHE * FROM student WHERE name=123;
# 使用到索引
EXPLAIN SELECT SQL_NO_CACHE * FROM student WHERE name=&#39;123&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>name = 123</code> 发生类型转换，相当于使用了隐形 函数，索引失效</p><p><img src="`+g+`" alt="image-20220824170121497"></p><blockquote><p>结论：设计实体类属性时，一定要与数据库字段类型相对应。否则，就会出现类型转换的情况</p></blockquote><h3 id="_2-5-范围条件右边的列索引失效" tabindex="-1"><a class="header-anchor" href="#_2-5-范围条件右边的列索引失效" aria-hidden="true">#</a> 2.5 范围条件右边的列索引失效</h3><p>环境准备：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code># 删除student表上的所有索引
CALL proc_drop_index(&#39;atguigudb2&#39;,&#39;student&#39;);
# 创建age、classId、NAME的联合索引
CREATE INDEX idx_age_classId_name ON student(age,classId,NAME);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>1. 如果系统经常出现的sql如下，那么索引 idx_age_classId_name 这个索引还能正常使用么？</strong></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>EXPLAIN SELECT SQL_NO_CACHE * FROM student 
WHERE student.age=30 AND student.classId&gt;20 AND student.name = &#39;abc&#39; ;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+E+`" alt="image-20220824174623086"></p><p>不能，范围右边的列不能使用。比如 &lt;、&lt;=、&gt;、&gt;= 和 between 等</p><p>有同学会好奇，我改变下<code>WHERE</code>后面字段的顺序呢，是否可以使用呢？</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>EXPLAIN SELECT SQL_NO_CACHE * FROM student 
WHERE student.age=30 AND student.name =&#39;abc&#39; AND student.classId&gt;20;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>答案也是不能~，因为 优化器会自动帮你满足最左前缀原则 ，即优化器会 先根据联合索引进行排序 ，联合索引的顺序才能决定~</p><blockquote><p><strong>解释一下为什么范围查询会导致索引失效：</strong> 因为根据范围查找筛选后的数据，无法保证范围查找后面的字段是有序的。</p><p>例如：a_b_c这个索引，你根据b范围查找&gt;2的，在满足b&gt;2的情况下，如b：3,4，c可能是5,3、因为c无序，那么c的索引便失效了</p></blockquote><p><strong>2. 改进</strong></p><p>可以建立如下索引（范围字段放在最后）</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>create index idx_age_name_classid on student(age,name,classid); 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>进行验证，可以看到联合索引所有的列都用上了</p><p><img src="`+_+`" alt="image-20220824174830572"></p><blockquote><p>应用开发中范围查询，例如：金额查询，日期查询往往都是范围查询。应将查询条件放置where语句最后。（创建的联合索引中，务必把范围设计到的字段写在最后）</p></blockquote><h3 id="_2-6-不等于-或者-索引失效" tabindex="-1"><a class="header-anchor" href="#_2-6-不等于-或者-索引失效" aria-hidden="true">#</a> 2.6 不等于（!= 或者 &lt;&gt;）索引失效</h3><ul><li>为name字段创建索引</li></ul><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>CREATE INDEX idx_name ON student(NAME);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>查看索引是否失效</li></ul><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>EXPLAIN SELECT SQL_NO_CACHE * FROM student WHERE student.name &lt;&gt; &#39;abc&#39; ;
EXPLAIN SELECT SQL_NO_CACHE * FROM student WHERE student.name != &#39;abc&#39; ;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+h+`" alt="image-20220824182716862"></p><h3 id="_2-7-is-null可以使用索引-is-not-null无法使用索引" tabindex="-1"><a class="header-anchor" href="#_2-7-is-null可以使用索引-is-not-null无法使用索引" aria-hidden="true">#</a> 2.7 is null可以使用索引，is not null无法使用索引</h3><ul><li>IS NULL：可以触发索引</li></ul><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>EXPLAIN SELECT SQL_NO_CACHE * FROM student WHERE age IS NULL;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+N+`" alt="image-20220824182818489"></p><ul><li>IS NOT NULL：无法触发索引</li></ul><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>EXPLAIN SELECT SQL_NO_CACHE * FROM student WHERE age IS NOT NULL;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+L+`" alt="image-20220824182851982"></p><blockquote><p>结论：最好在设计数据库的时候就将 <code>字段设置为 NOT NULL 约束</code>。比如可以将 INT 类型的字段，默认设置为 0。将字符串的默认值设置为空字符串（“”）。</p><p>扩展：同理，在查询中使用 <code>not like</code> 也无法使用索引，导致全表扫描</p></blockquote><h3 id="_2-8-like-以通配符-开头索引失效" tabindex="-1"><a class="header-anchor" href="#_2-8-like-以通配符-开头索引失效" aria-hidden="true">#</a> 2.8 like 以通配符 % 开头索引失效</h3><p>在使用 LIKE 关键字进行查询的查询语句中，如果匹配字符串的第一个字符为“%”，索引就不会其作用。只有“%”不在第一个位置，索引才会起作用。</p><ul><li>使用到索引</li></ul><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>EXPLAIN SELECT SQL_NO_CACHE * FROM student WHERE NAME LIKE &#39;ab%&#39;; 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+I+`" alt="image-20220824183323044"></p><ul><li>未使用到索引</li></ul><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>EXPLAIN SELECT SQL_NO_CACHE * FROM student WHERE NAME LIKE &#39;%ab%&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+y+`" alt="image-20220824183400615"></p><blockquote><p><strong>拓展：Alibaba《Java 开发手册》</strong></p><p>【强制】页面搜索严禁左模糊或者全模糊，如果需要请走搜索引擎来解决。</p></blockquote><h3 id="_2-9-or-前后存在非索引的列-索引失效" tabindex="-1"><a class="header-anchor" href="#_2-9-or-前后存在非索引的列-索引失效" aria-hidden="true">#</a> 2.9 OR 前后存在非索引的列，索引失效</h3><p>在WHERE 子句中，如果在 OR 前的条件列进行了索引，而在 OR 后的条件列没有进行索引，那么索引会失效。也就是说，<mark>OR 前后的两个条件中的列都是索引时，查询中才使用索引</mark>。</p><p>因为 OR 的含义就是两个只要满足一个即可，因此 <mark>只有一个条件列进行了索引是没有意义的</mark>，只要有条件列没有进行索引，就会进行<mark>全表扫描</mark>，因此索引的条件列也会失效。</p><p>查询语句使用 OR 关键字的情况：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code># 创建索引（只有OR前面的字段有索引）
CREATE INDEX idx_age ON student(age);
# 未使用到索引
EXPLAIN SELECT SQL_NO_CACHE * FROM student WHERE age = 10 OR classid = 100;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+R+`" alt="image-20220824183640699"></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code># 再为OR后面的字段创建一个索引
CREATE INDEX idx_cid ON student(classid);
# 使用到索引
EXPLAIN SELECT SQL_NO_CACHE * FROM student WHERE age = 10 OR classid = 100;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+f+'" alt="image-20220824184608531"></p><blockquote><p>解释下 OR 前后存在非索引的列，索引失效</p><p>因为 OR前后一个使用索引，一个进行全表扫描，还没有直接进行全表扫描更快~</p></blockquote><h3 id="_2-10-数据库和表的字符集统一使用utf8mb4-utf8mb3" tabindex="-1"><a class="header-anchor" href="#_2-10-数据库和表的字符集统一使用utf8mb4-utf8mb3" aria-hidden="true">#</a> 2.10 数据库和表的字符集统一使用utf8mb4/utf8mb3</h3><p>统一使用 utf8mb4（5.5.3版本以上支持）兼容性更好，统一字符集可以避免由于字符集转换产生的乱码。不同的 <code>字符集</code> 进行比较前需要进行 <code>转换</code> 会造成索引失效。</p><h3 id="_2-11-练习及一般性建议" tabindex="-1"><a class="header-anchor" href="#_2-11-练习及一般性建议" aria-hidden="true">#</a> 2.11 练习及一般性建议</h3><p><img src="'+q+'" alt="img"></p><p><strong>一般性建议：</strong></p><ul><li>对于单列索引，尽量选择针对当前 query 过滤性更好的索引</li><li>在选择组合索引的时候，当前 query 中过滤性最好的字段在索引字段顺序中，位置越靠前越好</li><li>在选择组合索引的时候，尽量选择能够包含当前 query 中的 where 子句中更多字段的索引</li><li>在选择组合索引的时候，如果某个字段可能出现范围查询时，尽量把这个字段放在索引次序的最后面。</li></ul><p>总之，书写 SQL 语句时，尽量避免造成索引失效的情况。</p>',110),fe={id:"_3-关联查询优化",tabindex:"-1"},qe=e("a",{class:"header-anchor",href:"#_3-关联查询优化","aria-hidden":"true"},"#",-1),Oe={href:"https://so.csdn.net/so/search?q=%E5%85%B3%E8%81%94%E6%9F%A5%E8%AF%A2&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"},Ae=d('<h3 id="_3-1-数据准备" tabindex="-1"><a class="header-anchor" href="#_3-1-数据准备" aria-hidden="true">#</a> 3.1 数据准备</h3><p>创建Type表</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>CREATE TABLE IF NOT EXISTS `type` (\n`id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,\n`card` INT(10) UNSIGNED NOT NULL,\nPRIMARY KEY (`id`)\n);\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建book表</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>CREATE TABLE IF NOT EXISTS `book` (\n`bookid` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,\n`card` INT(10) UNSIGNED NOT NULL,\nPRIMARY KEY (`bookid`)\n);\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在type表中执行20次如下数据，插入20条数据。</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>INSERT INTO TYPE(card) VALUES(FLOOR(1 + RAND() * 20));\n# ...\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>同样的，在book表中插入20条数据</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>INSERT INTO book(card) VALUES(FLOOR(1 + RAND() * 20));\n# ...\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-1-采用左外连接" tabindex="-1"><a class="header-anchor" href="#_3-1-采用左外连接" aria-hidden="true">#</a> 3.1 采用左外连接</h3><p>我们知道多表查询分为外连接和内连接，而外连接又分为左外连接，右外连接和满外连接。其中外连接中，左外连接与右外连接可以通过交换表来相互改造，其原理也是类似的，而满外连接无非是二者的一个综合，因此外连接我们只介绍左外连接的优化即可。</p><p><strong>1.下面开始 EXPLAIN 分析，当没有使用索引时，可以看到是全表扫描~</strong></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>EXPLAIN SELECT SQL_NO_CACHE * FROM `type` LEFT JOIN book ON type.card = book.card;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="'+O+`" alt="image-20220824230108579"></p><p>在上面的查询sql中，type表是驱动表，book表是被驱动表。在执行查询时，会先查找驱动表中符合条件的数据，再根据驱动表查询到的数据在被驱动表中根据匹配条件查找对应的数据。因此被驱动表嵌套查询的次数是20*20=400次。实际上，由于我们总是需要在被驱动表中进行查询，优化器帮我们已经做了优化，上面的查询结果中可以看到，使用了join buffer，将数据缓存起来，提高检索的速度。</p><p><strong>2. 为了提高外连接的性能，我们添加下索引</strong></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>CREATE INDEX Y ON book(card); #【被驱动表】，可以避免全表扫描

EXPLAIN SELECT SQL_NO_CACHE * FROM \`type\` 
LEFT JOIN book ON type.card = book.card;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+A+'" alt="image-20220824230338583"></p><p>对于外层表来说，虽然其查询仍然是全表扫描，但是因为是左外连接，LEFT JOIN左边的表的数据无论是否满足条件都会保留，因此全表扫描也是不赖的。另外可以看到第二行的 type 变为了 ref，rows 也变成了1，优化比较明显。这是由左连接特性决定的。LEFT JOIN 条件用于确定如何从右表搜索行，左边一定都有，所以 右边是我们的关键点，一定需要建立索引</p><p><strong>3. 我们当然也可以给type表建立索引。</strong></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>CREATE INDEX X ON `type`(card); #【驱动表】，无法避免全表扫描\n# ALTER TABLE `type` ADD INDEX X (card);\n\nEXPLAIN SELECT SQL_NO_CACHE * FROM `type` LEFT JOIN book ON type.card = book.card;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="'+T+`" alt="image-20220824230536748"></p><blockquote><p>注意，外连接的关联条件中，两个关联字段的类型、字符集一定要保持一致，否则索引会失效哦。</p></blockquote><p><strong>4. 删除索引Y，我们继续查询</strong></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code># 删除索引
DROP INDEX Y ON book;

EXPLAIN SELECT SQL_NO_CACHE * FROM \`type\` LEFT JOIN book ON type.card = book.card;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+C+`" alt="image-20220824230642449"></p><p>book表使用<code>join buffer</code>，再次验证了左外连接左边的表是驱动表，右边的表是被驱动表，后面我们将与内连接在这一点进行对比。</p><blockquote><p>左外链接左表是驱动表右表是被驱动表，右外链接和此相反，内链接则是按照数据量的大小，数据量少的是驱动表，多的是被驱动表</p></blockquote><h3 id="_3-2-采用内连接" tabindex="-1"><a class="header-anchor" href="#_3-2-采用内连接" aria-hidden="true">#</a> 3.2 采用内连接</h3><p><strong>1. 删除现有的索引，换成 inner join(MySQL自动选择驱动表)</strong></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>drop index X on type;
drop index Y on book;# (如果已经删除了可以不用再执行该操作)
EXPLAIN SELECT SQL_NO_CACHE * FROM type INNER JOIN book ON type.card=book.card;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+x+`" alt="image-20220826120632384"></p><p><strong>2. 为book表添加索引优化</strong></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>ALTER TABLE book ADD INDEX Y (card);

EXPLAIN  SELECT SQL_NO_CACHE * FROM  type INNER JOIN book ON type.card=book.card;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+S+`" alt="image-20220826120800619"></p><p><strong>3. 向type表中再增加20条数据，为type表增加索引优化，观察情况</strong></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code># 再向type表中插入20条数据，此时type:40条数据，book:20条数据 (过程省略)
ALTER TABLE type ADD INDEX X (card);

EXPLAIN SELECT SQL_NO_CACHE * FROM type INNER JOIN book ON type.card=book.card;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+D+`" alt="image-20220826121414744"></p><p>上面的两次查询中，第一次是使用type作为驱动表，book作为被驱动表。而第二次是使用book作为驱动表，type作为被驱动表。<mark>对于内连接来说，查询优化器可以决定谁作为驱动表，谁作为被驱动表出现的</mark></p><p><strong>4. 接着，删除被驱动表的索引</strong></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>DROP INDEX X ON \`type\`;

EXPLAIN SELECT SQL_NO_CACHE * FROM type INNER JOIN book ON type.card=book.card;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+M+`" alt="image-20220826122407713"></p><p>被驱动表进行了反转。这是因为内连接优化器可以决定（被）驱动表。在只有一个表存在索引的情况下，会<strong>选择存在索引的表作为被驱动表</strong>(因为被驱动表查询次数更多)</p><p><strong>5. 再加上索引，观察结果</strong></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>ALTER TABLE \`type\` ADD INDEX X (card);

EXPLAIN SELECT SQL_NO_CACHE * FROM type INNER JOIN book ON type.card=book.card;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+U+`" alt="image-20220826123444163"></p><p>被驱动表又进行了反转~</p><blockquote><p>结论：对于内连接来说，在两个表的连接条件都存在索引的情况下，会选择小表作为驱动表。“小表驱动大表”</p></blockquote><h3 id="_3-3-join-语句原理" tabindex="-1"><a class="header-anchor" href="#_3-3-join-语句原理" aria-hidden="true">#</a> 3.3 join 语句原理</h3><p>join 方式连接多表，本质就是各个表之间数据的循环匹配。MySQL 5.5 版本之前，MySQL 只支持一种表间关联方式，就是嵌套循环。如果关联表的数据量很大，则 join 关联的执行时间会非常漫长。在 MySQL 5.5 以后的版本中，MySQL 通过引入 BNLJ 算法来优化嵌套执行。</p><h4 id="_3-3-1-驱动表和被驱动表" tabindex="-1"><a class="header-anchor" href="#_3-3-1-驱动表和被驱动表" aria-hidden="true">#</a> 3.3.1 驱动表和被驱动表</h4><p>驱动表就是主表，被驱动表就是从表、非驱动表。</p><ul><li><strong>对于内连接来说:</strong></li></ul><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SELECT * FROM A JOIN B ON ...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>A 并不一定就是驱动表，优化器会根据你的查询语句做优化，决定先查哪张表。先查询的哪张表就是驱动表，反之就是被驱动表。通过 explain 关键字可以查看。</p><blockquote><p>3.2 已经总结了优化器选择的规律：两表中一个表有索引，一个表没有索引，则没有索引的为驱动表，有索引的为被驱动表；两个表都没有索引，则小表驱动大表。</p><p>💡Q:上面的规律是一成不变的吗？如果一个表有索引，但是数据量很小，一个表没有索引，但是数据量很大，情况会是怎样的呢？ 我们要明白优化器的优化原理：对于内连接mysql会选择扫描次数比较少的作为驱动表，因此实际生产中最好使用<code>Explain</code>测试验证。</p></blockquote><ul><li><strong>对于外连接来说：</strong></li></ul><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SELECT * FROM A LEFT JOIN B ON ...
# 或
SELECT * FROM B RIGHT JOIN A ON ...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通常，大家会认为 A 就是驱动表，B 就是被驱动表。但也未必。测试如下：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>CREATE TABLE a(f1 INT,f2 INT,INDEX(f1)) ENGINE=INNODB;
CREATE TABLE b(f1 INT,f2 INT) ENGINE=INNODB;

INSERT INTO a values(1,1),(2,2),(3,3),(4,4),(5,5),(6,6);
INSERT INTO b values(3,3),(4,4),(5,5),(6,6),(7,7),(8,8);
# 测试1
EXPLAIN SELECT * FROM a LEFT JOIN b ON(a.f1=b.f1) WHERE (a.f2=b.f2);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+H+'" alt="image-20220826132157586"></p><p>明明我们写的是<code>a LEFT JOIN b</code>,但是我们执行sql查询时，却是b作为了驱动表，a作为了被驱动表。</p><p>实际上，查询优化器会帮你把外连接改造为内连接，然后根据其优化策略选择驱动表与被驱动表</p><h4 id="_3-3-2-simple-nested-loop-join-简单嵌套循环连接" tabindex="-1"><a class="header-anchor" href="#_3-3-2-simple-nested-loop-join-简单嵌套循环连接" aria-hidden="true">#</a> 3.3.2 Simple Nested-Loop Join（简单嵌套循环连接）</h4><p>算法相当简单，从表 A 取出一条数据 1，遍历表 B，将匹配到的数据放到 result。以此类推，驱动表 A 中的每一条记录与被动驱动表 B 的记录进行判断：</p><p><img src="'+k+'" alt="image-20220826133623699"></p><p>可以看到这种方式效率是非常低的，以上述表 A 数据 100 条，表 B 数据 1000 条，则 A*B=10 万次。开销统计如下：</p><table><thead><tr><th>开销统计</th><th>SNLJ</th></tr></thead><tbody><tr><td>外表扫描次数</td><td>1</td></tr><tr><td>内表扫描次数</td><td>A</td></tr><tr><td>读取记录数</td><td>A+B*A</td></tr><tr><td>JOIN 比较次数</td><td>B*A</td></tr><tr><td>回表读取记录次数</td><td>0</td></tr></tbody></table><p>当然 MySQL 肯定不会这么粗暴的进行表的连接，所以就出现了后面的两种其的优化算法。</p><p>另外，从读取记录数来看：A+B*A中，驱动表A对性能的影响权重更大。因此我们优化器会选择小表驱动大表。</p><h4 id="_3-3-3-index-nested-loop-join-索引嵌套循环连接" tabindex="-1"><a class="header-anchor" href="#_3-3-3-index-nested-loop-join-索引嵌套循环连接" aria-hidden="true">#</a> 3.3.3 Index Nested-Loop Join（索引嵌套循环连接）</h4><p>Index Nested-Loop Join 其优化的思路主要是为了 <code>减少内层表数据的匹配次数</code>，所以要求被驱动表上必须 <code>有索引</code> 才行。通过外层表匹配条件直接与内层索引进行匹配，避免和内层表的每条记录进行比较，这样极大地减少了对内层表的匹配次数。</p><p><img src="'+F+'" alt="image-20220826134205095"></p><p>驱动表中的每条记录通过被驱动表的索引进行访问，因为索引查询的成本是比较固定的，故 MySQL 优化器都倾向于使用记录数少的表作为驱动表（外表）。</p><table><thead><tr><th>开销统计</th><th>SNLJ</th><th>INLJ</th></tr></thead><tbody><tr><td>外表扫描次数</td><td>1</td><td>1</td></tr><tr><td>内表扫描次数</td><td>A</td><td>0</td></tr><tr><td>读取记录数</td><td>A+B*A</td><td>A+B（match）</td></tr><tr><td>JOIN 比较次数</td><td>B*A</td><td>A*Index（Height）</td></tr><tr><td>回表读取记录次数</td><td>0</td><td>B（match）（if possible）</td></tr></tbody></table><p>如果被驱动表加索引，效率是非常高的，如果索引不是主键索引，所以还得进行一次回表查询。相比，被驱动表的索引是主键索引，效率会更高</p><h4 id="_3-3-4-block-nested-loop-join-快嵌套循环连接" tabindex="-1"><a class="header-anchor" href="#_3-3-4-block-nested-loop-join-快嵌套循环连接" aria-hidden="true">#</a> 3.3.4 Block Nested-Loop Join（快嵌套循环连接）</h4><p>如果存在索引，那么会使用 index 的方式进行 join，如果 join 的列没有索引，被驱动表要扫描的次数太多了。每次访问被驱动表，其表中的记录都会被加载到内存中，然后再从驱动表中取一条与其匹配，匹配结束后清除内存，然后再从驱动表中加载一条记录，然后把驱动表的记录再加载到内存匹配，这样周而复始，大大增加了 IO 次数。为了减少被驱动表的 IO 次数，就出现了 Block Nested-Loop Join的方式</p><p>不再是逐条获取驱动表的数据，而是一块一块的获取，引入了 join buffer 缓冲区，将驱动表 join 相关的部分数据列（大小受 join buffer 的限制）缓存到 join buffer 中，然后全表扫描被驱动表，被驱动表的每一条记录一次性和 join buffer 中的所有驱动表记录进行匹配（内存中操作），将简单嵌套循环中的多次比较合并成一次，降低了被动表的访问频率。</p><blockquote><p>注意：</p><p>这里缓存的不只是关联表的列，select 后面的列也会缓存起来</p><p>在一个有 N 个 join 关联的 SQL 中会分配 N-1 个 join buffer。所以查询的时候尽量减少不必要的字段，可以 让 join buffer 中存放更多的列。</p></blockquote><p><img src="'+B+'" alt="image-20220826135208899"></p><p><img src="'+P+`" alt="image-20220826135248800"></p><p>参数设置：</p><ul><li><p>block_nested_loop</p><p>通过 <code>show variables like &#39;%optimizer_switch%&#39;</code> 查看 <code>block_nested_loop</code> 状态。默认是开启的。</p></li><li><p>join_buffer_size</p><p>驱动表能不能一次加载完，要看 join buffer 能不能存储所有的数据，默认情况下 <code>join_buffer_size = 256K</code>。</p><p>join <em>buffer</em> size 的最大值在 32 位系统可以申请 4G，而在 64 位操做系统下可以申请大于 4G 的 join_buffer空间（64 位 Windows 除外，其大值会被截断为 4GB并发出警告）。</p></li></ul><h4 id="_3-3-5-小结" tabindex="-1"><a class="header-anchor" href="#_3-3-5-小结" aria-hidden="true">#</a> 3.3.5 小结</h4><ol><li>保证被驱动表的 JOIN 字段已经创建了索引（减少内层表的循环匹配次数）</li><li>需要 JOIN 的字段，数据类型保持绝对一致。</li><li>LEFT JOIN 时，选择小表作为驱动表， 大表作为被驱动表 。减少外层循环的次数。</li><li>INNER JOIN 时，MySQL 会自动将小结果集的表选为驱动表 。选择相信 MySQL 优化策略。</li><li>能够直接多表关联的尽量直接关联，不用子查询。(减少查询的趟数)</li><li>不建议使用子查询，建议将子查询 SQL 拆开结合程序多次查询，或使用 JOIN 来代替子查询。</li><li>衍生表建不了索引</li><li>默认效率比较：INLJ &gt; BNLJ &gt; SNLJ</li><li>正确理解小表驱动大表：大小不是指表中的记录数，而是永远用小结果集驱动大结果集（其本质就是减少外层循环的数据数量）。 比如A表有100条记录，B表有1000条记录，但是where条件过滤后，B表结果集只留下50个记录，A表结果集有80条记录，此时就可能是B表驱动A表。其实上面的例子还是不够准确，因为结果集的大小也不能粗略的用结果集的行数表示，而是表行数 * 每行大小。其实要理解你只需要结合Join Buffer就好了，因为表行数 * 每行大小越小，其占用内存越小,就可以在Join Buffer中尽量少的次数加载完了。</li></ol><h4 id="_3-3-6-hash-join" tabindex="-1"><a class="header-anchor" href="#_3-3-6-hash-join" aria-hidden="true">#</a> 3.3.6 Hash Join</h4><p>从 MySQL 8.0.20 版本开始将废弃 BNLJ，因为加入了 hash join 默认都会使用 hash join</p><ul><li><p>Nested Loop：</p><p>对于被连接的数据子集较小的情况，Nested Loop 是个较好的选择。</p></li><li><p>Hash Join 是做 <code>大数据集连接</code> 时的常用方法，优化器使用两个表中较小（相对较小）的表利用 join key 在内存中建立 <code>散列表</code>，然后扫描较大的表并探测散列表，找出与 Hash 表匹配的行。</p><ul><li>这种方式适用于较小的表完全可以放于内存中的情况，这样总成本就是访问两个表的成本之和</li><li>在表很大的情况下并不能完全放入内存，这时优化器会将它分割成 若干不同的分区，不能放入内存的部分就把该分区写入磁盘的临时段，此时要求有较大的临时段从而尽量提高 I/O 的性能。</li><li>它能够很好的工作于没有索引的大表和并行查询的环境中，并提供最好的性能。大多数人都说它是 Join 的重型升降机。Hash Join 只能应用于等值连接（如 WHERE A.COL1 = B.COL2），这是由 Hash 的特点决定的。</li></ul></li></ul><table><thead><tr><th>类型</th><th>Nested Loop</th><th>Hash Join</th></tr></thead><tbody><tr><td>使用条件</td><td>任何条件</td><td>等值连接（=）</td></tr><tr><td>相关资源</td><td>CPU、磁盘 I/O</td><td>内存、临时空间</td></tr><tr><td>特点</td><td>当有高选择性索引或进行限制性搜索时效率比较高，能够快速返回第一次的搜索结果</td><td>当缺乏索引或者索引条件模糊时，Hash Join 比 Nested Loop 有效。在数据仓库环境下，如果表的记录数多，效率高</td></tr><tr><td>缺点</td><td>当索引丢失或者查询条件限制不够时，效率很低；当表的记录数较多，效率低</td><td>为简历哈希表，需要大量内存。第一次的结果返回较慢</td></tr></tbody></table><h2 id="_4-子查询优化" tabindex="-1"><a class="header-anchor" href="#_4-子查询优化" aria-hidden="true">#</a> 4. 子查询优化</h2><p>MySQL 从 4.1 版本开始支持子查询，使用子查询可以进行 SELECT 语句的嵌套查询，即一个 SELECT 查询的结果作为另一个 SELECT 语句的条件。<code>子查询可以一次性完成很多逻辑上需要多个步骤才能完成的操作</code> 。</p><p><strong>子查询是 MySQL 的一项重要的功能，可以帮助我们通过一个 SQL 语句实现比较复杂的查询。但是，子查询的执行效率不高。</strong> 通常我们可以将其优化成一个连接查询~</p><p>原因:</p><p>① 执行子查询时，MySQL 需要为内层查询语句的查询结果<code>建立一个临时表</code> ，然后外层查询语句从临时表中查询记录。查询完毕后，再<code>撤销这些临时表</code> 。这样会消耗过多的 CPU 和 IO 资源，产生大量的慢查询。</p><p>② 子查询的结果集存储的临时表，不论是内存临时表还是磁盘临时表都 <code>不会存在索引</code> ，所以查询性能会受到一定的影响。</p><p>③ 对于返回结果集比较大的子查询，其对查询性能的影响也就越大。</p><p>在 MySQL 中，可以使用连接（JOIN）查询来替代子查询。 连接查询 <code>不需要建立临时表</code>，其 <code>速度比子查询要快</code>，如果查询中使用索引的话，性能就会更好。</p><p><strong>举例1：查询学生表中是班长的学生信息</strong></p><ul><li>使用子查询</li></ul><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>#创建班级表中班长的索引
CREATE INDEX idx_monitor ON class(monitor);

#查询班长的信息
EXPLAIN SELECT * FROM student stu1
    WHERE stu1.\`stuno\` IN (
    SELECT monitor
    FROM class c
    WHERE monitor IS NOT NULL
);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>推荐：使用多表查询</li></ul><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>EXPLAIN SELECT stu1.* FROM student stu1 JOIN class c 
ON stu1.\`stuno\` = c.\`monitor\`
WHERE c.\`monitor\` IS NOT NULL;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>举例2：取所有不为班长的同学</strong></p><ul><li>不推荐</li></ul><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>#查询不为班长的学生信息
EXPLAIN SELECT SQL_NO_CACHE a.* 
FROM student a 
WHERE  a.stuno  NOT  IN (
            SELECT monitor FROM class b 
            WHERE monitor IS NOT NULL);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>推荐</li></ul><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code># 转换成左连接查询
EXPLAIN SELECT SQL_NO_CACHE a.*
FROM  student a LEFT OUTER JOIN class b 
ON a.stuno =b.monitor
WHERE b.monitor IS NULL;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>结论：尽量不要使用 NOT IN 或者 NOT EXISTS，用 <code>LEFT JOIN xxx ON xx WHERE xx IS NULL</code> 替代</p></blockquote><h2 id="_5-排序优化" tabindex="-1"><a class="header-anchor" href="#_5-排序优化" aria-hidden="true">#</a> 5. 排序优化</h2><h3 id="_5-1-排序优化" tabindex="-1"><a class="header-anchor" href="#_5-1-排序优化" aria-hidden="true">#</a> 5.1 排序优化</h3><p><strong>问题：在 WHERE 条件字段上加索引，但是为什么在 ORDER BY 字段上还要加索引呢？</strong></p><p>在 MySQL 中，支持两种排序方式，分别是 <code>FileSort</code> 和 <code>Index</code> 排序。</p><ul><li>Index 排序中，索引可以保证数据的有序性，就不需要再进行排序，<code>效率更更高</code>。</li><li>FileSort 排序则一般在 <code>内存中</code> 进行排序，占用 <code>CPU 较多</code>。如果待排序的结果较大，会产生临时文件 I/O 到磁盘进行排序的情况，效率低。</li></ul><p>优化建议:</p><ol><li>SQL 中，可以在 WHERE 子句和 ORDER BY 子句中使用索引，目的是在 WHERE 子句中 避免全表扫描，在 ORDER BY 子句 避免使用 FileSort 排序。当然，某些情况下全表扫描，或者 FileSort 排序不一定比索引慢。但总的来说，我们还是要避免，以提高查询效率。</li><li>尽量使用 Index 完成 ORDER BY 排序。如果 WHERE 和 ORDER BY 后面是相同的列就使用单索引列；如果不同就使用联合索引。</li><li>无法使用 Index 时，需要对 FileSort 方式进行调优。</li></ol><h3 id="_5-2-测试" tabindex="-1"><a class="header-anchor" href="#_5-2-测试" aria-hidden="true">#</a> 5.2 测试</h3><p>执先案例前，调用存储过程删除student和class表上的索引。只留主键：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>call proc_drop_index(&#39;atguigudb2&#39;,&#39;student&#39;);
call proc_drop_index(&#39;atguigudb2&#39;,&#39;class&#39;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>以下是否能使用索引，能否去掉 <code>using filesort</code></p><p><strong>过程一：</strong></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>EXPLAIN SELECT SQL_NO_CACHE * FROM student ORDER BY age,classid;  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+X+`" alt="image-20220826151348825"></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>EXPLAIN SELECT SQL_NO_CACHE * FROM student ORDER BY age,classid LIMIT 10;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+Q+`" alt="image-20220826151419544"></p><p><strong>过程二：</strong></p><p><strong>1. 创建索引，但是不加limit限制，索引失效</strong></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>CREATE  INDEX idx_age_classid_name ON student (age,classid,NAME);

#不限制,索引失效
EXPLAIN  SELECT SQL_NO_CACHE * FROM student ORDER BY age,classid; 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+W+`" alt="image-20220826151550127"></p><p>我们不是建立了索引嘛，为啥显示没有使用呢？这是优化器通过计算发现，这里需要回表的数据量特别大，使用索引的性能代价反而比不上不用索引的。</p><p><strong>2. 假如我们最后只查询二级索引中有的字段，观察结果：</strong></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code># 会使用索引 （覆盖索引）
EXPLAIN  SELECT SQL_NO_CACHE age,classid,name,id FROM student ORDER BY age,classid;  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+Y+`" alt="image-20220826151951066"></p><p><strong>3. 假如我们限制排序返回的结果数量，观察结果：</strong></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>#增加limit过滤条件，使用上索引了。
EXPLAIN  SELECT SQL_NO_CACHE * FROM student ORDER BY age,classid LIMIT 10;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+J+`" alt="image-20220826152308067"></p><p><strong>过程三：order by 时顺序错误，索引失效</strong></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>#创建索引age,classid,stuno
CREATE  INDEX idx_age_classid_stuno ON student (age,classid,stuno); 

#以下哪些索引失效?
# 失效
EXPLAIN  SELECT * FROM student ORDER BY classid LIMIT 10;

# 失效
EXPLAIN  SELECT * FROM student ORDER BY classid,NAME LIMIT 10;  

# 可以
EXPLAIN  SELECT * FROM student ORDER BY age,classid,stuno LIMIT 10; 

# 可以
EXPLAIN  SELECT * FROM student ORDER BY age,classid LIMIT 10;

# 可以
EXPLAIN  SELECT * FROM student ORDER BY age LIMIT 10;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>过程四：order by 时规则不一致, 索引失效 （顺序错，不索引；方向反，不索引）</strong></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code># 失效
EXPLAIN  SELECT * FROM student ORDER BY age DESC, classid ASC LIMIT 10;

# 失效
EXPLAIN  SELECT * FROM student ORDER BY classid DESC, NAME DESC LIMIT 10;

# 失效
EXPLAIN  SELECT * FROM student ORDER BY age ASC,classid DESC LIMIT 10; 

# 可以
EXPLAIN  SELECT * FROM student ORDER BY age DESC, classid DESC LIMIT 10;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>过程五：无过滤，不索引</strong></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code># 可以
EXPLAIN  SELECT * FROM student WHERE age=45 ORDER BY classid;

# 可以
EXPLAIN  SELECT * FROM student WHERE age=45 ORDER BY classid,NAME; 

# 失效
EXPLAIN  SELECT * FROM student WHERE classid=45 ORDER BY age;

# 可以
EXPLAIN  SELECT * FROM student WHERE classid=45 ORDER BY age LIMIT 10;

CREATE INDEX idx_cid ON student(classid);

# 可以
EXPLAIN  SELECT * FROM student WHERE classid=45 ORDER BY age;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>小结：</strong></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>INDEX a_b_c(a,b,c)

order by 能使用索引最左前缀 - ORDER BY a
- ORDER BY a,b
- ORDER BY a,b,c
- ORDER BY a DESC,b DESC,c DESC

如果 WHERE 使用索引的最左前缀定义为常量，则 order by 能使用索引 
- WHERE a = const ORDER BY b,c
- WHERE a = const AND b = const ORDER BY c
- WHERE a = const ORDER BY b,c
- WHERE a = const AND b &gt; const ORDER BY b,c

不能使用索引进行排序
- ORDER BY a ASC,b DESC,c DESC /* 排序不一致 */ 
- WHERE g = const ORDER BY b,c /*丢失a索引*/
- WHERE a = const ORDER BY c /*丢失b索引*/
- WHERE a = const ORDER BY a,d /*d不是索引的一部分*/
- WHERE a in (...) ORDER BY b,c /*对于排序来说，多个相等条件也是范围查询*/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-3-案例实战" tabindex="-1"><a class="header-anchor" href="#_5-3-案例实战" aria-hidden="true">#</a> 5.3 案例实战</h3><p>下面我们通过一个案例来实战filesort和index两种排序。对ORDER BY子句，尽量使用 Index 方式排序，避免使用 FileSort 方式排序。</p><p><strong>场景:查询年龄为30岁的，且学生编号小于101000的学生，按用户名称排序</strong></p><p>执行案例前先清除student上的索引，只留主键：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>DROP INDEX idx_age ON student;
DROP INDEX idx_age_classid_stuno ON student;
DROP INDEX idx_age_classid_name ON student;
#或者
call proc_drop_index(&#39;atguigudb2&#39;,&#39;student&#39;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试以下的查询，此时显然使用的是filesort进行排序</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>EXPLAIN SELECT SQL_NO_CACHE * FROM student WHERE age = 30 AND stuno &lt;101000 ORDER BY NAME ;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+w+`" alt="image-20220317213102709"></p><p>结论：type 是 ALL，即最坏的情况。Extra 里还出现了 Using filesort，也是最坏的情况。优化是必须的。</p><p><strong>方案一：为了去掉 filesort 我们可以创建特定索引</strong></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code># 创建新索引
CREATE INDEX idx_age_name ON student(age,NAME);
# 进行测试，可以看到已经使用了索引，虽然仅仅使用到了age这个字段
EXPLAIN SELECT SQL_NO_CACHE * FROM student WHERE age = 30 AND stuno &lt; 101000 ORDER BY NAME ;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+j+`" alt="image-20220317213227501"></p><p><strong>方案二：尽量让 where 的过滤条件和排序使用上索引</strong></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>DROP INDEX idx_age_name ON student;
# 建立三个字段的索引
CREATE INDEX idx_age_stuno_name ON student (age,stuno,NAME);
# 进行测试
EXPLAIN SELECT SQL_NO_CACHE * FROM student WHERE age = 30 AND stuno &lt;101000 ORDER BY NAME ;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+z+`" alt="image-20220317213450582"></p><p>此时又使用了filesort，这是为什么呢？这是因为此时filesort的性能更高。不信你可以对比执行下（0.03sec和0.00sec），看看时间的区别。结果竟然有 filesort 的 sql 运行速度，超过了已经优化掉 filesort的 sql，而且快了很多，几乎一瞬间就出现了结果。看来优化器做的工作真的特别灵活</p><p>原因：所有的排序都是在条件过滤之后才执行的。所以，如果条件过滤大部分数据的话，剩下几百几千条数据进行排序其实并不是很消耗性能，即使索引优化了排序，但实际提升性能很有限。相对的 stuno &lt; 10100 这个条件，如果没有用到索引的话，要对几万条数据进行扫描，这是非常消耗性能的，所以索引放在这个字段上性价比最高，是最优选择。</p><blockquote><p>结论:</p><ol><li>两个索引同时存在，mysql 自动选择最优的方案。（对于这个例子，mysql 选择 idx_age_stuno_name）。但是，<code>随着数据量的变化，选择的索引也会随之变化的</code> 。</li><li><strong>当【范围条件】和【group by 或者 order by】的字段出现二选一时，优先观察条件字段的过滤数量，如果过滤的数据足够多，而需要排序的数据并不多时，优先把索引放在范围字段上。反之，亦然。</strong></li></ol></blockquote><p>思考：这里我们使用如下索引，是否可行? (<strong>可行</strong>)</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>DROP INDEX idx_age_stuno_name ON student;
CREATE INDEX idx_age_stuno ON student(age,stuno);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-4-filesort-算法-双路排序和单路排序" tabindex="-1"><a class="header-anchor" href="#_5-4-filesort-算法-双路排序和单路排序" aria-hidden="true">#</a> 5.4 filesort 算法：双路排序和单路排序</h3><p>排序的字段若不在索引列上，则 filesort 会有两种算法：<code>双路排序</code> 和 <code>单路排序</code></p><ol><li><strong>双路排序（慢）</strong></li></ol><ul><li><code>MySQL4.1 之前是使用双路排序</code>，字面意思就是两次扫描磁盘，最终得到数据， 读取行指针和 <code>order by 列</code>，对他们进行排序，然后扫描已经排序好的列表，按照列表中的值重新从列表中读取对应的数据输出</li><li>从磁盘取排序字段，在 buffer 进行排序，再从 <code>磁盘取其他字段</code> 。</li></ul><p>取一批数据，要对磁盘进行两次扫描，众所周知，IO 是很耗时的，所以在 MySQL4.1 之后，出现了第二种改进的算法，就是单路排序。</p><ol start="2"><li>单路排序（快）</li></ol><p>从磁盘读取查询需要的 所有列 ，按照 order by 列在 buffer 对它们进行排序，然后扫描排序后的列表进行输出， 它的效率更快一些，避免了第二次读取数据。并且把随机 IO 变成了顺序 IO，但是它会使用更多的空间， 因为它把每一行都保存在内存中了。</p><p><strong>结论及引申出的问题</strong></p><ul><li>由于单路是后出的，总体而言好过双路</li><li>但是用单路有问题 <ul><li>在 sort_buffer 中，单路比多路要多占用很多空间，因为单路是把所有字段都取出，所以可能取出的数据的总大小超出了sort_buffer的容量，导致每次只能取 sort_buffer 容量大小的数据，进行排序（创建 temp 文件，多路合并），排完再取 sort_buffer 容量大小，再排…从而多次I/O。</li><li>单路本来想省一次 I/O 操作，<code>反而导致了大量的 I/O 操作</code>，反而得不偿失。</li></ul></li></ul><p><strong>优化策略</strong></p><ul><li><p><strong>尝试提高 sort_buffer_size</strong></p><ul><li><p>不管用哪种算法，提高这个参数都会提高效率，要根据系统的能力去提高，因为这个参数是针对每个进程（connection）的 1M - 8M 之间调整。MySQL5.7，InnoDB 存储引擎默认值都是 1048576 字节，1MB。</p><p><img src="`+G+`" alt="image-20220826160456207"></p></li></ul></li><li><p><strong>尝试提高 max_length_for_sort_data</strong></p><ul><li>提高这个参数，会增加改进算法的概率。</li></ul><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SHOW VARIABLES LIKE&#39;%max_length_for_sort_data%&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>但是如果设的太高，数据总容量超出 sort_buffer_size 的概率就增大，明显症状是高的磁盘 I/O 活动和低的处理器使用率。如果需要返回的列的总长度大于 max_length_for_sort_data，使用双路算法，否则使用单路算法。1024-8192字节之间调整。</li></ul></li><li><p><strong>Order by 时 select* 是一个大忌。最好只Query需要的字段。</strong></p><ul><li>当 Query 的字段大小综合小于 max_length_for_sort_data，而且排序字段不是 TEXT|BLOG 类型时，会改进后的算法——单路排序，否则用老算法——多路排序。</li><li>两种算法的数据都有可能超出 sort_buffer_size 的容量，超出之后，会创建 tmp 文件进行合并排序，导致多次 I/O，但是用单路排序算法的风险会更大一些，所以要提高 sort_buffer_size</li></ul></li></ul><h2 id="_6-group-by优化" tabindex="-1"><a class="header-anchor" href="#_6-group-by优化" aria-hidden="true">#</a> 6. GROUP BY优化</h2><ul><li><p>group by 使用索引的原则几乎跟 order by 一致 ，group by 即使没有过滤条件用到索引，也可以直接使用索引。</p></li><li><p>group by 先排序再分组，遵照索引建的最佳左前缀法则</p></li><li><p>当无法使用索引列，增大 <code>max_length_for_sort_data</code> 和 <code>sort_buffer_size</code> 参数的设置</p></li><li><p>where 效率高于 having，能写在 where 限定的条件就不要写在 having 中了</p></li><li><p>减少使用 order by，和业务沟通能不排序就不排序，或将排序放到程序端去做。Order by、group by、distinct 这些语句较为耗费 CPU，数据库的 CPU 资源是极其宝贵的。</p></li><li><p>包含了 order by、group by、distinct 这些查询的语句，where 条件过滤出来的结果集请保持在 1000 行以内，否则 SQL 会很慢。</p></li></ul><h2 id="_7-优化分页查询" tabindex="-1"><a class="header-anchor" href="#_7-优化分页查询" aria-hidden="true">#</a> 7. 优化分页查询</h2><p>一般分页查询时，通过创建覆盖索引能够比较好地提高性能。一个常见有非常头疼的问题就是 <code>limit 2000000,10</code>，此时需要 MySQL 排序前 2000010 记录，仅仅返回 2000000-2000010 的记录，其他记录丢弃，查询排序的代价非常大。</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>EXPLAIN SELECT * FROM student LIMIT 2000000,10;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>优化思路一</strong></p><p>在索引上完成排序分页操作，最后根据主键关联回原表查询所需要的其他列内容。</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>EXPLAIN SELECT * FROM student t,(SELECT id FROM student ORDER BY id LIMIT 2000000,10) a		
WHERE t.id = a.id;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+K+`" alt="image-20220118212331595"></p><p><strong>优化思路二</strong></p><p>该方案适用于主键自增的表，可以把 Limit 查询转换成某个位置的查询 。</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>EXPLAIN SELECT * FROM student WHERE id &gt; 2000000 LIMIT 10;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+V+`" alt="image-20220118212357618"></p><h2 id="_8-优先考虑覆盖索引" tabindex="-1"><a class="header-anchor" href="#_8-优先考虑覆盖索引" aria-hidden="true">#</a> 8. 优先考虑覆盖索引</h2><h3 id="_8-1-什么是覆盖索引" tabindex="-1"><a class="header-anchor" href="#_8-1-什么是覆盖索引" aria-hidden="true">#</a> 8.1 什么是覆盖索引？</h3><p><strong>理解方式一</strong>：索引是高效找到行的一个方法，但是一般数据库也能使用索引找到一个列的数据，因此它不必读取整个行。毕竟索引叶子节点存储了它们索引的数据；当能通过读取索引就可以得到想要的数据，那就不需要读取行了。 一个索引包含了满足查询结果的数据就叫做覆盖索引。</p><p><strong>理解方式二</strong>：非聚簇复合索引的一种形式，它包括在查询里的 SELECT、JOIN 和 WHERE 子句用到的所有列（即建索引的字段正好是覆盖查询条件中所涉及的字段）。</p><p>简单说就是， <code>索引列+主键</code> 包含 <code>SELECT 到 FROM 之间查询的列</code>。</p><p><strong>举例一：</strong></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>#删除之前的索引
DROP INDEX idx_age_stuno ON student;

CREATE INDEX idx_age_name ON student (age,NAME);

EXPLAIN SELECT * FROM student WHERE age &lt;&gt; 20;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+Z+`" alt="image-20220317220113590"></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>EXPLAIN SELECT age,NAME FROM student WHERE age &lt;&gt; 20;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+$+`" alt="image-20220317220203223"></p><blockquote><p>注意：前面我们提到如果使用上&lt;&gt;就不会使用上索引了 并不是绝对的。比如上面这条SQL就用上了！！！Attention！我们讲解的关于 索引失效以及索引优化都是根据效率来决定的。对于二级索引来说：查询时间 = 二级索引计算时间 + 回表查询时间，由于我们使用的是覆盖索引，回表查询时间 = 0，索引优化器考虑到这一点就使用上 二级索引了~</p></blockquote><p><strong>举例二：</strong></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>EXPLAIN SELECT * FROM student WHERE NAME LIKE &#39;%abc&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+ee+`" alt="image-20220317220552145"></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>EXPLAIN SELECT id,age FROM student WHERE NAME LIKE &#39;%abc&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+se+`" alt="image-20220317220630975"></p><p>同上，由于也使用了覆盖索引，最终SQL执行也正常使用上了索引~</p><h3 id="_8-2-覆盖索引的利弊" tabindex="-1"><a class="header-anchor" href="#_8-2-覆盖索引的利弊" aria-hidden="true">#</a> 8.2 覆盖索引的利弊</h3><p><strong>好处:</strong></p><p><strong>1. 避免Innodb表进行索引的二次查询（回表）</strong></p><p>Innodb 是以聚集索引的顺序来存储的，对于 Innodb 来说，二级索引在叶子节点中所保存的是行的主键信息，如果是用二级索引查询数据，在查找到相应的键值后，还需通过主键进行二次查询才能获取我们真实所需要的数据。</p><p>在覆盖索引中，二级索引的键值中可以获取所要的数据，避免了对主键的二次查询，减少了 IO 操作，提升了查询效率。</p><p><strong>2. 可以把随机 IO 变成顺序 IO 加快查询效率</strong></p><p>由于覆盖索引是按键值的顺序存储的，对于 I/O 密集型的范围查找来说，对比随机从磁盘读取每一行的数据 I/O 要少的多，因此利用覆盖索引在访问时也可以把磁盘的随机读取的 I/O 转变成索引查找的顺序 I/O。</p><p>由于覆盖索引可以减少树的搜索次数，显著提升查询性能，所以使用覆盖索引是一个常用的性能优化手段。</p><p><strong>弊端:</strong></p><p><code>索引字段的维护</code> 总是有代价的。因此，在建立冗余索引来支持覆盖索引时就需要权衡考虑了。这是业务 DBA，或者称为业务数据架构师的工作。</p><h2 id="_9-如何给字符串添加索引" tabindex="-1"><a class="header-anchor" href="#_9-如何给字符串添加索引" aria-hidden="true">#</a> 9. 如何给字符串添加索引</h2><p>有一张教师表，表定义如下：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>create table teacher(
    ID bigint unsigned primary key,
    email varchar(64),
    ...
)engine=innodb;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>讲师要使用邮箱登录，所以业务代码中一定会出现类似于这样的语句:</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>mysql&gt; select col1, col2 from teacher where email=&#39;xxx&#39;; 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果 email 这个字段上没有索引，那么这个语句就只能做 <code>全表扫描</code> 。</p><h3 id="_9-1-前缀索引" tabindex="-1"><a class="header-anchor" href="#_9-1-前缀索引" aria-hidden="true">#</a> 9.1 前缀索引</h3><p>MySQL是支持前缀索引的。默认地，如果你创建索引的语句不指定前缀长度，那么索引就会包含整个字符串。</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>mysql&gt; alter table teacher add index index1(email); 
#或
mysql&gt; alter table teacher add index index2(email(6));
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这两种不同的定义在数据结构和存储上有什么区别呢?下图就是这两个索引的示意图。</p><p><img src="`+ie+'" alt="image-20220828195350954"></p><p>以及</p><p><img src="'+ne+`" alt="image-20220828195404648"></p><p>如果使用的是 index1 （即 email 整个字符串的索引结构），执行顺序是这样的:</p><ul><li>从 index1 索引树找到满足索引值是’ <a href="mailto:zhangssxyz@xxx.com">zhangssxyz@xxx.com</a> ’的这条记录，取得 ID2 的值;</li><li>到主键上查到主键值是 ID2 的行，判断 email 的值是正确的，将这行记录加入结果集;</li><li>取 index1 索引树上刚刚查到的位置的下一条记录，发现已经不满足email=’ <a href="mailto:zhangssxyz@xxx.com">zhangssxyz@xxx.com</a> ’的条件了，循环结束。</li></ul><p>这个过程中，只需要回主键索引取一次数据，所以系统认为只扫描了一行。</p><p>如果使用的是 index2（即 email(6) 索引结构），执行顺序是这样的：</p><ol><li><p>从 index2 索引树找到满足索引值是’zhangs’的记录，找到的第一个是 ID1;</p></li><li><p>到主键上查到主键值是 ID1 的行，判断出 email 的值不是’ <a href="mailto:zhangssxyz@xxx.com">zhangssxyz@xxx.com</a> ’，这行记录丢弃;</p></li><li><p>取 index2 上刚刚查到的位置的下一条记录，发现仍然是’zhangs’，取出 ID2，再到 ID 索引上取整行然后判断，这次值对了，将这行记录加入结果集;</p></li><li><p>重复上一步，直到在 idxe2 上取到的值不是’zhangs’时，循环结束。</p></li></ol><p>也就是说 <strong>使用前缀索引，定义好长度，就可以做到既节省空间，又不用额外增加太多的查询成本。</strong> 前面已经讲过区分度，区分度越高越好。因为区分度越高，意味着重复的键值越少。</p><h3 id="_9-2-前缀索引对覆盖索引的影响" tabindex="-1"><a class="header-anchor" href="#_9-2-前缀索引对覆盖索引的影响" aria-hidden="true">#</a> 9.2 前缀索引对覆盖索引的影响</h3><p>前面我们说了使用前缀索引可能会增加扫描行数，这会影响到性能。其实，前缀索引的影响不止如此，我们再看一下另外一个场景：</p><p>如果使用 index1（即 email 整个字符串的索引结构）的话，可以利用覆盖索引，从 index1 查到结果后直接就返回了，不需要回到 ID 索引再去查一次。而如果使用 index2（即 email(6) 索引结构）的话，就不得不回到 ID 索引再去判断 email 字段的值。</p><p>即使你将 index2 的定义修改为 email(18) 的前缀索引，这时候虽然 index2 已经包含了所有的信息，但 InnoDB 还是要回到 id 索引再查一下，因为系统并不确定前缀索引的定义是否截断了完整信息。</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select id,email from teacher where email=&#39;songhongkangexxx.com&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>结论:</p><p>使用前缀索引就用不上覆盖索引对查询性能的优化了，这也是你在选择是否使用前缀索引时需要考虑的一个因素。</p></blockquote><h3 id="_9-3-拓展内容" tabindex="-1"><a class="header-anchor" href="#_9-3-拓展内容" aria-hidden="true">#</a> 9.3 拓展内容</h3><p>对于类似于邮箱这样的字段来说，使用前缀索引的效果可能还不错。但是，遇到前缀的区分度不够好的情况时，我们要怎么办呢?</p><p>比如，我们国家的身份证号，一共 18 位，其中前 6 位是地址码，所以同一个县的人的身份证号前 6 位一般会是相同的。</p><p>假设你维护的数据库是一个市的公民信息系统，这时候如果对身份证号做长度为 6 的前缀索引的话，这个索引的区分度就非常低了。按照我们前面说的方法，可能你需要创建长度为 12 以上的前缀索引，才能够满足区分度要求。</p><p>但是，索引选取的越长，占用的磁盘空间就越大，相同的数据页能放下的索引值就越少，搜索的效率也就会越低。那么，如果我们能够确定业务需求里面只有按照身份证进行等值查询的需求，还有没有别的处理方法呢?这种方法，既可以占用更小的空间，也能达到相同的查询效率。有!</p><p>**第一种方式是使用倒序存储。**如果你存储身份证号的时候把它倒过来存，每次查询的时候：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>mysql&gt; select field list from teacher where id_card=reverse(input_id_card_string);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>由于身份证号的最后 6 位没有地址码这样的重复逻辑，所以最后这 6 位很可能就提供了足够的区分度。当然，实践中你还要使用 count(distinct) 方法去做验证。</p><p>**第二种方式是使用 hash 字段。**你可以在表上再创建一个整数字段，来保存身份证的校验码，同时在这个字段上创建索引。</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>mysql&gt; alter table teacher add id_card_crc int unsignedadd index(id_card_crc);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后每次插入新记录的时候，都同时用 crc32() 这个函数得到校验码填到这个新字段，由于校验码可能存在冲突，也就是说两个不同的身份证号通过 crc32() 函数得到的结果可能是相同的，所以你的查询语句 where 部分要判断 id_card 的值是否精确相同。</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>mysql&gt; select field list from twhere id_card_rc=crc32(input_id_card_string) and id_card=input id_card_string
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样，索引的长度变成了4个字节，比原来小了很多。</p><blockquote><p>从查询效率上看，使用 hash 字段方式的查询性能相对更稳定一些，因为 crc32 算出来的值虽然有冲突的概率但是概率非常小，可以认为每次查询的平均扫描行数接近 1。而倒序存储方式毕竟还是用的前缀索引的方式，也就是说还是会增加扫描行数。</p></blockquote><h2 id="_10-索引下推" tabindex="-1"><a class="header-anchor" href="#_10-索引下推" aria-hidden="true">#</a> 10. 索引下推</h2><p>Index Condition Pushdown(ICP) 是 MySQL 5.6 中新特性，是一种在存储引擎层使用索引过滤数据的一种优化方式。ICP 可以减少存储引擎访问基表的次数以及 MySQL 服务器访问存储引擎的次数。</p><h3 id="_10-1-使用前后对比" tabindex="-1"><a class="header-anchor" href="#_10-1-使用前后对比" aria-hidden="true">#</a> 10.1 使用前后对比</h3><p><strong>在不使用 ICP 索引扫描的过程：</strong></p><ul><li>storage 层：只将满足 index key 条件的索引记录对应的整行记录取出，返回给 server 层</li><li>server 层：对返回的数据，使用后面的 where 条件过滤，直至返回最后一行。</li></ul><p><strong>使用 ICP 扫描的过程：</strong></p><ul><li>storage层：首先将 index key 条件满足的索引记录区间确定，然后在索引上使用 index filter 进行过滤。将满足的 index filter 条件的索引记录才去回表取出整行记录返回 server 层。不满足 index filter 条件的索引记录丢弃，不回表、也不会返回 server 层。</li><li>server 层：对返回的数据，使用 table filter 条件做最后的过滤。</li></ul><p><strong>使用前后的成本差别：</strong></p><ul><li>使用前，存储层多返回了需要被 index filter 过滤掉的整行记录</li><li>使用 ICP 后，直接就去掉了不满足 index filter 条件的记录，省去了他们回表和传递到 server 层的成本。</li><li>ICP 的加速效果取决于在存储引擎内通过 ICP 筛选掉的数据的比例。</li></ul><blockquote><p>索引中包含这个字段，但是没有使用到这个字段的索引(比如‘%a%’)，却可以使用这个字段在索引中进行条件过滤，从而减少回表的记录条数，这种情况就叫做索引下推</p></blockquote><h3 id="_10-2-icp-的开启、关闭" tabindex="-1"><a class="header-anchor" href="#_10-2-icp-的开启、关闭" aria-hidden="true">#</a> 10.2 ICP 的开启、关闭</h3><ul><li>默认情况下启用索引条件下推。可以通过设置系统变量 <code>optimizer_switch </code>控制 <code>indexcondition_pushdown</code></li></ul><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>#关闭索引下推
SET optimizer_switch=index_condition_pushdown=off;

#打开索引下推
SET optimizerswitch=indexcondition_pushdown=on;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>当使用索引条件下推时，<code>EXPLAIN</code>语句输出结果中<code>Extra</code>列内容显示为<code>Using index condition</code></li></ul><h3 id="_10-3-icp-使用案例" tabindex="-1"><a class="header-anchor" href="#_10-3-icp-使用案例" aria-hidden="true">#</a> 10.3 ICP 使用案例</h3><p><img src="`+de+`" alt="image-20220828212345673"></p><p>为该表定义联合索引 <code>zip_last_first(zipcode, lastname, firstname)</code> 。如果我们知道了一个人的邮编，但是不确定这个人的姓氏，我们可以进行如下检索:</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SELECT * FROM people
WHERE zipcode= &#39;000001&#39;
AND lastname LIKE &#39;%张%&#39;
AND address LIKE &#39;%北京市%&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行查看SQL的查询计划，Extra 中显示了Using index condition ，这表示使用了索引下推。即：先使用索引的zipcode字段进行匹配，然后 索引下推 使用lastname字段进行过滤，最后再进行回表。</p><p>另外，Using where表示条件中包含需要过滤的非索引列的数据，即address LIKE &#39;%北京市%&#39;这个条件并不是索引列，需要在服务端过滤掉。</p><p><img src="`+ae+'" alt="image-20220828220045412"></p><p><img src="'+le+'" alt="image-20220828212600518"></p><p><img src="'+re+'" alt="image-20220828212715729"></p><h3 id="_10-4-开启和关闭icp的性能对比" tabindex="-1"><a class="header-anchor" href="#_10-4-开启和关闭icp的性能对比" aria-hidden="true">#</a> 10.4 开启和关闭ICP的性能对比</h3><p><img src="'+ce+'" alt="img"></p><p><img src="'+te+'" alt="image-20220828213739703"></p><p>结果如下：</p><p><img src="'+oe+`" alt="image-20220828213847767"></p><p>多次测试效率对比来看，使用ICP优化的查询效率会好一些。这里建议多存储一些数据效果更明显。</p><h3 id="_10-5-icp-的使用条件" tabindex="-1"><a class="header-anchor" href="#_10-5-icp-的使用条件" aria-hidden="true">#</a> 10.5 ICP 的使用条件</h3><ol><li>只能用于二级索引（secondary index）</li><li>explain 显示的执行计划中 type 值（join 类型）为 <code>range</code> 、 <code>ref</code> 、 <code>eq_ref</code> 或者 <code>ref_or_null</code> 。</li><li>explain 显示的执行计划中 type 值（join 类型）为 range 、 ref 、 eq_ref 或者 ref_or_null 。 并非全部 where 条件都可以用 ICP 筛选，如果 where 条件的字段不在索引列中，还是要读取整表的记录到 server 端做 where 过滤。</li><li>ICP 可以用于 MyISAM 和 InnnoDB 存储引擎</li><li>MySQL 5.6 版本的不支持分区表的 ICP 功能，5.7 版本的开始支持。</li><li>当 SQL 使用覆盖索引时，不支持 ICP 优化方法。</li></ol><h2 id="_11-普通索引-vs-唯一索引" tabindex="-1"><a class="header-anchor" href="#_11-普通索引-vs-唯一索引" aria-hidden="true">#</a> 11. 普通索引 vs 唯一索引</h2><p>在不同的业务场景下，应该选择普通索引，还是唯一索引？</p><p>假设你在维护一个居民系统，每个人都有一个唯一的身份证号，而且业务代码已经保证了不会写入两个重复的身份证号。如果居民系统需要按照身份证号查姓名：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select name from CUser where id_card=&#39;xxxxxxxyyyyyyzzzzz&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>所以，你一定会考虑在 id_card 字段上建索引。 由于身份证号字段比较大，不建议把身份证号当做主键。现在有两个选择，要么给 id_card 字段创建 唯一素引，要么创建一个普通索引。如果业务代码已经保证了不会写入重复的身份证号，那么这两个选择逻辑上都是正确的。</p><p>你知道的，InnoDB 的数据是按数据页为单位来读写的。也就是说，当需要读一条记录的时候，并不是将这个记录本身从磁盘读出来，而是以页为单位，将其整体读入内存。在 InnoDB中，每个数据页的大小默认是16KB</p><p>从性能的角度考虑，你选择唯一索引还是普通索引呢？选择的依据是什么呢？</p><p>假设，我们有一个主键列为 ID 的表，表中有字段 k，并且在 k 上有索引，假设字段 k 上的值都不重复。 这个表的建表语句是:</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>mysql&gt; create table test(
    id int primary key,
    k int not null,
    name varchar(16),
    index (k)
)engine=InnoDB;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>表中 R1~R5 的 (ID,k) 值分别为 (100,1)、(200,2)、(300,3)、(500,5) 和 (600,6)。</p><h3 id="_11-1-查询过程" tabindex="-1"><a class="header-anchor" href="#_11-1-查询过程" aria-hidden="true">#</a> 11.1 查询过程</h3><p>假设，执行查询的语句是 <code>select id from test where k=5</code>。</p><ul><li>对于普通索引来说，查找到满足条件的第一个记录 (5,500) 后，需要查找下一个记录，直到碰到第一 个不满足k=5条件的记录。</li><li>对于唯一索引来说，由于索引定义了唯一性，查找到第一个满足条件的记录后，就会停止继续检索。</li></ul><p>那么，这个不同带来的性能差距会有多少呢？答案是， 微乎其微。</p><p>你知道的，InnoDB 的数据是按数据页为单位来读写的。也就是说，当需要读一条记录的时候，并不是将这个记录本身从磁盘读出来，而是以页为单位，将其整体读入内存。在 InnoDB 中，每个数据页的大小默认是 16KB</p><p>因为引擎是按页读写的，所以说，当找到 k=5 的记录的时候，它所在的数据页就都在内存里了。那么，对于普通索引来说，要多做的那一次“查找和判断下一条记录”的操作，就只需要一次指针寻找和一次计算。</p><p>当然，如果 k=5 这个记录刚好是这个数据页的最后一个记录，那么要取下一个记录，必须读取下一个数据页，这个操作会稍微复杂一些。</p><p>但是，我们之前计算过，对于整型字段，一个数据页可以放近千个 key，因此出现这种情况的概率会很低。所以我们计算平均性能差异时，仍可以认为这个操作成本对于现在的 CPU 来说可以忽略不计。</p><h3 id="_11-2-更新过程" tabindex="-1"><a class="header-anchor" href="#_11-2-更新过程" aria-hidden="true">#</a> 11.2 更新过程</h3><p>为了说明普通索引和唯一索引对更新语句性能的影响这个问题，介绍一下 change buffer。</p><p>当需要更新一个数据页时，如果数据页在内存中就直接更新，而如果这个数据页还没有在内存中的话， 在不影响数据一致性的前提下，<code>InooDB 会将这些更新操作缓存在 change buffer 中</code> ，这样就不需要从磁盘中读入这个数据页了。在下次查询需要访问这个数据页的时候，将数据页读入内存，然后执行 change buffer 中与这个页有关的操作。通过这种方式就能保证这个数据逻辑的正确性。</p><p>将 change buffer 中的操作应用到原数据页，得到最新结果的过程称为 <code>merge</code>。除了 <code>访问这个数据页</code> 会触发 merge 外，系统有 <code>后台线程会定期</code> merge。在 <code>数据库正常关闭（shutdown）</code> 的过程中，也会执行 merge 操作。</p><p>如果能够将更新操作先记录在 change buffer， <code>减少读磁盘</code> ，语句的执行速度会得到明显的提升。而且， 数据读入内存是需要占用 buffer pool 的，所以这种方式还能够 <code>避免占用内存</code> ，提高内存利用率。</p><p><strong>那么，什么条件下可以使用 change buffer 呢？</strong></p><p>对干唯一索引来说，所有的更新操作都要先判断这个操作是否违反唯一性约束。比如，要插入 (4.400) 这个记录，就要先判断现在表中是否已经存在 k=4 的记录，而这必须要将数据页读入内存才能判断。如果都已经读入到内存了，那直接更新内存会更快，就没必要使用 change buffer 了。</p><p>因此，<mark>唯一索引的更新就不能使用 change buffer，实际上也只有普通索引可以使用</mark>。</p><p>change buffer 用的是 buffer pool 里的内存，因此不能无限增大。change buffer 的大小，可以通过参数<code>innodb change buffer maxsize </code>来动态设置。这个参数设置为 50 的时候，表示 changebuffer 的大小最多只能占用 buffer pool 的 50%。</p><p><strong>如果要在这张表中插入一个新记录 (4,400) 的话，InnoDB的处理流程是怎样的？</strong></p><p>第一种情况是，这个记录要更新的目标页在内存中。这时：</p><ul><li>对干唯一索引来说，找到 3 和 5 之间的位置，判断为没有冲突，插入这个值，语句执行结束</li><li>对于普通索引来说，找到 3 和 5 之间的位置，插入这个值，语句执行结束。</li></ul><p>这样看来，普通索引和唯一索引对更新语句性能影响的差别，只是一个判断，只会耗费微小的CPU时间。</p><p>第二种情况是，这个记录要更新的目标页不在内存中。这时：</p><ul><li>对于唯一索引来说，需要将数据页读入内存，判断到没有冲突，插入这个值，语句执行结束;</li><li>对于普通索引来说，则是将更新记录在 change buffer，语句执行就结束了。</li></ul><p><mark>将数据从磁盘读入内存涉及随机 I/O 的访问，是数据库里面成本最高的操作之一</mark>。change buffer 因为减少了随机磁盘访问，所以对更新性能的提升是会很明显的。</p><blockquote><p>案例：</p><p>某个业务的库内存命中率突然从 99% 降低到了 75%，整个系统处于阻塞状态，更新语句全部堵住。而探究其原因后，发现这个业务有大量插入数据的操作，而他在前一天把其中的某个普通索引改成了唯一索引。</p></blockquote><h3 id="_11-3-change-buffer的使用场景" tabindex="-1"><a class="header-anchor" href="#_11-3-change-buffer的使用场景" aria-hidden="true">#</a> 11.3 change buffer的使用场景</h3><p>change buffer 只限于用在普通索引的场景下，而不适用于唯一索引。那么，现在有一个问题就是：<strong>普通索引的所有场景，使用 change buffer 都可以起到加速作用吗？</strong></p><p>因为 merge 的时候是真正进行数据更新的时刻，而 change buffer 的主要目的就是将记录的变更动作缓存下来，所以在一个数据页做 merge 之前，change buffer 记录的变更越多（也就是这个页面上要更新的次数越多），收益就越大。</p><p>因此，对于写多读少的业务来说，页面在写完以后马上被访问到的概率比较小，此时 change buffer 的使用效果最好。这种业务模型常见的就是<code>账单类、日志类</code>的系统。</p><p>反过来，假设一个业务的更新模式是写入之后马上会做查询，那么即使满足了条件，将更新先记录在 change buffer，之后由干马上要访问这个数据页，会立即触发 merge 过程，这样随机访问 I/O 的次数不会减少，反而增加了 change buffer 的维护代价。所以，对于这种业务模式来说，changebuffer 反而起到了副作用。</p><ol><li>普通索引和唯一索引应该怎么选择？其实，这两类索引在查询能力上是没差别的，主要考虑的是对 <code>更新性能</code> 的影响。所以，建议你 <code>尽量选择普通索引</code> 。</li><li>在实际使用中会发现， <code>普通索引</code> 和 <code>change buffer</code> 的配合使用，对于 <code>数据量大</code> 的表的更新优化还是很明显的。</li><li>如果所有的更新后面，都马上 <code>伴随着对这个记录的查询</code>，那么你应该关闭<code>change buffer</code> 。而在其他情况下，change buffer 都能提升更新性能。</li><li>由于唯一索引用不上 change buffer 的优化机制，因此如果 <code>业务可以接受</code> ，从性能角度出发建议优先考虑非唯一索引。但是如果&quot;业务可能无法确保&quot;的情况下，怎么处理呢？ <ul><li>首先， 业务正确性优先 。我们的前提是“业务代码已经保证不会写入重复数据”的情况下，讨论性能问题。如果业务不能保证，或者业务就是要求数据库来做约束，那么没得选，必须创建唯一索引。 这种情况下，本节的意义在于，如果碰上了大量插入数据慢、内存命中率低的时候，给你多提供一个排查思路。</li><li>然后，在一些“归档库 ”的场景，你是可以考虑使用唯一索引的。比如，线上数据只需要保留半年， 然后历史数据保存在归档库。这时候，归档数据已经是确保没有唯一键冲突了。要提高归档效率， 可以考虑把表里面的唯一索引改成普通索引。</li></ul></li></ol><h2 id="_12-其它查询优化策略" tabindex="-1"><a class="header-anchor" href="#_12-其它查询优化策略" aria-hidden="true">#</a> 12. 其它查询优化策略</h2><h3 id="_12-1-exists-和-in-的区分" tabindex="-1"><a class="header-anchor" href="#_12-1-exists-和-in-的区分" aria-hidden="true">#</a> 12.1 EXISTS 和 IN 的区分</h3><p><strong>问题：</strong></p><p>不太理解哪种情况下应该使用 EXISTS，哪种情况应该用 IN。选择的标准是看能否使用表的索引吗?</p><p>回答:</p><p>索引是个前提，其实选择与否还是要看表的大小。你可以将选择的标准理解为 <code>小表驱动大表</code>。在这种方式下效率是最高的。</p><p>比如下面这样：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SELECT * FROM A WHERE cc IN (SELECT cc FROM B)

SELECT * FROM A WHERE EXISTS (SELECT cc FROM B WHERE B.cc = A.cc)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当 A 小于 B 时，用 EXISTS。因为 EXISTS 的实现，相当于外表循环，实现的逻辑类似于：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>for i in A
    for j in B
        if j.cc == i.cc then ...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当 B 小于 A 时用 IN，因为实现的逻辑类似于：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>for i in B
    for j in A
        if j.cc == i.cc then ...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结论：<strong>哪个表小就用哪个表来驱动，A 表小就用 EXISTS ，B 表小就用 IN</strong></p><h3 id="_12-2-count-与-count-具体字段-效率" tabindex="-1"><a class="header-anchor" href="#_12-2-count-与-count-具体字段-效率" aria-hidden="true">#</a> 12.2 COUNT(*) 与 COUNT(具体字段) 效率</h3><p>问：在MySQL中统计数据表的行数，可以使用三种方式 <code>SELECT COUNT(*)</code>、<code>SELECT COUNT(1)</code> 和 <code>SELECT COUNT(具体字段)</code>，使用这三者之间的查询效率是怎样的？</p><p>答：</p><p>前提：如果你要统计的是某个字段的非空数据行数，则另当别论，毕竟比较执行效率的前提是结果一样才可以。</p><p><strong>环节1：</strong><code>COUNT(*)</code> 和 <code>COUNT(1)</code> 都是对所有结果进行 COUNT，COUNT(*) 和 COUNT(1) 本质上并没有区别（二者执行时间可能略有差别，不过你还是可以把它俩的执行效率看成是相等的）。如果有 WHERE 子句，则是对所有符合筛选条件的数据行进行统计；如果没有 WHERE 子句，则是对数据表的数据行数进行统计。</p><p>**环节2：**如果是 MvlSAM 存储引擎，统计数据表的行数只需要 O(1)的复杂度，这是因为每张MvlSAM 的数据表都有一个 meta 信息存储了 row_count 值，而一致性则由表级锁来保证。</p><p>如果是 InnoDB 存储引擎，因为 InnoDB 支持事务，采用行级锁和 MVCC 机制，所以无法像 MyISAM 一样，维护一个 row_count 变量，因此需要采用扫描全表，是 O(n) 的复杂度，进行循环+计数的方式来完成统计。</p><p>**环节3：**在 InnoDB 引擎中，如果采用 COUNT(具体字段) 来统计数据行数，要尽量采用二级索引。因为主键采用的索引是聚簇索引，聚簇索引包含的信息多，明显会大于二级索引。对于 COUNT(*) 和COUNT(1) 来说，它们不需要查找具体的行，只是统计行数，系统会自动采用占用空间更小的二级索引来进行统计。</p><p>如果有多个二级索引，会使用 keylen 小的二级索引进行扫描。当没有二级索引的时候，才会采用主键索引来进行统计。</p><h3 id="_12-3-关于-select" tabindex="-1"><a class="header-anchor" href="#_12-3-关于-select" aria-hidden="true">#</a> 12.3 关于 SELECT(*)</h3><p>在表查询中，建议明确字段，不要使用 * 作为查询的字段列表，推荐使用 SELECT &lt;字段列表&gt; 查询。原因：</p><ol><li>MySQL 在解析的过程中，会通过 <code>查询数据字典</code> 将&quot;*&quot;按序转换成所有列名，这会大大的耗费资源和时间。</li><li>无法使用 <code>覆盖索引</code></li></ol><h3 id="_12-4-limit-1-对优化的影响" tabindex="-1"><a class="header-anchor" href="#_12-4-limit-1-对优化的影响" aria-hidden="true">#</a> 12.4 LIMIT 1 对优化的影响</h3><p>针对的是会扫描全表的SQL语句，如果你可以确定结果集只有一条，那么加上 <code>LIMIT 1</code> 的时候，当找到一条结果的时候就不会继续扫描了，这样会加快查询速度。</p><p>如果数据表已经对字段建立了唯一索引，那么可以通过索引进行查询，不会全表扫描的话，就不需要加上 <code>LIMIT 1</code>了。</p><h3 id="_12-5-多使用commit" tabindex="-1"><a class="header-anchor" href="#_12-5-多使用commit" aria-hidden="true">#</a> 12.5 多使用COMMIT</h3><p>只要有可能，在程序中尽量多使用 COMMIT，这样程序的性能得到提高，需求也会因为 COMMIT 所释放的资源而减少。</p><p>COMMIT 所释放的资源:</p><ul><li>回滚段上用于恢复数据的信息</li><li>被程序语句获得的锁</li><li>redo / undo log buffer 中的空间</li><li>管理上述 3 种资源中的内部花费</li></ul><h2 id="_13-淘宝数据库-主键如何设计的" tabindex="-1"><a class="header-anchor" href="#_13-淘宝数据库-主键如何设计的" aria-hidden="true">#</a> 13. 淘宝数据库，主键如何设计的?</h2><p>聊一个实际问题：淘宝的数据库，主键是如何设计的？</p><p>某些错的离谱的答案还在网上年复一年的流传着，甚至还成为了所谓的 MySQL 军规。其中，一个最明显的错误就是关于 MySQL 的主键设计。</p><p>大部分人的回答如此自信：用8字节的 BIGINT 做主键，而不要用INT。<code>错</code>!</p><p>这样的回答，只站在了数据库这一层，而没有 <code>从业务的角度</code> 思考主键。主键就是一个自增 ID 吗？站在 2022 年的新年档口，用自增做主键，架构设计上可能 <code>连及格都拿不到</code>。</p><h3 id="_13-1-自增id的问题" tabindex="-1"><a class="header-anchor" href="#_13-1-自增id的问题" aria-hidden="true">#</a> 13.1 自增ID的问题</h3><p>自增 ID 做主键，简单易懂，几乎所有数据库都支持自增类型，只是实现上各自有所不同而已。自增 ID 除了简单，其他都是缺点，总体来看存在以下几方面的问题：</p><p><strong>1. 可靠性不高</strong></p><p>存在自增ID回溯的问题，这个问题直到最新版本的MySQL 8.0才修复。</p><p><strong>2. 安全性不高</strong></p><p>对外暴露的接口可以非常容易猜测对应的信息。比如：/User/1/ 这样的接口，可以非常容易猜测用户ID的值为多少，总用户数量有多少，也可以非常容易地通过接口进行数据的爬取。</p><p><strong>3. 性能差</strong></p><p>自增 ID 的性能较差，需要在数据库服务器端生成。</p><p><strong>4. 交互多</strong></p><p>业务还需要额外执行一次类似 <code>last_insert_id()</code> 的函数才能知道刚才插入的自增值，这需要多一次的网络交互。在海量并发的系统中，多1条SQL，就多一次性能上的开销。</p><p><strong>5. 局部唯一性</strong></p><p>最重要的一点，自增 ID 是局部唯一，只在当前数据库实例中唯一，而不是全局唯一，在任意服务器间都是唯一的。对于目前分布式系统来说，这简直就是噩梦。</p><h3 id="_13-2-业务字段做主键" tabindex="-1"><a class="header-anchor" href="#_13-2-业务字段做主键" aria-hidden="true">#</a> 13.2 业务字段做主键</h3><p>为了能够唯一地标识一个会员的信息，需要为 <code>会员信息表</code> 设置一个主键。那么，怎么为这个表设置主键，才能达到我们理想的目标呢? 这里我们考虑业务字段做主键。 表数据如下:</p><p>在这表里，哪个字段比较合适呢?</p><ul><li><strong>选择卡号(cardno)</strong></li></ul><p>会员卡号（cardno）看起来比较合适，因为会员卡号不能为空，而且有唯一性，可以用来标识一条会员记录。</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>mysql&gt; CREATE TABLE demo.membermaster
-&gt; (
-&gt; cardno CHAR(8) PRIMARY KEY, -- 会员卡号为主键 -&gt; membername TEXT,
-&gt; memberphone TEXT,
-&gt; memberpid TEXT,
-&gt; memberaddress TEXT,
-&gt; sex TEXT,
-&gt; birthday DATETIME
-&gt; );
Query OK, 0 rows affected (0.06 sec)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不同的会员卡号对应不同的会员，字段“cardno”唯一地标识某一个会员。如果都是这样，会员卡号与会员一一对应，系统是可以正常运行的。</p><p>但实际情况是， <code>会员卡号可能存在重复使用</code> 的情况。比如，张三因为工作变动搬离了原来的地址，不再到商家的门店消费了 (退还了会员卡)，于是张三就不再是这个商家门店的会员了。但是，商家不想让 这个会 员卡空着，就把卡号是“10000001”的会员卡发给了王五。</p><p>从系统设计的角度看，这个变化只是修改了会员信息表中的卡号是“10000001”这个会员 信息，并不会影响到数据一致性。也就是说，修改会员卡号是“10000001”的会员信息， 系统的各个模块，都会获取到修改后的会员信息，不会出现“有的模块获取到修改之前的会员信息，有的模块获取到修改后的会员信息， 而导致系统内部数据不一致”的情况。因此，从 <code>信息系统层面</code> 上看是没问题的。</p><p>但是从使用系统的业务层面 来看，就有很大的问题 了，会对商家造成影响。</p><p>比如，我们有一个销售流水表(trans)，记录了所有的销售流水明细。2020 年 12 月 01 日，张三在门店购买了一本书，消费了 89 元。那么，系统中就有了张三买书的流水记录，如下所示:</p><p><img src="`+ue+`" alt="image-20220829162818316"></p><p>接着，我们查询一下 2020 年 12 月 01 日的会员销售记录:</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>mysql&gt; SELECT b.membername,c.goodsname,a.quantity,a.salesvalue,a.transdate
-&gt; FROM demo.trans AS a
-&gt; JOIN demo.membermaster AS b
-&gt; JOIN demo.goodsmaster AS c
-&gt; ON (a.cardno = b.cardno AND a.itemnumber=c.itemnumber); 
+------------+-----------+----------+------------+---------------------+ 
| membername | goodsname | quantity | salesvalue |           transdate | 
+------------+-----------+----------+------------+---------------------+ 
| 张三        |        书 |    1.000 |      89.00 | 2020-12-01 00:00:00 | 
+------------+-----------+----------+------------+---------------------+ 
1 row in set (0.00 sec)

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果会员卡“10000001”又发给了王五，我们会更改会员信息表。导致查询时:</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>mysql&gt; SELECT b.membername,c.goodsname,a.quantity,a.salesvalue,a.transdate
-&gt; FROM demo.trans AS a
-&gt; JOIN demo.membermaster AS b
-&gt; JOIN demo.goodsmaster AS c
-&gt; ON (a.cardno = b.cardno AND a.itemnumber=c.itemnumber); 
+------------+-----------+----------+------------+---------------------+ 
| membername | goodsname | quantity | salesvalue | transdate           | 
+------------+-----------+----------+------------+---------------------+ 
| 王五        |        书 |    1.000 |      89.00 | 2020-12-01 00:00:00 | 
+------------+-----------+----------+------------+---------------------+ 
1 row in set (0.01 sec)

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这次得到的结果是：王五在 2020 年 12 月 01 日，买了一本书，消费 89 元。显然是错误的!结论：千万不能把会员卡号当做主键。</p><ul><li><strong>选择会员电话或身份证号</strong></li></ul><p>会员电话可以做主键吗？不行的。在实际操作中，手机号也存在 <code>被运营商收回</code> ，重新发给别人用的情况。</p><p>那身份证号行不行呢？好像可以。因为身份证决不会重复，身份证号与一个人存在一一对 应的关系。可问题是，身份证号属于<code> 个人隐私</code> ，顾客不一定愿意给你。要是强制要求会员必须登记身份证号，会把很多客人赶跑的。其实，客户电话也有这个问题，这也是我们在设计会员信息表的时候，允许身份证号和电话都为空的原因。</p><p><strong>所以，建议尽量不要用跟业务有关的字段做主键。毕竟，作为项目设计的技术人员，我们谁也无法预测在项目的整个生命周期中，哪个业务字段会因为项目的业务需求而有重复，或者重用之类的情况出现。</strong></p><blockquote><p>经验:</p><p>刚开始使用 MySQL 时，很多人都很容易犯的错误是喜欢用业务字段做主键，想当然地认为了解业务需求，但实际情况往往出乎意料，而更改主键设置的成本非常高。</p></blockquote><h3 id="_13-3-淘宝的主键设计" tabindex="-1"><a class="header-anchor" href="#_13-3-淘宝的主键设计" aria-hidden="true">#</a> 13.3 淘宝的主键设计</h3><p>在淘宝的电商业务中，订单服务是一个核心业务。请问， <code>订单表的主键</code> 淘宝是如何设计的呢？是自增ID吗？</p><p>打开淘宝，看一下订单信息：</p><p><img src="`+me+`" alt="image-20220829163123686"></p><p>从上图可以发现，订单号不是自增ID!我们详细看下上述4个订单号:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1550672064762308113
1481195847180308113
1431156171142308113
1431146631521308113

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>订单号是 19 位的长度，且订单的最后 5 位都是一样的，都是 08113。且订单号的前面 14 位部分是单调递增的。</p><p>大胆猜测，淘宝的订单 ID 设计应该是：<code>订单ID = 时间 + 去重字段 + 用户ID后6位尾号</code></p><p>这样的设计能做到全局唯一，且对分布式系统查询及其友好。</p><h3 id="_13-4-推荐的主键设计" tabindex="-1"><a class="header-anchor" href="#_13-4-推荐的主键设计" aria-hidden="true">#</a> 13.4 推荐的主键设计</h3><p><code>非核心业务</code>：对应表的主键自增 ID，如告警、日志、监控等信息。</p><p><code>核心业务</code>：<strong>主键设计至少应该是全局唯一且是单调递增</strong>。全局唯一保证在各系统之间都是唯一的，单调递增是希望插入时不影响数据库性能。</p><p>这里推荐最简单的一种主键设计：UUID。</p><p><strong>UUID的特点:</strong></p><p>全局唯一，占用 36 字节，数据无序，插入性能差。</p><p><strong>认识UUID:</strong></p><ul><li>为什么UUID是全局唯一的?</li><li>为什么UUID占用36个字节?</li><li>为什么UUID是无序的?</li></ul><p>MySQL数据库的UUID组成如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>UUID = 时间 + UUID 版本（16字节）- 时钟序列（4字节） - MAC 地址（12字节）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们以 UUID 值：e0ea12d4-6473-11eb-943c-00155dbaa39d 举例</p><p><img src="`+ve+`" alt="image-20220830155849839"></p><ol><li>为什么UUID是全局唯一的？</li></ol><p>在 UUID 中时间部分占用 60 位，存储的类似 TIMESTAMP 的时间戳，但表示的是从1582-10-15 00:00:00.00 到现在的 100 ns 的计数。可以看到 UUID 存储的时间精度比 TIMESTAMPE 更高，时间维度发生重复的概率降低到1/100ns。</p><p>时钟序列是为了避免时钟被回拨导致产生时间重复的可能性。MAC地址用于全局唯一。</p><ol start="2"><li>为什么UUID占用36个字节？</li></ol><p>UUID 根据字符串进行存储，设计时还带有无用&quot;-&quot;字符串，因此总共需要36个字节。</p><ol start="3"><li>为什么UUID是随机无序的呢？</li></ol><p>因为 UUID 的设计中，将时间低位放在最前面，而这部分的数据是一直在变化的，并且是无序。</p><p>改造UUID</p><p>若将时间高低位互换，则时间就是单调递增的了，也就变得单调递增了。MySQL 8.0 可以更换时间低位和时间高位的存储方式，这样 UUID 就是有序的UUID了。</p><p>MySQL 8.0 还解决了 UUID 存在的空间占用的问题，除去了 UUID 字符串中无意义的&quot;-&quot;字符串，并且将字符串用二进制类型保存，这样存储空间降低为了16字节。</p><p>可以通过 MySQL 8.0 提供的 uuid_to_bin 函数实现上述功能，同样的，MySQL 也提供了 bin_to_uuid 函数进行 转化：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SET @uuid = UUID();
SELECT @uuid,uuid_to_bin(@uuid),uuid_to_bin(@uuid,TRUE);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+pe+'" alt="image-20220118215859456"></p><p><strong>通过函数 <code>uuid_to_bin(@uuid,true)</code> 将 UUID 转化为有序 UUID 了</strong>。全局唯一 + 单调递增，这不就是我们想要的主键！</p><h3 id="_13-5-有序-uuid-性能测试" tabindex="-1"><a class="header-anchor" href="#_13-5-有序-uuid-性能测试" aria-hidden="true">#</a> 13.5 有序 UUID 性能测试</h3><p>16 字节的有序 UUID，相比之前 8 字节的自增ID，性能和存储空间对比究竟如何呢？</p><p>我们来做一个测试，插入 1 亿条数据，每条数据占用 500 字节，含有 3 个二级索引，最终的结果如下所示：</p><p><img src="'+be+'" alt="image-20220830155246358"></p><p>从上图可以看到插入 1 亿条数据有序 UUID 是最快的，而且在实际业务使用中有序 UUID 在 <code>业务端就可以生成</code> 。还可以进一步减少 SQL 的交互次数。</p><p>另外，虽然有序 UUID 相比自增 ID 多了 8 个字节，但实际只增大了 3G 的存储空间，还可以接受。</p><blockquote><p>在当今的互联网环境中，非常不推荐自增 ID 作为主键的数据库设计。更推荐类似有序 UUID 的全局唯一的实现。</p><p>另外在真实的业务系统中，主键还可以加入业务和系统属性，如用户的尾号，机房的信息等。这样的主键设计就更为考验架构师的水平了。</p></blockquote><p>如果不是 MySQL8.0 肿么办?</p><p>手动赋值字段做主键！</p><p>比如，设计各个分店的会员表的主键，因为如果每台机器各自产生的数据需要合并，就可能会出现主键重复的问题。</p><p>可以在总部 MySQL 数据库中，有一个管理信息表，在这个表中添加一个字段，专门用来记录当前会员编号的最大值。</p><p>门店在添加会员的时候，先到总部 MySQL 数据库中获取这个最大值，在这个基础上加 1，然后用这个值作为新会员的“id”同时，更新总部 MySQL 数据库管理信息表中的当前会员编号的最大值。</p><p>这样一来，各个门店添加会员的时候，都对同一个总部 MySQL 数据库中的数据表字段进行操作，就解决了各门店添加会员时会员编号冲突的问题。</p>',445);function Te(Ce,xe){const i=c("ExternalLinkIcon");return l(),r("div",null,[Ee,_e,e("p",null,[s("官网： "),e("a",he,[s("http://www.atguigu.com"),n(i)])]),Ne,e("h3",Le,[Ie,s(" 2.2 "),e("a",ye,[s("最左匹配原则"),n(i)])]),Re,e("h2",fe,[qe,s(" 3. "),e("a",Oe,[s("关联查询"),n(i)]),s("优化")]),Ae])}const Me=a(ge,[["render",Te],["__file","第 10 章_索引优化与查询优化.html.vue"]]);export{Me as default};
