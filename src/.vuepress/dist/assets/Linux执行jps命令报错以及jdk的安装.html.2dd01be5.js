import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as p,c as t,d as a,e as o,b as i,a as s,r}from"./app.9b10ba0a.js";const l="/assets/image-20230416192004890.ded9c300.png",c="/assets/image-20230416192054623.99a45e5a.png",d="/assets/image-20230416192131010.5650f1a0.png",m="/assets/image-20230416192211390.a2a5d2c8.png",u="/assets/image-20230416192556681.2f921786.png",g="/assets/image-20230416193203685.19a31c94.png",v="/assets/image-20230416193408172.03a12bb3.png",k="/assets/image-20230416202300244.fa729481.png",_={},b=s('<h2 id="linux执行jps命令报错" tabindex="-1"><a class="header-anchor" href="#linux执行jps命令报错" aria-hidden="true">#</a> Linux执行jps命令报错</h2><p><strong>前言：这里在学习Zookeeper的时候，需要使用jps命令查看运行状态的时候发现报错：</strong></p><blockquote><p>-bash: jps: command not found</p></blockquote><p>首先发现问题：</p><p>产生的原因是Java的环境变量出错</p><blockquote><p>执行 <code>whereis java</code></p></blockquote><p><img src="'+l+'" alt="image-20230416192004890"></p><p>发现一串奇怪的路径，说明这只是java的执行路径，而非java的安装路径。</p><blockquote><ul><li>执行 <code>which java</code> 来获取java路径：</li></ul></blockquote><p><img src="'+c+'" alt="image-20230416192054623"></p><p>我们发现又一个奇怪的路径，其实这是对java路径的一个软链接，查询此软链接的指向：</p><p><img src="'+d+'" alt="image-20230416192131010"></p><p>查询这个指向的真实源目录：</p><p><img src="'+m+`" alt="image-20230416192211390"></p><p>终于我们获取到了java的安装路径，但这个路径为嘛有一大串？？？原因是这是CentOS自带的open-jdk...</p><ul><li>首先我们得将它给干掉：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">rpm</span> <span class="token parameter variable">-qa</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">java</span> <span class="token comment">#查看java文件</span>
<span class="token function">sudo</span> <span class="token function">rpm</span> <span class="token parameter variable">-qa</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">java</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">rpm</span> <span class="token parameter variable">-e</span> <span class="token parameter variable">--nodeps</span> <span class="token comment">#root权限下删除所有java文件</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>冷知识，</p><p>sudo进入root模式：</p><p>ln -s target_file_name source_file_name #建立软链接</p><p>rm -rf xxxx/ 加了个/ #这个是删除文件夹</p><p>rm -rf xxxx 没有/ #这个是删除软链接</p></blockquote><p><strong>查看Linux系统是否有自带的jdk：</strong></p><p><strong>注意：全程使用root用户来操作！</strong></p><p>1、输入：java -version 如果有输出版本信息，则需要卸载原本的jdk，如果没有说明linux系统没有安装jdk可以跳过下面步骤直接进行下一步的安装。</p><p>2、发现有版本信息输入：rpm -qa | grep java 检测jdk的安装包，（注意：rpm命令符没有时记得下载一个输入：apt-get install +命令名称）</p><p>3、接着进行一个个删除包，输入：rpm -e --nodeps 包名</p><p>4、最后再次：rpm -qa | grep java 检查是否删除完即可（此步由于之前已经卸载，所以没有截图）</p><h2 id="linux安装jdk8" tabindex="-1"><a class="header-anchor" href="#linux安装jdk8" aria-hidden="true">#</a> Linux安装jdk8</h2><p><strong>1.下载jdk安装包</strong></p><p>首先，去到oracle官网下载jdk8，这里我们选择tar.gz的压缩包。</p>`,27),h={href:"https://www.oracle.com/java/technologies/downloads/",target:"_blank",rel:"noopener noreferrer"},j=s('<p><img src="'+u+'" alt="image-20230416192556681"></p><ul><li>发现下载的时候版本眼花缭乱，分为tar.gz、rpm、yum文件，区别是：</li></ul><blockquote><ol><li>tar.gz： 本质上就是一种压缩包，里面的一些配置都需要我们手动操作</li><li>rpm： Rethat红帽公司发布的一个功能，redhat package manager，.rpm更像一个软件安装包，意为tar.gz的傻瓜式安装，全自动化</li><li>yum： rpm的究极傻瓜版...类似于java-maven的作用，自动下载、自动安装、自动装配，甚至可以补丢失的依赖包，一般使用这个命令可以查看对应插件官网的目前能下载的插件列表，然后再选择进行安装，十分的方便</li></ol></blockquote><p><strong>2.解压</strong></p><p>安装完成后通过远程传输工具将文件传输到Linux的 /opt 目录下</p><p>opt目录是linux专门给用户装额外软件的目录，我们的jdk可以放在该目录下</p><p><img src="'+g+`" alt="image-20230416193203685"></p><p>之后输入指令解压压缩包</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> jdk-8u361-linux-x64.tar.gz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上图的 jdk1.8.0_361是已经编译好的！</p><p><strong>3.配置环境变量</strong></p><p>修改配置文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vim</span> /etc/profile
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在文件最底部加上</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># jdk环境配置--这里的路径根据自己的来</span>
<span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/opt/java/jdk1.8.0_361
<span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>/opt/java/jdk1.8.0_361/bin:<span class="token environment constant">$PATH</span>
<span class="token builtin class-name">export</span> JAVA_HOME <span class="token environment constant">PATH</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如图所示：</p><p><img src="`+v+`" alt="image-20230416193408172"></p><p>最后esc退出编辑模式</p><p>输入 :wq 保存退出</p><p><strong>4.使配置文件生效</strong></p><p>输入指令使配置文件生效</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">source</span> /etc/profile
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输入java和javac会输出信息则表示jdk的安装大功告成</p><p><img src="`+k+'" alt="image-20230416202300244"></p><p>自此jdk8在linux上的安装完成！</p>',25);function x(f,q){const n=r("ExternalLinkIcon");return p(),t("div",null,[b,a("p",null,[a("a",h,[o("https://www.oracle.com/java/technologies/downloads/"),i(n)])]),j])}const A=e(_,[["render",x],["__file","Linux执行jps命令报错以及jdk的安装.html.vue"]]);export{A as default};
