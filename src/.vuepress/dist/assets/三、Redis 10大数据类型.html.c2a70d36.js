import{_ as i}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as p,c as l,d as s,e,b as n,a as t,r as o}from"./app.9b10ba0a.js";const r="/assets/2023-03-25-23-53-47-image.95ee6a60.png",c="/assets/2023-03-25-23-52-38-image.60a2ec95.png",d="/assets/2023-03-25-23-54-26-image.131a37ff.png",u="/assets/2023-03-25-23-59-00-image.70565282.png",m="/assets/2023-03-26-00-04-07-image.d8694c59.png",b="/assets/2023-03-26-01-27-26-image.b9ad0b64.png",k="/assets/2023-03-26-01-27-44-image.eba05475.png",g="/assets/2023-03-26-01-29-24-image.8a9bbbc1.png",h="/assets/2023-03-26-16-40-06-image.edb110b4.png",v="/assets/2023-03-26-15-54-27-image.eb4482b1.png",q="/assets/2023-03-26-15-55-26-image.bcb4ff0b.png",_="/assets/2023-03-26-17-15-33-image.6618099d.png",f="/assets/2023-03-26-16-02-53-image.46e41130.png",x="/assets/2023-03-26-16-04-10-image.c57044f1.png",y="/assets/2023-03-26-16-06-34-image.acb9e03a.png",R="/assets/2023-03-26-16-10-47-image.31fe0c02.png",E="/assets/2023-03-26-16-12-29-image.6e2b9777.png",S="/assets/2023-03-26-17-17-14-image.48b66c6a.png",I="/assets/2023-03-26-17-18-05-image.598ea838.png",D="/assets/2023-03-26-16-15-57-image.c598180b.png",A="/assets/2023-03-26-16-22-25-image.851645fa.png",T="/assets/2023-03-26-16-24-28-image.7cc172a1.png",N="/assets/2023-03-26-16-30-14-image.39c12936.png",O="/assets/2023-03-26-16-32-09-image.030f95d7.png",B="/assets/2023-03-26-16-32-45-image.61537b19.png",L="/assets/2023-03-26-17-09-46-image.8dc183ef.png",C="/assets/2023-03-26-17-11-14-image.ebc347eb.png",G="/assets/2023-03-26-17-12-19-image.9b929bf8.png",P="/assets/2023-03-26-17-21-50-image.444e8c92.png",M="/assets/2023-03-26-17-23-51-image.3af90d0c.png",X="/assets/2023-03-26-17-25-27-image.e458c3ef.png",w="/assets/2023-03-26-20-22-56-image.d3b359d7.png",z="/assets/2023-03-26-17-30-26-image.c4be2f6e.png",U="/assets/2023-03-26-17-33-41-image.35650eed.png",Z="/assets/2023-03-26-17-37-44-image.0ec86b8f.png",H="/assets/2023-03-26-17-39-16-image.521ed634.png",K="/assets/2023-03-26-17-43-13-image.c45977a0.png",F="/assets/2023-03-26-17-49-28-image.287ceec5.png",V="/assets/2023-03-26-17-49-38-image.4e091161.png",W="/assets/2023-03-26-17-53-50-image.ef3e7821.png",Y="/assets/2023-03-26-18-12-14-image.223dfdf7.png",j="/assets/2023-03-26-18-15-04-image.97f043fa.png",Q="/assets/2023-03-26-18-15-44-image.1a705c7e.png",$="/assets/2023-03-26-18-17-47-image.bd181877.png",J="/assets/2023-03-26-20-21-04-image.88c29355.png",ss="/assets/2023-03-26-20-20-26-image.ab35d639.png",es="/assets/2023-03-26-20-11-49-image.854c01ea.png",as="/assets/2023-03-26-20-14-17-image.01103734.png",ns="/assets/2023-03-26-20-15-58-image.9b2cbe6e.png",ts="/assets/2023-03-26-20-17-28-image.01c8ad44.png",is="/assets/2023-03-26-20-30-24-image.d5be2f78.png",ps="/assets/2023-03-26-20-42-28-image.f9563a8a.png",ls="/assets/2023-03-26-20-47-00-image.128f678f.png",os="/assets/2023-03-26-20-48-16-image.3c5b0596.png",rs="/assets/2023-03-26-20-50-53-image.313a2186.png",cs="/assets/2023-03-26-21-04-53-image.aeadb526.png",ds="/assets/2023-03-26-21-08-22-image.026516cf.png",us="/assets/2023-03-26-21-16-19-image.df0ca6d5.png",ms="/assets/2023-03-26-21-28-02-image.61b5b81c.png",bs="/assets/2023-03-26-21-33-52-image.2569ac0e.png",ks="/assets/2023-03-26-21-34-39-image.cd0490c6.png",gs="/assets/2023-03-26-21-42-18-image.f026c2e9.png",hs="/assets/2023-03-26-22-39-51-image.b3a91957.png",vs="/assets/2023-03-26-22-42-33-image.a3d3beb3.png",qs="/assets/2023-03-26-22-59-33-image.82ef992c.png",_s="/assets/2023-03-26-23-01-31-image.b637f32e.png",fs="/assets/2023-03-26-23-13-59-image.da6de3ed.png",xs="/assets/2023-03-26-23-28-40-image.1b121ec3.png",ys="/assets/2023-03-26-23-34-06-image.cd008878.png",Rs="/assets/2023-03-27-14-50-19-image.04823a23.png",Es="/assets/2023-03-27-14-54-09-image.3185162c.png",Ss="/assets/2023-03-27-14-57-18-image.370c1cbb.png",Is="/assets/2023-03-27-15-22-50-image.b7c1654d.png",Ds="/assets/2023-03-27-15-28-45-image.225c87d1.png",As="/assets/2023-03-27-15-31-00-image.1e1e1634.png",Ts="/assets/2023-03-27-15-31-09-image.1dce99f4.png",Ns="/assets/2023-03-27-15-35-41-image.c3ca85a2.png",Os="/assets/2023-03-27-16-07-42-image.48ca16b6.png",Bs="/assets/2023-03-27-16-08-32-image.47270cfd.png",Ls="/assets/2023-03-27-16-14-43-image.f3cc196c.png",Cs="/assets/2023-03-27-16-14-55-image.715caae5.png",Gs="/assets/2023-03-27-16-22-09-image.0fc824c5.png",Ps="/assets/2023-03-27-17-33-19-image.939a1660.png",Ms="/assets/2023-03-27-17-38-25-image.633059d7.png",Xs="/assets/2023-03-27-17-41-16-image.b68b3d64.png",ws="/assets/2023-03-27-17-42-17-image.998e3f4e.png",zs="/assets/2023-03-27-17-43-52-image.729f210f.png",Us="/assets/2023-03-27-17-45-42-image.9b7d9fe0.png",Zs="/assets/2023-03-27-17-47-27-image.40ba0e92.png",Hs="/assets/2023-03-27-17-48-29-image.5f92897a.png",Ks="/assets/2023-03-27-17-52-41-image.136023bd.png",Fs="/assets/2023-03-27-17-56-00-image.80469600.png",Vs="/assets/2023-03-28-17-04-27-image.2f2ee5d5.png",Ws="/assets/2023-03-28-17-05-53-image.61316b70.png",Ys="/assets/2023-03-28-17-07-02-image.63cfc6a1.png",js="/assets/2023-03-28-17-10-30-image.ba07ae82.png",Qs="/assets/2023-03-28-17-12-02-image.c44a4e35.png",$s="/assets/2023-03-28-17-12-35-image.a141047a.png",Js="/assets/2023-03-28-17-22-32-image.bb7de759.png",se="/assets/2023-03-28-17-30-56-image.48ddbe05.png",ee="/assets/2023-03-28-17-33-19-image.ca76a1cb.png",ae="/assets/2023-03-28-17-39-54-image.eb885c40.png",ne="/assets/2023-03-28-17-46-03-image.6be3f685.png",te="/assets/2023-03-28-17-54-34-image.c353b304.png",ie="/assets/2023-03-28-17-59-29-image.b4eba925.png",pe="/assets/2023-03-28-18-00-54-image.c592a878.png",le="/assets/2023-03-28-18-13-34-image.903a2149.png",oe="/assets/2023-03-28-18-16-25-image.e4bd5061.png",re="/assets/2023-03-28-18-17-15-image.c881a66e.png",ce="/assets/2023-03-28-18-17-39-image.e869615a.png",de="/assets/2023-03-28-18-22-20-image.b064d63f.png",ue="/assets/2023-03-28-18-32-07-image.ecff5bf5.png",me="/assets/2023-03-28-18-32-56-image.feb8d95a.png",be="/assets/2023-03-28-18-33-35-image.f05e33d4.png",ke="/assets/2023-03-28-18-34-40-image.dc7c9aaa.png",ge="/assets/2023-03-28-18-36-02-image.920a34f3.png",he="/assets/2023-03-28-18-36-43-image.f1bfc55d.png",ve="/assets/2023-03-28-18-37-16-image.f9545de4.png",qe="/assets/2023-03-28-18-41-34-image.3b4bd320.png",_e="/assets/2023-03-28-18-41-43-image.095ff3c5.png",fe="/assets/2023-03-28-18-42-44-image.e2e2a8e3.png",xe="/assets/2023-03-28-18-48-54-image.1ed0bac4.png",ye="/assets/2023-03-28-18-59-31-image.b3d4d482.png",Re="/assets/2023-03-28-18-49-35-image.810a72b8.png",Ee="/assets/2023-03-28-19-06-51-image.cb8f8a78.png",Se="/assets/2023-03-28-23-56-01-image.cc7864eb.png",Ie="/assets/2023-03-28-23-56-13-image.ec7b6efc.png",De="/assets/2023-03-28-23-56-31-image.68d6e963.png",Ae="/assets/2023-03-28-23-57-17-image.b4c6dd8f.png",Te="/assets/2023-03-28-23-57-27-image.09e66a5c.png",Ne="/assets/2023-03-28-23-58-20-image.a94edf81.png",Oe="/assets/2023-03-29-00-00-42-image.3a0a531e.png",Be="/assets/2023-03-29-00-02-23-image.6f031350.png",Le="/assets/2023-03-29-00-03-38-image.b903d49a.png",Ce="/assets/2023-03-29-00-04-29-image.d9cf92f8.png",Ge={},Pe=s("h2",{id:"_01、which-10",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_01、which-10","aria-hidden":"true"},"#"),e(" 01、which 10")],-1),Me={href:"https://redis.io/docs/data-types/",target:"_blank",rel:"noopener noreferrer"},Xe=t('<p><img src="'+r+'" alt=""></p><p><img src="'+c+'" alt=""></p><h3 id="一图" tabindex="-1"><a class="header-anchor" href="#一图" aria-hidden="true">#</a> 一图</h3><p><img src="'+d+'" alt=""></p><h3 id="提前声明" tabindex="-1"><a class="header-anchor" href="#提前声明" aria-hidden="true">#</a> 提前声明</h3><blockquote><p>这里说的数据类型是value的数据类型，key的类型就是字符串</p></blockquote><h3 id="十大数据类型" tabindex="-1"><a class="header-anchor" href="#十大数据类型" aria-hidden="true">#</a> 十大数据类型</h3><ol><li>redis字符串（String）</li></ol><blockquote><p>String（字符串）</p><p>string是redis最基本的类型，一个key对应一个value。</p><p>string类型是二进制安全的，意思是redis的string可以包含任何数据，比如jpg图片或者序列化的对象 。</p><p>string类型是Redis最基本的数据类型，一个redis中字符串value最多可以是512M</p></blockquote><ol start="2"><li>redis列表（List）</li></ol><blockquote><p>List（列表）</p><p>Redis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）</p><p>它的底层实际是个双端链表，最多可以包含 2^32 - 1 个元素 (4294967295, 每个列表超过40亿个元素)</p></blockquote><ol start="3"><li>redis哈希表</li></ol><blockquote><p>Redis hash 是一个 string 类型的 field（字段） 和 value（值） 的映射表，hash 特别适合用于存储对象。</p><p>Redis 中每个 hash 可以存储 2^32 - 1 键值对（40多亿）</p></blockquote><ol start="4"><li>redis集合（Set）</li></ol><blockquote><p>Set（集合）</p><p>Redis 的 Set 是 String 类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据，集合对象的编码可以是 intset 或者 hashtable。</p><p>Redis 中Set集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。</p><p>集合中最大的成员数为 2^32 - 1 (4294967295, 每个集合可存储40多亿个成员)</p></blockquote><ol start="5"><li>redis有序集合（ZSet）</li></ol><blockquote><p>zset(sorted set：有序集合)</p><p>Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。</p><p>不同的是每个元素都会关联一个double类型的分数，redis正是通过分数来为集合中的成员进行从小到大的排序。</p><p>zset的成员是唯一的,但分数(score)却可以重复。</p><p>zset集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。 集合中最大的成员数为 2^32 - 1</p></blockquote><ol start="6"><li>redis地理空间</li></ol><blockquote><p>Redis GEO 主要用于存储地理位置信息，并对存储的信息进行操作，包括</p><p>添加地理位置的坐标。</p><p>获取地理位置的坐标。</p><p>计算两个位置之间的距离。</p><p>根据用户给定的经纬度坐标来获取指定范围内的地理位置集合</p></blockquote><ol start="7"><li>redis基数统计（HyperLogLog）</li></ol><blockquote><p>HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定且是很小的。</p><p>在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基 数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。</p><p>但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。</p></blockquote><ol start="8"><li>redis位图（bitmap）</li></ol><p><img src="'+u+'" alt=""></p><blockquote><p>由0和1状态表现的二进制位的bit数组</p></blockquote><ol start="9"><li>redis位域（bitfield）</li></ol><blockquote><p>通过bitfield命令可以一次性操作多个比特位域(指的是连续的多个比特位)，它会执行一系列操作并返回一个响应数组，这个数组中的元素对应参数列表中的相应操作的执行结果。</p><p>说白了就是通过bitfield命令我们可以一次性对多个比特位域进行操作。</p></blockquote><ol start="10"><li>redis流（Stream）</li></ol><blockquote><p>Redis Stream 是 Redis 5.0 版本新增加的数据结构。</p><p>Redis Stream 主要用于消息队列（MQ，Message Queue），Redis 本身是有一个 Redis 发布订阅 (pub/sub) 来实现消息队列的功能，但它有个缺点就是消息无法持久化，如果出现网络断开、Redis 宕机等，消息就会被丢弃。</p><p>简单来说发布订阅 (pub/sub) 可以分发消息，但无法记录历史消息。</p><p>而 Redis Stream 提供了消息的持久化和主备复制功能，可以让任何客户端访问任何时刻的数据，并且能记住每一个客户端的访问位置，还能保证消息不丢失</p></blockquote><h2 id="_02、哪里去获取redis常见数据类型操作命令" tabindex="-1"><a class="header-anchor" href="#_02、哪里去获取redis常见数据类型操作命令" aria-hidden="true">#</a> 02、哪里去获取redis常见数据类型操作命令</h2>',29),we={href:"https://redis.io/commands/",target:"_blank",rel:"noopener noreferrer"},ze={href:"http://www.redis.cn/commands.html",target:"_blank",rel:"noopener noreferrer"},Ue=t('<h2 id="_03、redis-键-key" tabindex="-1"><a class="header-anchor" href="#_03、redis-键-key" aria-hidden="true">#</a> 03、Redis 键（Key）</h2><h3 id="常用" tabindex="-1"><a class="header-anchor" href="#常用" aria-hidden="true">#</a> 常用</h3><p><img src="'+m+'" alt=""></p><h3 id="案例" tabindex="-1"><a class="header-anchor" href="#案例" aria-hidden="true">#</a> 案例</h3><blockquote><p>keys *    查看当前库所有的key</p></blockquote><blockquote><p>exists key    判断某个key是否存在</p></blockquote><blockquote><p>del key    删除指定的key数据</p></blockquote><blockquote><p>type key    查看你的key是什么类型</p></blockquote><blockquote><p>unlink key    非阻塞删除，仅仅将keys从keyspace元数据中删除，真正删除会在后续异步中操作。</p></blockquote><blockquote><p>ttl key    查看还有多少秒过期，-1代表永不过期，-2代表已过期</p></blockquote><blockquote><p>expire key 秒钟    为给定的key设置过期时间</p><hr><p>设置 Key 过期时间，默认-1表示永不过期，-2表示已过期</p><p>Redis 的过期时间设置有四种形式：</p><p>• EXPIRE 秒——设置指定的过期时间(秒)，表示的是时间间隔。</p><p>• PEXPIRE 毫秒——设置指定的过期时间，以毫秒为单位，表示的是时间间隔。</p><p>• EXPIREAT 时间戳-秒——设置指定的 Key 过期的 Unix 时间，单位为秒，表示的是时间/时刻。</p><p>• PEXPIREAT 时间戳-毫秒——设置指定的 Key 到期的 Unix 时间，以毫秒为单位，表示的是时间/时刻。</p><p>expire key seconds [NX|XX|GT|LT]</p></blockquote><blockquote><p>move key dbindex [0~15]    将当前数据库的key移动到给定的数据库db当中</p></blockquote><blockquote><p>select dbindex    切换数据库 [0~15],默认为0</p></blockquote><blockquote><p>dbsize    查看当前数据库key的数量</p></blockquote><blockquote><p>flushdb    清空当前数据库</p></blockquote><blockquote><p>flushall    清空所有数据库</p></blockquote><h2 id="_04、数据类型命令及落地运用" tabindex="-1"><a class="header-anchor" href="#_04、数据类型命令及落地运用" aria-hidden="true">#</a> 04、数据类型命令及落地运用</h2><h3 id="官网命令大全网址" tabindex="-1"><a class="header-anchor" href="#官网命令大全网址" aria-hidden="true">#</a> 官网命令大全网址</h3>',18),Ze={href:"https://redis.io/commands/",target:"_blank",rel:"noopener noreferrer"},He={href:"http://www.redis.cn/commands.html",target:"_blank",rel:"noopener noreferrer"},Ke=t('<h3 id="备注" tabindex="-1"><a class="header-anchor" href="#备注" aria-hidden="true">#</a> 备注</h3><blockquote><p>命令不区分大小写，而key是区分大小写的</p></blockquote><blockquote><p>永远的帮助命令，<code>help @类型</code></p></blockquote><ul><li><p>help @string</p></li><li><p>help @list</p></li><li><p>help @hash</p></li><li><p>help @hyperloglog</p></li><li><p>。。。</p></li></ul><h3 id="redis字符串-string" tabindex="-1"><a class="header-anchor" href="#redis字符串-string" aria-hidden="true">#</a> Redis字符串（String）</h3>',5),Fe={href:"https://redis.io/docs/data-types/strings/",target:"_blank",rel:"noopener noreferrer"},Ve=t('<p><img src="'+b+'" alt=""></p><p><img src="'+k+'" alt=""></p><h4 id="常用-1" tabindex="-1"><a class="header-anchor" href="#常用-1" aria-hidden="true">#</a> 常用</h4><p><img src="'+g+'" alt=""></p><h4 id="单值单value" tabindex="-1"><a class="header-anchor" href="#单值单value" aria-hidden="true">#</a> 单值单value</h4><h4 id="案例-1" tabindex="-1"><a class="header-anchor" href="#案例-1" aria-hidden="true">#</a> 案例</h4><blockquote><p><mark>1.最常用</mark></p></blockquote><blockquote><p>set key value</p><p>set key value [NX|XX] [GET] [EX seconds|PX milliseconds|EXAT unix-time-seconds|PXAT unix-time-milliseconds|KEEPTTL]</p></blockquote><p><img src="'+h+`" alt=""></p><p>如何获得设置指定的 Key 过期的 Unix 时间，单位为秒</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1000L</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>keepttl</p></blockquote><p><img src="`+v+'" alt=""></p><p><img src="'+q+'" alt=""></p><blockquote><p>get key</p></blockquote><p><img src="'+_+'" alt=""></p><blockquote><p><mark>2.同时设置/获取多个键值</mark></p></blockquote><blockquote><p>MSET key value [key value ...]</p></blockquote><blockquote><p>MGET key [key ...]</p></blockquote><blockquote><p>mset/mget/msetnx</p><p>mset:同时设置一个或多个 key-value 对。</p></blockquote><p><img src="'+f+'" alt=""></p><blockquote><p>mget:获取所有(一个或多个)给定 key 的值。</p></blockquote><p><img src="'+x+'" alt=""></p><blockquote><p>msetnx:同时设置一个或多个 key-value 对，<strong>当且仅当所有给定 key 都不存在</strong>。</p></blockquote><p><img src="'+y+'" alt=""></p><blockquote><p><mark>3.获取指定区间范围内的值</mark></p></blockquote><blockquote><p>getrange/setrange</p></blockquote><blockquote><p>getrange:获取指定区间范围内的值，类似between......and的关系</p><p>从零到负一表示全部</p></blockquote><p><img src="'+R+'" alt=""></p><blockquote><p>setrange设置指定区间范围内的值，格式是setrange key值 具体值</p></blockquote><p><img src="'+E+'" alt=""></p><blockquote><p><mark>4.数值增减</mark></p></blockquote><ul><li><p>一定是数字才能进行加减</p></li><li><p>递增数字</p><p>INCR key</p></li><li><p>增加指定的整数</p><p>INCRBY key increment</p></li><li><p>递减数值</p><p>DECR key</p></li><li><p>减少指定的整数</p><p>DECRBY key decrement</p></li></ul><img src="'+S+'" title="" alt="" data-align="center"><blockquote><p><mark>5.获取字符串长度的内容追加</mark></p></blockquote><ul><li><p>STRLEN key</p></li><li><p>APPEND key value</p></li></ul><img src="'+I+'" title="" alt="" data-align="center"><blockquote><p><mark>6.分布式锁</mark></p></blockquote><img src="'+D+'" title="" alt="" data-align="center"><blockquote><p>setnx key value</p></blockquote><blockquote><p>setex(set with expire)键秒值/setnx(set if not exist)</p><p>setex:设置带过期时间的key，动态设置。</p><p>setex 键 秒值 真实值</p></blockquote><img src="'+A+'" title="" alt="" data-align="center"><blockquote><p>setnx:只有在 key 不存在时设置 key 的值。</p></blockquote><p><img src="'+T+'" alt=""></p><blockquote><p>下半场-高阶篇详细深度讲解，不要错过，<sup>_</sup></p></blockquote><blockquote><p><mark>7.getset(先get再set)</mark></p></blockquote><blockquote><p>getset:将给定 key 的值设为 value ，并返回 key 的旧值(old value)。</p><p>简单一句话，先get然后立即set</p></blockquote><p><img src="'+N+'" alt=""></p><h4 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景" aria-hidden="true">#</a> 应用场景</h4><ol><li>比如抖音无限点赞某个视频或者商品，点一下加一下</li></ol><p><img src="'+O+`" alt=""></p><ol start="2"><li>是否喜欢的文章</li></ol><div class="language-textline line-numbers-mode" data-ext="textline"><pre class="language-textline"><code>阅读数：只要点击了rest地址，直接可以使用incr key 命令增加一个数字1，完成记录数字。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><img src="`+B+'" title="" alt="" data-align="center"><h3 id="redis列表-list" tabindex="-1"><a class="header-anchor" href="#redis列表-list" aria-hidden="true">#</a> Redis列表（List）</h3><p><img src="'+L+'" alt=""></p><h4 id="常用-2" tabindex="-1"><a class="header-anchor" href="#常用-2" aria-hidden="true">#</a> 常用</h4><p><img src="'+C+'" alt=""></p><h4 id="单key多value" tabindex="-1"><a class="header-anchor" href="#单key多value" aria-hidden="true">#</a> 单key多value</h4><h4 id="简单说明" tabindex="-1"><a class="header-anchor" href="#简单说明" aria-hidden="true">#</a> 简单说明</h4><blockquote><p>一个双端链表的结构，容量是2的32次方减1个元素，大概40多亿，主要功能有push/pop等，一般用在栈、队列、消息队列等场景。</p><p>left、right都可以插入添加；</p><p>如果键不存在，创建新的链表；</p><p>如果键已存在，新增内容；</p><p>如果值全移除，对应的键也就消失了。</p><ul><li>它的底层实际是个<strong>双向链表，对两端的操作性能很高，通过索引下标的操作中间的节点性能会较差。</strong></li></ul></blockquote><p><img src="'+G+'" alt=""></p><h4 id="案例-2" tabindex="-1"><a class="header-anchor" href="#案例-2" aria-hidden="true">#</a> 案例</h4><blockquote><p><mark>1.lpush/rpush/lrange</mark></p></blockquote><p><img src="'+P+'" alt=""></p><blockquote><p><mark>2.lpop/rpop</mark></p></blockquote><p><img src="'+M+'" alt=""></p><blockquote><p><mark>3.lindex，按照索引下标获取元素（从上到下）</mark></p></blockquote><blockquote><p>通过索引获取列表中的元素 lindex key index</p></blockquote><img src="'+X+'" title="" alt="" data-align="center"><blockquote><p><mark>4.llen</mark></p></blockquote><blockquote><p>获取列表中元素的个数</p></blockquote><p><img src="'+w+'" alt=""></p><blockquote><p><mark>5.lrem key 数字N 给定值v1    解释（删除N个值等于v1的元素）</mark></p></blockquote><ul><li>从left往right删除2个值等于v1的元素，返回的值为实际删除的数量</li><li>LREM list3 0 值，表示删除全部给定的值。<strong>零个就是全部值</strong></li></ul><p><img src="'+z+'" alt=""></p><blockquote><p><mark>6.ltrim key 开始index 结束index，截取指定范围的值后再赋值给key</mark></p></blockquote><blockquote><p>ltrim：截取指定索引区间的元素，格式是ltrim list的key 起始索引 结束索引</p></blockquote><p><img src="'+U+'" alt=""></p><blockquote><p><mark>7.rpoplpush 源列表 目的列表</mark></p></blockquote><blockquote><p>移除列表的最后一个元素，并将该元素添加到另一个列表并返回</p></blockquote><p><img src="'+Z+'" alt=""></p><blockquote><p><mark>8.lset key index value</mark></p></blockquote><p><img src="'+H+`" alt=""></p><blockquote><p><mark>9.linsert key before/after 已有值 插入的新值</mark></p></blockquote><div class="language-textile line-numbers-mode" data-ext="textile"><pre class="language-textile"><code><span class="token phrase">在list某个已有值的前后再添加具体值
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+K+`" alt=""></p><h4 id="应用场景-1" tabindex="-1"><a class="header-anchor" href="#应用场景-1" aria-hidden="true">#</a> 应用场景</h4><ol><li>微信公众号订阅的消息</li></ol><div class="language-textile line-numbers-mode" data-ext="textile"><pre class="language-textile"><code><span class="token phrase">1 大V作者李永乐老师和CSDN发布了文章分别是 11 和 22</span>



<span class="token phrase">2 阳哥关注了他们两个，只要他们发布了新文章，就会安装进我的List</span>

   lpush likearticle:阳哥id    11 22



<span class="token phrase">3 查看阳哥自己的号订阅的全部文章，类似分页，下面0~10就是一次显示10条</span>

  lrange likearticle:阳哥id 0 9
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+F+'" alt=""></p><p><img src="'+V+'" alt=""></p><h3 id="redis哈希-hash" tabindex="-1"><a class="header-anchor" href="#redis哈希-hash" aria-hidden="true">#</a> Redis哈希（Hash）</h3><h4 id="常用-3" tabindex="-1"><a class="header-anchor" href="#常用-3" aria-hidden="true">#</a> 常用</h4><p><img src="'+W+`" alt=""></p><h4 id="kv模式不变-但v是一个键值对" tabindex="-1"><a class="header-anchor" href="#kv模式不变-但v是一个键值对" aria-hidden="true">#</a> KV模式不变，但V是一个键值对</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="案例-3" tabindex="-1"><a class="header-anchor" href="#案例-3" aria-hidden="true">#</a> 案例</h4><blockquote><p><mark>1.hset/hget/hmset/hgetall/hdel</mark></p></blockquote><p><img src="`+Y+'" alt=""></p><p><img src="'+j+'" alt=""></p><p><img src="'+Q+'" alt=""></p><p><img src="'+$+'" alt=""></p><blockquote><p><mark>2.hlen</mark></p></blockquote><blockquote><p>获取某个key内的全部数量</p></blockquote><p><img src="'+J+'" alt=""></p><blockquote><p><mark>3.hexists key 在key里面的某个值的key</mark></p></blockquote><p><img src="'+ss+'" alt=""></p><blockquote><p><mark>4.hkeys/hvals</mark></p></blockquote><p><img src="'+es+'" alt=""></p><blockquote><p><mark>5.hincrby/hincrbyfloat</mark></p></blockquote><p><img src="'+as+'" alt=""></p><blockquote><p><mark>6.hsetnx</mark></p></blockquote><blockquote><p>不存在赋值，存在了无效</p></blockquote><p><img src="'+ns+`" alt=""></p><h4 id="应用场景-2" tabindex="-1"><a class="header-anchor" href="#应用场景-2" aria-hidden="true">#</a> 应用场景</h4><ol><li>JD购物车早期设计目前不采用，当前中小厂可用</li></ol><div class="language-textile line-numbers-mode" data-ext="textile"><pre class="language-textile"><code><span class="token phrase">新增商品 → hset shopcar:uid1024 334488 1</span>

<span class="token phrase">新增商品 → hset shopcar:uid1024 334477 1</span>

<span class="token phrase">增加商品数量 → hincrby shopcar:uid1024 334477 1</span>

<span class="token phrase">商品总数 → hlen shopcar:uid1024</span>

<span class="token phrase">全部选择 → hgetall shopcar:uid1024
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+ts+'" alt=""></p><h3 id="redis集合-set" tabindex="-1"><a class="header-anchor" href="#redis集合-set" aria-hidden="true">#</a> Redis集合（Set）</h3><h4 id="常用-4" tabindex="-1"><a class="header-anchor" href="#常用-4" aria-hidden="true">#</a> 常用</h4><p><img src="'+is+'" alt=""></p><h4 id="单值多value-且无重复" tabindex="-1"><a class="header-anchor" href="#单值多value-且无重复" aria-hidden="true">#</a> 单值多value，且无重复</h4><h4 id="案例-4" tabindex="-1"><a class="header-anchor" href="#案例-4" aria-hidden="true">#</a> 案例</h4><blockquote><p><mark>1.SADD key member [member ...]</mark></p></blockquote><blockquote><p>添加元素</p></blockquote><blockquote><p><mark>2.SMEMBERS key</mark></p></blockquote><blockquote><p>遍历集合中的所有元素</p></blockquote><blockquote><p><mark>3.SISMEMBER key member</mark></p></blockquote><blockquote><p>判断元素是否在结合中</p></blockquote><blockquote><p><mark>4.SREM key member [member ...]</mark></p></blockquote><blockquote><p>删除元素</p></blockquote><blockquote><p><mark>5.SCARD，获取集合里面的元素个数</mark></p></blockquote><blockquote><p>获取集合里面的元素个数</p></blockquote><p><img src="'+ps+'" alt=""></p><blockquote><p><mark>6.SRANDMEMBER key [数字]</mark></p></blockquote><blockquote><p>从集合中随机<strong>展现设置的数字个数</strong>元素，元素不删除</p></blockquote><p><img src="'+ls+'" alt=""></p><blockquote><p><mark>7.SPOP key [数字]</mark></p></blockquote><blockquote><p>从集合中随机弹出一个元素，出一个删一个</p></blockquote><p><img src="'+os+'" alt=""></p><blockquote><p><mark>8.SMOVE key1 key2 在key1里已存在的某个值</mark></p></blockquote><blockquote><p>将key1里已存在的某个值赋给key2</p></blockquote><p><img src="'+rs+`" alt=""></p><blockquote><p><mark>9.集合运算</mark></p></blockquote><ul><li>A、B</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>A abc12
B 123ax
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>集合的差集运算<strong>A - B</strong></li></ul><blockquote><p>属于A但是不属于B的元素构成的集合</p><p>SDIFF key [key ...]</p></blockquote><p><img src="`+cs+'" alt=""></p><ul><li>集合的并集运算<strong>A U B</strong></li></ul><blockquote><p>属于A或者属于B的元素合并后的集合</p><p>SUNION key [key ...]</p></blockquote><p><img src="'+ds+'" alt=""></p><ul><li>集合的交集运算 <strong>A ∩ B</strong></li></ul><blockquote><p>属于A同时也属于B的共同拥有的元素构成的集合</p><p>SINTER key [key ...]</p></blockquote><p><img src="'+us+`" alt=""></p><blockquote><p>SINTERCARD numkeys key [key ...] [LIMIT limit]</p></blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>redis7新命令
它不返回结果集，而只返回结果的技术。
返回由所有给定集合的交集产生的集合基数 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>案例</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SINTER set1 set2
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;1&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;2&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;a&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SINTERCARD <span class="token number">2</span> set1 set2
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SINTERCARD <span class="token number">2</span> set1 set2 limit <span class="token number">1</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="应用场景-3" tabindex="-1"><a class="header-anchor" href="#应用场景-3" aria-hidden="true">#</a> 应用场景</h4><ul><li>微信抽奖小程序</li></ul><p><img src="`+ms+'" alt=""></p><table><thead><tr><th>1 用户ID，立即参与按钮</th><th>sadd key 用户ID</th></tr></thead><tbody><tr><td>2 显示已经有多少人参与了，上图23208人参加</td><td>SCARD key</td></tr><tr><td>3 抽奖(从set中任意选取N个中奖人)</td><td>SRANDMEMBER key 2 随机抽奖2个人，元素不删除<br>SPOP key 3 随机抽奖3个人，元素会删除</td></tr></tbody></table><ul><li>微信朋友圈点赞查看同赞朋友</li></ul><p><img src="'+bs+'" alt=""></p><table><thead><tr><th>1 新增点赞</th><th>sadd pub:msgID  点赞用户ID1  点赞用户ID2</th></tr></thead><tbody><tr><td>2 取消点赞</td><td>srem pub:msgID  点赞用户ID</td></tr><tr><td>3 展现所有点赞过的用户</td><td>SMEMBERS  pub:msgID</td></tr><tr><td>4 点赞用户数统计，就是常见的点赞红色数字</td><td>scard  pub:msgID</td></tr><tr><td>5 判断某个朋友是否对楼主点赞过</td><td>SISMEMBER pub:msgID 用户ID</td></tr></tbody></table><ul><li>QQ内推可能认识的人</li></ul><p><img src="'+ks+`" alt=""></p><h3 id="redis有序集合zset-sorted-set" tabindex="-1"><a class="header-anchor" href="#redis有序集合zset-sorted-set" aria-hidden="true">#</a> Redis有序集合ZSet（sorted set）</h3><h4 id="多说一句" tabindex="-1"><a class="header-anchor" href="#多说一句" aria-hidden="true">#</a> 多说一句</h4><div class="language-textile line-numbers-mode" data-ext="textile"><pre class="language-textile"><code><span class="token phrase">在set基础上，每个val值前加一个score分数值。
之前set是k1 v1,v2,v3，
现在zset是k1 score1 v1 score2 v2
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="常用-5" tabindex="-1"><a class="header-anchor" href="#常用-5" aria-hidden="true">#</a> 常用</h4><p><img src="`+gs+`" alt=""></p><h4 id="案例-5" tabindex="-1"><a class="header-anchor" href="#案例-5" aria-hidden="true">#</a> 案例</h4><blockquote><p><mark>1.向有序集合中加入一个元素和该元素的分数</mark></p></blockquote><blockquote><p><mark>2.ZADD key score member [score member ...]</mark>    添加元素</p></blockquote><blockquote><p><mark>3.ZRANGE key start stop [WITHSCORES]</mark></p></blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>按照元素分数从小到大的顺序

返回索引从start到stop之间的所有元素
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+hs+'" alt=""></p><blockquote><p><mark>4.ZREVRANGE</mark></p></blockquote><p><img src="'+vs+'" alt=""></p><blockquote><p><mark>5.ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]</mark></p></blockquote><p><img src="'+qs+`" alt=""></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>获取指定分数范围的元素
    - withscores
    - ( 不包含
    - limit 作用是返回限制：limit开始下标步 多少步 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+_s+`" alt=""></p><blockquote><p><mark>6.ZSCORE key member</mark></p></blockquote><blockquote><p>获取元素的分数</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># zscore：按照值获得对应的分数</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ZRANGE zset1 <span class="token number">0</span> <span class="token parameter variable">-1</span> withscores
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;v1&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;60&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;v2&quot;</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">&quot;70&quot;</span>
<span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">&quot;v3&quot;</span>
<span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">&quot;80&quot;</span>
<span class="token number">7</span><span class="token punctuation">)</span> <span class="token string">&quot;v4&quot;</span>
<span class="token number">8</span><span class="token punctuation">)</span> <span class="token string">&quot;90&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ZSCORE zset1 <span class="token number">60</span>
<span class="token punctuation">(</span>nil<span class="token punctuation">)</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ZSCORE zset1 <span class="token number">70</span>
<span class="token punctuation">(</span>nil<span class="token punctuation">)</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ZSCORE zset1 v1
<span class="token string">&quot;60&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ZSCORE zset1 v2
<span class="token string">&quot;70&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ZSCORE zset1 v3
<span class="token string">&quot;80&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><mark>7.ZCARD key</mark></p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># zcard ：获取集合中元素个数 </span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ZCARD zset1 
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><mark>8.ZREM key 某个score下对应的value值，作用是删除元素</mark></p></blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>删除元素，格式是zrem zset的key 项的值，项的值可以是多个

zrem key score某个对应值，可以是多个值
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+fs+`" alt=""></p><blockquote><p><mark>9.ZINCRBY key increment member</mark></p></blockquote><blockquote><p>增加某个元素的分数</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ZINCRBY zset1 <span class="token number">10</span> v5
<span class="token string">&quot;110&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ZINCRBY zset1 <span class="token number">10</span> v5
<span class="token string">&quot;120&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><mark>10.ZCOUNT key min max</mark></p></blockquote><blockquote><p>获取指定分数范围内的元素个数</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># zcount ：获取分数区间内元素个数，zcount key 开始分数区间 结束分数区间</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ZCOUNT zset1 <span class="token number">60</span> <span class="token number">80</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><mark>11.ZMPOP(redis7新增命令)</mark></p></blockquote><blockquote><p>从键名列表中的第一个非空排序集中弹出一个或多个元素，他们是成员分数对</p></blockquote><p><img src="`+xs+`" alt=""></p><blockquote><p><mark>12.ZRANK key values值，作用是获得下标值</mark></p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># zrank： 获取value在zset中的下标位置</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ZRANGE zset1 <span class="token number">0</span> <span class="token parameter variable">-1</span> withscores
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;v1&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;60&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;v2&quot;</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">&quot;70&quot;</span>
<span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">&quot;v3&quot;</span>
<span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">&quot;80&quot;</span>
<span class="token number">7</span><span class="token punctuation">)</span> <span class="token string">&quot;v4&quot;</span>
<span class="token number">8</span><span class="token punctuation">)</span> <span class="token string">&quot;90&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ZRANK zset1 v1
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ZRANK zset1 v2
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ZRANK zset1 v3
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><mark>13.ZREVRANK key values值，作用是逆序获得下标值</mark></p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 正序、逆序获得下标索引值</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ZREVRANK zset1 v1
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">4</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ZRANK zset1 v1
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="应用场景-4" tabindex="-1"><a class="header-anchor" href="#应用场景-4" aria-hidden="true">#</a> 应用场景</h4><ul><li>根据商品销售对商品进行排序显示</li></ul><div class="language-textile line-numbers-mode" data-ext="textile"><pre class="language-textile"><code><span class="token phrase">思路：定义商品销售排行榜(sorted set集合)，key为goods:sellsort，分数为商品销售数量。
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th style="text-align:center;">商品编号1001的销量是9，商品编号1002的销量是15</th><th>zadd goods:sellsort 9 1001 15 1002</th></tr></thead><tbody><tr><td style="text-align:center;">有一个客户又买了2件商品1001，商品编号1001销量加2</td><td>zincrby goods:sellsort 2 1001</td></tr><tr><td style="text-align:center;">求商品销量前10名</td><td>ZRANGE goods:sellsort 0 9 withscores</td></tr></tbody></table><p><img src="`+ys+'" alt=""></p><h3 id="redis位图-bitmap" tabindex="-1"><a class="header-anchor" href="#redis位图-bitmap" aria-hidden="true">#</a> Redis位图（bitmap）</h3><h4 id="一句话" tabindex="-1"><a class="header-anchor" href="#一句话" aria-hidden="true">#</a> 一句话</h4><blockquote><p>由0和1状态组成的二进制位的bit数组</p></blockquote><h4 id="看需求" tabindex="-1"><a class="header-anchor" href="#看需求" aria-hidden="true">#</a> 看需求</h4><ul><li><p>用户是否登录过Y、N，比如京东每日签到送京豆</p></li><li><p>电影、广告是否被点击播放过</p></li><li><p>钉钉打卡上下班，签到统计</p></li><li><p>。。。。</p></li></ul><h4 id="是什么" tabindex="-1"><a class="header-anchor" href="#是什么" aria-hidden="true">#</a> 是什么？</h4><p><img src="'+Rs+'" alt=""></p><blockquote><p>说明：用String类型作为底层数据结构实现的一种统计二值状态的数据类型</p><p>位图本质是数组，它是基于String数据类型的按位的操作。该数组由多个二进制位组成，每个二进制位都对应一个偏移量(我们称之为一个索引)。</p><p>Bitmap支持的最大位数是2<sup>32位，它可以极大的节约存储空间，使用512M内存就可以存储多达42.9亿的字节信息(2</sup>32 = 4294967296)</p></blockquote><h4 id="能干嘛" tabindex="-1"><a class="header-anchor" href="#能干嘛" aria-hidden="true">#</a> 能干嘛？</h4><blockquote><p>用于状态统计</p><p>- Y、N类似AutomicBoolean</p></blockquote><h4 id="基本命令" tabindex="-1"><a class="header-anchor" href="#基本命令" aria-hidden="true">#</a> 基本命令</h4><p><img src="'+Es+'" alt=""></p><ol><li>setbit</li></ol><blockquote><p>setbit key offset value</p></blockquote><p><img src="'+Ss+`" alt=""></p><blockquote><p>submit 键 偏移量 只能0或者1</p></blockquote><blockquote><p>Bitmap的偏移量是从零开始算的</p></blockquote><ol start="2"><li>getbit</li></ol><blockquote><p>getbit key offest</p></blockquote><ol start="3"><li>strlen</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SETBIT k1 <span class="token number">0</span> <span class="token number">1</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SETBIT k1 <span class="token number">7</span> <span class="token number">1</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> STRLEN k1
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SETBIT k1 <span class="token number">8</span> <span class="token number">1</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> STRLEN k1
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>不是字符串长度而是占据几个字节，超过8位后自己按照8位一组一byte再扩容</p></blockquote><blockquote><p>统计字节数占用多少</p></blockquote><p><img src="`+Is+`" alt=""></p><ol start="4"><li>bitcount</li></ol><blockquote><p>全部键里面含有1的有多少个？</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> BITCOUNT user:login
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>bitop</li></ol><div class="language-textile line-numbers-mode" data-ext="textile"><pre class="language-textile"><code><span class="token phrase">连续2天都签到的用户</span>

<span class="token phrase">加入某个网站或者系统，它的用户有1000W，做个用户id和位置的映射</span>

<span class="token phrase">比如0号位对应用户id：uid-092iok-lkj</span>

<span class="token phrase">比如1号位对应用户id：uid-7388c-xxx</span>

<span class="token phrase">。。。。。。  
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+Ds+'" alt=""></p><ol start="6"><li>setbit和getbit案例说明</li></ol><blockquote><p>按照天</p></blockquote><p><img src="'+As+'" alt=""></p><p><img src="'+Ts+`" alt=""></p><h4 id="应用场景-5" tabindex="-1"><a class="header-anchor" href="#应用场景-5" aria-hidden="true">#</a> 应用场景</h4><ul><li>一年365天，全年天天登录占用多少字节</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SETBIT k1 <span class="token number">0</span> <span class="token number">1</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SETBIT k1 <span class="token number">1</span> <span class="token number">1</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SETBIT k1 <span class="token number">12</span> <span class="token number">1</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> BITCOUNT k1
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SETBIT k1 <span class="token number">362</span> <span class="token number">1</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> STRLEN k1
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">46</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>按照年</li></ul><div class="language-textile line-numbers-mode" data-ext="textile"><pre class="language-textile"><code><span class="token phrase">按年去存储一个用户的签到情况，365 天只需要 365 / 8 ≈ 46 Byte，1000W 用户量一年也只需要 44 MB 就足够了。</span>

<span class="token phrase">假如是亿级的系统，</span>

<span class="token phrase">每天使用1个1亿位的Bitmap约占12MB的内存（10^8/8/1024/1024），10天的Bitmap的内存开销约为120MB，内存压力不算太高。</span>

<span class="token phrase">此外，在实际使用时，最好对Bitmap设置过期时间，让Redis自动删除不再需要的签到记录以节省内存开销。
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="redis基数统计-hyperloglog" tabindex="-1"><a class="header-anchor" href="#redis基数统计-hyperloglog" aria-hidden="true">#</a> Redis基数统计（HyperLogLog）</h3><p><img src="`+Ns+'" alt=""></p><h4 id="看需求-1" tabindex="-1"><a class="header-anchor" href="#看需求-1" aria-hidden="true">#</a> 看需求</h4><ul><li><p>统计某个网站的UV、统计某个文章的UV</p></li><li><p>什么是UV</p><ul><li><p>Unique Visitor，独立访客，一般理解为客户端IP</p></li><li><p>需要考虑去重</p></li></ul></li><li><p>用户搜索网站关键词的数量</p></li><li><p>统计用户每天搜索不同词条个数</p></li><li><p>用户搜索网站关键词的数量</p></li><li><p>统计用户每天搜索不同词条个数</p></li></ul><h4 id="是什么-1" tabindex="-1"><a class="header-anchor" href="#是什么-1" aria-hidden="true">#</a> 是什么？</h4><ol><li>去重统计功能的基数估计算法就是 HyperLogLog</li></ol><p><img src="'+Os+'" alt=""></p><ol start="2"><li>基数</li></ol><blockquote><p>是一种数据集，去重复后的真是个数</p><p>案例Case</p></blockquote><p><img src="'+Bs+'" alt=""></p><ol start="3"><li>基数统计</li></ol><blockquote><p>用于统计一个集合中不重复的元素个数，就是对集合去重复后剩余元素的计算</p></blockquote><ol start="4"><li>一句话</li></ol><blockquote><p>去重脱水后的真是数据</p></blockquote><h4 id="基本命令-1" tabindex="-1"><a class="header-anchor" href="#基本命令-1" aria-hidden="true">#</a> 基本命令</h4><p><img src="'+Ls+'" alt=""></p><p><img src="'+Cs+`" alt=""></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> PFADD hello1 <span class="token number">1</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">7</span> <span class="token number">9</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> PFADD hello2 <span class="token number">2</span> <span class="token number">4</span> <span class="token number">4</span> <span class="token number">4</span> <span class="token number">6</span> <span class="token number">8</span> <span class="token number">9</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> PFCOUNT hello2
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">5</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> PFMERGE distResult hello1 hello2 
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> PFCOUNT distResult
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">9</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="应用场景-编码实战案例见高级篇" tabindex="-1"><a class="header-anchor" href="#应用场景-编码实战案例见高级篇" aria-hidden="true">#</a> 应用场景-编码实战案例见高级篇</h4><blockquote><p>天猫网站首页亿级UV的Redis统计方案</p></blockquote><h3 id="redis地理空间-geo" tabindex="-1"><a class="header-anchor" href="#redis地理空间-geo" aria-hidden="true">#</a> Redis地理空间（GEO）</h3><h4 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h4><p>移动互联网时代LBS应用越来越多，交友软件中附近的小姐姐、外卖软件中附近的美食店铺、高德地图附近的核酸检查点等等，那这种附近各种形形色色的XXX地址位置选择是如何实现的？</p><p>地球上的地理位置是使用二维的经纬度表示，经度范围 (-180, 180]，纬度范围 (-90, 90]，只要我们确定一个点的经纬度就可以名取得他在地球的位置。</p><p>例如滴滴打车，最直观的操作就是实时记录更新各个车的位置，</p><p>然后当我们要找车时，在数据库中查找距离我们(坐标x0,y0)附近r公里范围内部的车辆</p><p>使用如下SQL即可：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> taxi <span class="token keyword">from</span> position <span class="token keyword">where</span> x0<span class="token operator">-</span>r <span class="token operator">&lt;</span> x <span class="token operator">&lt;</span> x0 <span class="token operator">+</span> r <span class="token operator">and</span> y0<span class="token operator">-</span>r <span class="token operator">&lt;</span> y <span class="token operator">&lt;</span> y0<span class="token operator">+</span>r
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但是这样会有什么问题呢？</p><p>1.查询性能问题，如果并发高，数据量大这种查询是要搞垮数据库的</p><p>2.这个查询的是一个矩形访问，而不是以我为中心r公里为半径的圆形访问。</p><p>3.精准度的问题，我们知道地球不是平面坐标系，而是一个圆球，这种矩形计算在长距离计算时会有很大误差</p><h4 id="原理" tabindex="-1"><a class="header-anchor" href="#原理" aria-hidden="true">#</a> 原理</h4><p>核心思想就是将球体转换为平面，区块转换为一点</p><p><img src="`+Gs+'" alt=""></p><p>地理知识说明</p>',287),We={href:"https://baike.baidu.com/item/%E7%BB%8F%E7%BA%AC%E5%BA%A6/1113442?fr=aladdin",target:"_blank",rel:"noopener noreferrer"},Ye=t('<h4 id="redis在3-2版本以后增加了地理位置的处理" tabindex="-1"><a class="header-anchor" href="#redis在3-2版本以后增加了地理位置的处理" aria-hidden="true">#</a> Redis在3.2版本以后增加了地理位置的处理</h4><h4 id="命令" tabindex="-1"><a class="header-anchor" href="#命令" aria-hidden="true">#</a> 命令</h4><ol><li>GEOADD</li></ol><blockquote><p>多个(longitude)、纬度(laitude)、位置名称(member)添加到指定的key中</p></blockquote><ol start="2"><li>GEOPOS</li></ol><blockquote><p>从键里面返回所有给定位置元素的位置（经度和纬度）</p></blockquote><ol start="3"><li>GEODIST</li></ol><blockquote><p>返回两个给定位置之间的距离</p></blockquote><ol start="4"><li>GEORADIUS</li></ol><blockquote><p>以给定的经纬度为中心，返回与中心的距离不超过给定最大距离的所有位置元素</p></blockquote><ol start="5"><li><p>GEORADIUSBYMEMBER 跟 GEORADIUS类似</p></li><li><p>GEOHASH</p></li></ol><blockquote><p>返回一个或多个位置元素的 Geohash 表示</p></blockquote><h4 id="命令实操" tabindex="-1"><a class="header-anchor" href="#命令实操" aria-hidden="true">#</a> 命令实操</h4><ol><li>如何获取某个地址的经纬度</li></ol>',14),je={href:"https://api.map.baidu.com/lbsapi/getpoint/",target:"_blank",rel:"noopener noreferrer"},Qe={href:"https://tool.lu/ip/",target:"_blank",rel:"noopener noreferrer"},$e=t('<ol start="2"><li>GEOADD添加经纬度坐标</li></ol><p><img src="'+Ps+'" alt=""></p><p><img src="'+Ms+`" alt=""></p><p>命令如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>GEOADD city <span class="token number">116.403963</span> <span class="token number">39.915119</span> <span class="token string">&quot;天安门&quot;</span> <span class="token number">116.403414</span> <span class="token number">39.924091</span> <span class="token string">&quot;故宫&quot;</span> <span class="token number">116.024067</span> <span class="token number">40.362639</span> <span class="token string">&quot;长城&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>中文乱码如何解决</p><p>-redis-cli --raw</p></blockquote><p><img src="`+Xs+'" alt=""></p><ol start="3"><li>GEOPOS返回经纬度</li></ol><p><img src="'+ws+'" alt=""></p><p><img src="'+zs+`" alt=""></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>GEOPOS city 天安门     故宫  长城
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li>GEOHASH返回坐标的geohash表示</li></ol><p><img src="`+Us+`" alt=""></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> GEOHASH city 天安门 故宫 长城
wx4g0f6f2v0
wx4g0gfqsj0
wx4t85y1kt0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>geohash算法生成的base31编码值</p></blockquote><blockquote><p>三维变二维变一维</p></blockquote><p><img src="`+Zs+'" alt=""></p><ol start="5"><li>GEODIST两个位置之间的距离</li></ol><p><img src="'+Hs+`" alt=""></p><p>最后一个距离单位参数说明：</p><ul><li>m ：米，默认单位。</li><li>km ：千米。</li><li>mi ：英里。</li><li>ft ：英尺。</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> GEODIST city 天安门 长城 km
<span class="token number">59.3390</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> GEODIST city 天安门 长城 m
<span class="token number">59338.9814</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li>GEORADIUS</li></ol><p>georadius 以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>GEORADIUS city <span class="token number">116.418017</span> <span class="token number">39.914402</span> <span class="token number">10</span> km withdist withcoord count <span class="token number">10</span> withhash desc

GEORADIUS city <span class="token number">116.418017</span> <span class="token number">39.914402</span> <span class="token number">10</span> km withdist withcoord withhash count <span class="token number">10</span> desc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>WITHDIST: 在返回位置元素的同时， 将位置元素与中心之间的距离也一并返回。 距离的单位和用户给定的范围单位保持一致。</p><p>WITHCOORD: 将位置元素的经度和维度也一并返回。</p><p>WITHHASH: 以 52 位有符号整数的形式， 返回位置元素经过原始 geohash 编码的有序集合分值。 这个选项主要用于底层应用或者调试， 实际中的作用并不大</p><p>COUNT 限定返回的记录数。</p><p>当前位置(116.418017 39.914402),阳哥在北京王府井</p><p><img src="`+Ks+'" alt=""></p><blockquote><p>以半径为中心，查找附近的xxx</p></blockquote><ol start="7"><li>GEORADIUSBYMEMBER</li></ol><blockquote><p>找出位于指定范围内的元素，中心点是由给定的位置元素决定</p></blockquote><p><img src="'+Fs+'" alt=""></p><h4 id="应用场景-编码实战案例见高级篇-1" tabindex="-1"><a class="header-anchor" href="#应用场景-编码实战案例见高级篇-1" aria-hidden="true">#</a> 应用场景-编码实战案例见高级篇</h4><ul><li><p>美团地图位置附近的酒店推送</p></li><li><p>高德地图附近的核酸检查点</p></li></ul><h3 id="redis流-stream" tabindex="-1"><a class="header-anchor" href="#redis流-stream" aria-hidden="true">#</a> Redis流（Stream）</h3><h4 id="是什么-2" tabindex="-1"><a class="header-anchor" href="#是什么-2" aria-hidden="true">#</a> 是什么？</h4><ol><li>redis5.0之前痛点</li></ol><blockquote><p>redis消息队列的2种方案</p></blockquote><ul><li>List实现消息队列</li></ul><p>按照插入顺序排序，你可以添加一个元素到列表的头部（左边）或者尾部（右边）。</p><p>所以常用来做异步队列使用，将需要延后处理的任务结构体序列化成字符串塞进 Redis 的列表，另一个线程从这个列表中轮询数据进行处理。</p><p><img src="'+Vs+'" alt=""></p><p><code>LPUSH、RPOP 左进右出    RPUSH、LPOP 右进左出</code></p><p><img src="'+Ws+'" alt=""></p><blockquote><p>List实现方式其实就是点对点的模式</p></blockquote><ul><li>(Pub/Sub)</li></ul><p><img src="'+Ys+'" alt=""></p><p>Redis 发布订阅 (pub/sub) 有个缺点就是消息无法持久化，如果出现网络断开、Redis 宕机等，消息就会被丢弃。而且也没有 Ack 机制来保证数据的可靠性，假设一个消费者都没有，那消息就直接被丢弃了。</p><ol start="2"><li><p>Redis5.0版本新增了一个更强大的数据结构----Stream</p></li><li><p>一句话</p></li></ol><blockquote><p>Redis版的MQ消息中间件+阻塞队列</p></blockquote><h4 id="能干嘛-1" tabindex="-1"><a class="header-anchor" href="#能干嘛-1" aria-hidden="true">#</a> 能干嘛？</h4><p>实现消息队列，它支持消息的持久化、支持自动生成全局唯一ID、支持ack确认消息的模式、支持消费组模式等，让消息队列更加稳定和可靠</p><h4 id="底层结构和原理说明" tabindex="-1"><a class="header-anchor" href="#底层结构和原理说明" aria-hidden="true">#</a> 底层结构和原理说明</h4><blockquote><p>Stream结构</p></blockquote><p><img src="'+js+'" alt=""></p><p><code>一个消息链表，将所有加入的消息都串起来，每个消息都有一个唯一的 ID 和对应的内容</code></p><table><thead><tr><th>1</th><th>Message Content</th><th>消息内容</th></tr></thead><tbody><tr><td>2</td><td>Consumer group</td><td>消费组，通过XGROUP CREATE 命令创建，同一个消费组可以有多个消费者</td></tr><tr><td>3</td><td>Last_delivered_id</td><td>游标，每个消费组会有个游标 last_delivered_id，任意一个消费者读取了消息都会使游标 last_delivered_id 往前移动。</td></tr><tr><td>4</td><td>Consumer</td><td>消费者，消费组中的消费者</td></tr><tr><td>5</td><td>Pending_ids</td><td>消费者会有一个状态变量，用于记录被当前消费已读取但未ack的消息Id，如果客户端没有ack，这个变量里面的消息ID会越来越多，一旦某个消息被ack它就开始减少。这个pending_ids变量在Redis官方被称之为 PEL(Pending Entries List)，记录了当前已经被客户端读取的消息，但是还没有 ack (Acknowledge character：确认字符），它用来确保客户端至少消费了消息一次，而不会在网络传输的中途丢失了没处理</td></tr></tbody></table><h4 id="基本命令理论简介" tabindex="-1"><a class="header-anchor" href="#基本命令理论简介" aria-hidden="true">#</a> 基本命令理论简介</h4><ol><li>队列相关指令</li></ol><p><img src="'+Qs+'" alt=""></p><ol start="2"><li>消费组相关指令</li></ol><p><img src="'+$s+'" alt=""></p><ol start="3"><li>四个特殊符号</li></ol><table><thead><tr><th><code>- +</code></th><th>最小和最大可能出现的id</th></tr></thead><tbody><tr><td><code>$</code></td><td><code>$</code>表示只消费新的消息，当前流中最大的id，可用于将要到来的消息</td></tr><tr><td><code>&gt;</code></td><td>用于XREADGROUP命令，表示迄今还没有发送给组中使用者的信息，会更新消费者组的最后ID</td></tr><tr><td><code>*</code></td><td>用于XADD命令中，让系统自动生成id</td></tr></tbody></table><h4 id="基本命令代码实操" tabindex="-1"><a class="header-anchor" href="#基本命令代码实操" aria-hidden="true">#</a> 基本命令代码实操</h4><blockquote><p><code>Redis流实例演示</code></p></blockquote><h5 id="队列相关指令" tabindex="-1"><a class="header-anchor" href="#队列相关指令" aria-hidden="true">#</a> 队列相关指令</h5><ol><li>XADD</li></ol><blockquote><p>添加消息到队列末尾</p></blockquote><p>XADD 用于向Stream 队列中添加消息，如果指定的Stream 队列不存在，则该命令执行时会新建一个Stream 队列</p><p>//* 号表示服务器自动生成 MessageID(类似mysql里面主键auto_increment)，后面顺序跟着一堆 业务key/value</p><p><img src="'+Js+'" alt=""></p><table><thead><tr><th>信息条目指的是序列号，在相同的毫秒下序列号从0开始递增，序列号是64位长度，理论上在同一毫秒内生成的数据量无法到达这个级别，因此不用担心序列号会不够用。millisecondsTime指的是Redis节点服务器的本地时间，如果存在当前的毫秒时间戳比以前已经存在的数据的时间戳小的话（本地时间钟后跳），那么系统将会采用以前相同的毫秒创建新的ID，也即redis 在增加信息条目时会检查当前 id 与上一条目的 id， 自动纠正错误的情况，一定要保证后面的 id 比前面大，一个流中信息条目的ID必须是单调增的，这是流的基础。</th></tr></thead><tbody><tr><td>客户端显示传入规则:<br><br>Redis对于ID有强制要求，格式必须是时间戳-自增Id这样的方式，且后续ID不能小于前一个ID</td></tr><tr><td>Stream的消息内容，也就是图中的Message Content它的结构类似Hash结构，以key-value的形式存在。</td></tr></tbody></table><ul><li>消息ID必须要比上个ID大</li></ul><p><img src="'+se+'" alt=""></p><ul><li><p>默认用星号表示自动生成规矩</p></li><li><p><code>*</code></p><ul><li>用于XADD命令中，让系统自动生成id</li></ul></li></ul><ol start="2"><li>XRANGE</li></ol><p><img src="'+ee+'" alt=""></p><ul><li><p>用于获取消息列表（可以指定范围），忽略删除的消息</p></li><li><p>start表示开始值，<code>-</code>代表最小值</p></li><li><p>end表示结束值，<code>+</code>代表最大值</p></li><li><p>count 表示最多获取多少个值</p></li></ul><ol start="3"><li>XREVRANGE</li></ol><p><img src="'+ae+'" alt=""></p><blockquote><p>与XRANGE的区别在于，获取消息队列元素的方向是相反的，end在前，start在后</p></blockquote><ol start="4"><li>XDEL</li></ol><p><img src="'+ne+`" alt=""></p><ol start="5"><li>XLEN</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> XRANGE mystream - +
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;1679995644924-0&quot;</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;id&quot;</span>
      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;11&quot;</span>
      <span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;cname&quot;</span>
      <span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">&quot;zs&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;1679995687555-0&quot;</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;k1&quot;</span>
      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;v1&quot;</span>
      <span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;k2&quot;</span>
      <span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">&quot;v2&quot;</span>
      <span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">&quot;k3&quot;</span>
      <span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">&quot;v3&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> XLEN mystream
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>用于获取Stream队列的消息的长度</p></blockquote><ol start="6"><li>XTRIM</li></ol><ul><li><p>用于对Stream的长度进行截取，如超过长度会进行截取</p></li><li><p>MAXLEN</p><ul><li>允许的最大长度，对流进行修剪限制长度</li></ul></li></ul><p><img src="`+te+'" alt=""></p><ul><li><p>XMIN</p><ul><li>允许的最小id，从某个id值开始比该id值小的将会被抛弃</li></ul></li></ul><p><img src="'+ie+'" alt=""></p><ol start="7"><li>XREAD</li></ol><ul><li>用于获取消息（阻塞/非阻塞），只会返回大于指定ID的消息</li></ul><p><img src="'+pe+'" alt=""></p><ul><li>非阻塞</li></ul><table><thead><tr><th>$代表特殊ID，表示以当前Stream已经存储的最大的ID作为最后一个ID，当前Stream中不存在大于当前最大ID的消息，因此此时返回nil</th></tr></thead><tbody><tr><td>0-0代表从最小的ID开始获取Stream中的消息，当不指定count，将会返回Stream中的所有消息，注意也可以使用0（00/000也都是可以的……）</td></tr></tbody></table><p><img src="'+le+'" alt=""></p><ul><li>阻塞</li></ul><p><code>请redis-cli启动第2个客户端连接上来</code></p><p><img src="'+oe+'" alt=""></p><ul><li>小总结（类似java里面的阻塞队列）</li></ul><blockquote><p><code>Stream的基础方法，使用xadd存入消息和xread循环阻塞读取消息的方式可以实现简易版的消息队列，交互流程如下</code></p></blockquote><p><img src="'+re+'" alt=""></p><p><code>对比List结构</code></p><p><img src="'+ce+'" alt=""></p><h5 id="消费组相关指令" tabindex="-1"><a class="header-anchor" href="#消费组相关指令" aria-hidden="true">#</a> 消费组相关指令</h5><ol><li>XGROUP CREATE</li></ol><blockquote><p><code>用于创建消费者组</code></p></blockquote><p><img src="'+de+'" alt=""></p><table><thead><tr><th style="text-align:center;">$表示从Stream尾部开始消费</th></tr></thead><tbody><tr><td style="text-align:center;">0表示从Stream头部开始消费</td></tr><tr><td style="text-align:center;">创建消费者组的时候必须指定 ID, ID 为 0 表示从头开始消费，为 $ 表示只消费新的消息，队尾新来</td></tr></tbody></table><ol start="2"><li>XREADGROUP GROUP</li></ol><ul><li><p>&quot;&gt;&quot;，表示从第一条尚未被消费的消息开始读取</p></li><li><p>消费组groupA内的消费者consumer1从mystream消息队列中读取所有消息</p></li></ul><p><img src="'+ue+'" alt=""></p><ul><li>但是，不同消费组的消费者可以消费同一条消息</li></ul><p><img src="'+me+'" alt=""></p><ul><li>消费组的目的？</li></ul><blockquote><p>让组内的多个消费者共同分担读取消息，所以，我们通常会让每个消费者读取部分消息，从而实现消息读取负载在多个消费者间是均衡分布的</p></blockquote><p><img src="'+be+'" alt=""></p><ol start="3"><li>重点问题</li></ol><table><thead><tr><th>1问题</th><th>基于 Stream 实现的消息队列，如何保证消费者在发生故障或宕机再次重启后，仍然可以读取未处理完的消息？</th></tr></thead><tbody><tr><td>2</td><td>Streams 会自动使用内部队列（也称为 PENDING List）留存消费组里每个消费者读取的消息保底措施，直到消费者使用 XACK 命令通知 Streams“消息已经处理完成”。</td></tr><tr><td>3</td><td>消费确认增加了消息的可靠性，一般在业务处理完成之后，需要执行 XACK 命令确认消息已经被消费完成</td></tr></tbody></table><p><img src="'+ke+'" alt=""></p><ol start="4"><li>XPENDING</li></ol><ul><li>查询每个消费组内所有消费者【已读、但未确认】的消息</li></ul><p><img src="'+ge+'" alt=""></p><ul><li>查看某个消费者具体读了哪些数据</li></ul><p><img src="'+he+'" alt=""></p><blockquote><p>下面抓图所示：consumer2已读取的消息的 ID是1659430293537-0</p><p>一旦消息1659430293537-0被consumer2处理了consumer2就可以使用 XACK 命令通知 Streams，然后这条消息就会被删除</p></blockquote><p><img src="'+ve+'" alt=""></p><ol start="5"><li>XACK</li></ol><blockquote><p>向消息队列确认消息处理已完成</p></blockquote><p><img src="'+qe+'" alt=""></p><p><img src="'+_e+'" alt=""></p><ol start="6"><li>XINFO用于打印Stream\\Consumer\\Group的详细信息</li></ol><p><img src="'+fe+'" alt=""></p><h4 id="使用建议" tabindex="-1"><a class="header-anchor" href="#使用建议" aria-hidden="true">#</a> 使用建议</h4><ol><li><p>Stream还是不能100%等价于Kafka、RabbitMQ、SocketMQ来使用的    ，生产案例少，慎用</p></li><li><p>仅仅代表本人愚见，不权威</p></li></ol><h3 id="redis位域-bitfield" tabindex="-1"><a class="header-anchor" href="#redis位域-bitfield" aria-hidden="true">#</a> Redis位域（bitfield）</h3><h4 id="了解即可" tabindex="-1"><a class="header-anchor" href="#了解即可" aria-hidden="true">#</a> 了解即可</h4><h4 id="是什么-3" tabindex="-1"><a class="header-anchor" href="#是什么-3" aria-hidden="true">#</a> 是什么？</h4>',143),Je={href:"https://redis.io/commands/bitfield/",target:"_blank",rel:"noopener noreferrer"},sa={href:"http://www.redis.cn/commands/bitfield.html",target:"_blank",rel:"noopener noreferrer"},ea=t('<p><img src="'+xe+'" alt=""></p><h4 id="能干嘛-2" tabindex="-1"><a class="header-anchor" href="#能干嘛-2" aria-hidden="true">#</a> 能干嘛？</h4><p><img src="'+ye+'" alt=""></p><blockquote><p><code>   hello 等价于 0110100001100101011011000110110001101111</code></p></blockquote><ol><li><p>位域修改</p></li><li><p>溢出控制</p></li></ol><h4 id="一句话-1" tabindex="-1"><a class="header-anchor" href="#一句话-1" aria-hidden="true">#</a> 一句话</h4><blockquote><p>将一个Redis字符串看作是<code>一个由二进制组成的数组</code></p><p>并能对变成位宽和任意没有字节对齐的指定整形位域进行寻址和修改</p></blockquote><h4 id="命令基本语法" tabindex="-1"><a class="header-anchor" href="#命令基本语法" aria-hidden="true">#</a> 命令基本语法</h4><p><img src="'+Re+`" alt=""></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>BITFIELD key <span class="token punctuation">[</span>GET <span class="token builtin class-name">type</span> offset<span class="token punctuation">]</span> <span class="token punctuation">[</span>SET <span class="token builtin class-name">type</span> offset value<span class="token punctuation">]</span> <span class="token punctuation">[</span>INCRBY <span class="token builtin class-name">type</span> offset increment<span class="token punctuation">]</span> <span class="token punctuation">[</span>OVERFLOW WRAP<span class="token operator">|</span>SAT<span class="token operator">|</span>FAIL<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="案例-6" tabindex="-1"><a class="header-anchor" href="#案例-6" aria-hidden="true">#</a> 案例</h4><h5 id="ascii码表" tabindex="-1"><a class="header-anchor" href="#ascii码表" aria-hidden="true">#</a> Ascii码表</h5>`,12),aa={href:"https://ascii.org.cn/",target:"_blank",rel:"noopener noreferrer"},na=t('<h5 id="基本命令代码实操-1" tabindex="-1"><a class="header-anchor" href="#基本命令代码实操-1" aria-hidden="true">#</a> 基本命令代码实操</h5><ol><li>BITFIELD key [GET type offset]</li></ol><p><img src="'+Ee+'" alt=""></p><p><img src="'+Se+'" alt=""></p><p><img src="'+Ie+'" alt=""></p><blockquote><p>hello 等价于 0110100001100101011011000110110001101111</p></blockquote><p><img src="'+De+'" alt=""></p><ol start="2"><li>BITFIELD key [SET type offset value]</li></ol><p><img src="'+Ae+'" alt=""></p><p><img src="'+Te+'" alt=""></p><ol start="3"><li>BITFIELD key [INCRBY type offset increment]</li></ol><p><img src="'+Ne+'" alt=""></p><ul><li>默认情况下，INCRBY使用 <code>WARP</code>参数</li></ul><ol start="4"><li>溢出控制OVERFLOW [WARP|SAT|FALL]</li></ol><ul><li>WARP：使用回绕（warp around）方法处理有符号整数和无符号整数的溢出情况</li></ul><p><img src="'+Oe+'" alt=""></p><ul><li>SAT：使用饱和计算（saturation arithmetic）方法处理溢出，下溢计算的结果为最小的整数值，而上溢计算的结果为最大的整数值</li></ul><p><img src="'+Be+'" alt=""></p><ul><li>FALL：命令将拒绝执行那些会导致上溢或者下溢情况出现的计算，并向用户返回空值表示未被执行</li></ul><p><img src="'+Le+'" alt=""></p><h3 id="落地案例实战-高级篇再见" tabindex="-1"><a class="header-anchor" href="#落地案例实战-高级篇再见" aria-hidden="true">#</a> 落地案例实战-高级篇再见</h3><p><img src="'+Ce+'" alt=""></p>',22);function ta(ia,pa){const a=o("ExternalLinkIcon");return p(),l("div",null,[Pe,s("blockquote",null,[s("p",null,[e("官网："),s("a",Me,[e("https://redis.io/docs/data-types/"),n(a)])])]),Xe,s("blockquote",null,[s("p",null,[e("官网地址："),s("a",we,[e("https://redis.io/commands/"),n(a)])]),s("p",null,[e("中文文档："),s("a",ze,[e("http://www.redis.cn/commands.html"),n(a)])])]),Ue,s("blockquote",null,[s("p",null,[e("英文："),s("a",Ze,[e("https://redis.io/commands/"),n(a)])]),s("p",null,[e("中文："),s("a",He,[e("http://www.redis.cn/commands.html"),n(a)])])]),Ke,s("blockquote",null,[s("p",null,[e("官网地址："),s("a",Fe,[e("https://redis.io/docs/data-types/strings/"),n(a)])])]),Ve,s("blockquote",null,[s("p",null,[s("a",We,[e("经纬度_百度百科 (baidu.com)"),n(a)])])]),Ye,s("blockquote",null,[s("p",null,[s("a",je,[e("拾取坐标系统 (baidu.com)"),n(a)])]),s("p",null,[s("a",Qe,[e("IP地址查询 - 在线工具 (tool.lu)"),n(a)])])]),$e,s("blockquote",null,[s("p",null,[e("官网："),s("a",Je,[e("BITFIELD | Redis"),n(a)])]),s("p",null,[e("中文文档："),s("a",sa,[e("BITFIELD命令 -- Redis中国用户组（CRUG）"),n(a)])])]),ea,s("blockquote",null,[s("p",null,[e("Ascii码表："),s("a",aa,[e("https://ascii.org.cn/"),n(a)])])]),na])}const ra=i(Ge,[["render",ta],["__file","三、Redis 10大数据类型.html.vue"]]);export{ra as default};
