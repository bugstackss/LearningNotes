import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,a as i}from"./app.9b10ba0a.js";const l="/assets/image-20221216034208496.cbc88ac5.png",d="/assets/image-20221216034337862.dcc8804f.png",n="/assets/image-20221216035341357.8f42425d.png",r="/assets/image-20221216040647686.a04f1014.png",c="/assets/image-20221216041342680.3a1ac98c.png",o="/assets/image-20221216041708144.9075f186.png",u="/assets/image-20221216041925324.27ce671e.png",m="/assets/image-20221216042124519.a182dfb0.png",v="/assets/image-20221216042140066.cee19c2b.png",t="/assets/image-20221216170825819.fae5706c.png",p={},g=i(`<h1 id="第-03-章-用户与权限管理" tabindex="-1"><a class="header-anchor" href="#第-03-章-用户与权限管理" aria-hidden="true">#</a> 第 03 章_用户与权限管理</h1><h2 id="_1-用户管理" tabindex="-1"><a class="header-anchor" href="#_1-用户管理" aria-hidden="true">#</a> 1. 用户管理</h2><h3 id="_1-1-登录mysql服务器" tabindex="-1"><a class="header-anchor" href="#_1-1-登录mysql服务器" aria-hidden="true">#</a> 1. 1 登录MySQL服务器</h3><p>启动MySQL服务后，可以通过mysql命令来登录MySQL服务器，命令如下：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>mysql –h hostname|hostIP –P port –u username –p DatabaseName –e &quot;SQL语句&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下面详细介绍命令中的参数：</p><ul><li><code>-h参数</code>后面接主机名或者主机IP，hostname为主机，hostIP为主机IP。</li><li><code>-P参数</code>后面接MySQL服务的端口，通过该参数连接到指定的端口。MySQL服务的默认端口是 3306 ， 不使用该参数时自动连接到 3306 端口，port为连接的端口号。</li><li><code>-u参数</code>后面接用户名，username为用户名。</li><li><code>-p参数</code>会提示输入密码。</li><li><code>DatabaseName参数</code>指明登录到哪一个数据库中。如果没有该参数，就会直接登录到MySQL数据库中，然后可以使用USE命令来选择数据库。</li><li><code>-e参数</code>后面可以直接加SQL语句。登录MySQL服务器以后即可执行这个SQL语句，然后退出MySQL服务器。</li></ul><p>举例：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>mysql -uroot -p -hlocalhost -P3306 mysql -e &quot;select host,user from user&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-2-创建用户" tabindex="-1"><a class="header-anchor" href="#_1-2-创建用户" aria-hidden="true">#</a> 1. 2 创建用户</h3><p>CREATE USER语句的基本语法形式如下：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>CREATE USER 用户名 [IDENTIFIED BY &#39;密码&#39;][,用户名 [IDENTIFIED BY &#39;密码&#39;]];
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>用户名参数表示新建用户的账户，由<code>用户（User）</code>和<code>主机名（Host）</code>构成；</li><li>“[ ]”表示可选，也就是说，可以指定用户登录时需要密码验证，也可以不指定密码验证，这样用户可以直接登录。不过，不指定密码的方式不安全，不推荐使用。如果指定密码值，这里需要使用IDENTIFIED BY指定明文密码值。</li><li>CREATE USER语句可以同时创建多个用户。</li></ul><p>举例：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>CREATE USER zhang3 IDENTIFIED BY &#39;123123&#39;;  # 默认host是 %
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>CREATE USER &#39;kangshifu&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;123456&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-3-修改用户" tabindex="-1"><a class="header-anchor" href="#_1-3-修改用户" aria-hidden="true">#</a> 1. 3 修改用户</h3><p>修改用户名：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>UPDATE mysql.user SET USER=&#39;li4&#39; WHERE USER=&#39;wang5&#39;;

FLUSH PRIVILEGES;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+l+`" alt="image-20221216034208496"></p><h3 id="_1-4-删除用户" tabindex="-1"><a class="header-anchor" href="#_1-4-删除用户" aria-hidden="true">#</a> 1. 4 删除用户</h3><p><strong>方式 1 ：使用DROP方式删除（推荐）</strong></p><p>使用DROP USER语句来删除用户时，必须用于DROP USER权限。DROP USER语句的基本语法形式如下：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>DROP USER user[,user]...;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>举例：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>DROP USER li4 ;  # 默认删除host为%的用户
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>DROP USER &#39;kangshifu&#39;@&#39;localhost&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+d+`" alt="image-20221216034337862"></p><p><strong>方式 2 ：使用DELETE方式删除</strong></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>DELETE FROM mysql.user WHERE Host=’hostname’ AND User=’username’;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行完DELETE命令后要使用FLUSH命令来使用户生效，命令如下：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>FLUSH PRIVILEGES;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>举例：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>DELETE FROM mysql.user WHERE Host=&#39;localhost&#39; AND User=&#39;Emily&#39;;

FLUSH PRIVILEGES;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：不推荐通过DELETE FROM USER u WHERE USER=&#39;li4&#39;进行删除，系统会有残留信息保 留。而drop user命令会删除用户以及对应的权限，执行命令后你会发现mysql.user表和mysql.db表 的相应记录都消失了。</p></blockquote><h3 id="_1-5-设置当前用户密码" tabindex="-1"><a class="header-anchor" href="#_1-5-设置当前用户密码" aria-hidden="true">#</a> 1. 5 设置当前用户密码</h3><p><code>旧的写法如下：</code></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code># 修改当前用户的密码：（MySQL5.7测试有效）
SET PASSWORD = PASSWORD(&#39;123456&#39;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里介绍<code>推荐的写法</code>：</p><p><strong>1.使用ALTER USER命令来修改当前用户密码</strong> 用户可以使用ALTER命令来修改自身密码，如下语句代表修改当前登录用户的密码。基本语法如下：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>ALTER USER USER() IDENTIFIED BY &#39;new_password&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>2. 使用SET语句来修改当前用户密码</strong> 使用root用户登录MySQL后，可以使用SET语句来修改密码，具体SQL语句如下：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SET PASSWORD=&#39;new_password&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该语句会自动将密码加密后再赋给当前用户。</p><h3 id="_1-6-修改其它用户密码" tabindex="-1"><a class="header-anchor" href="#_1-6-修改其它用户密码" aria-hidden="true">#</a> 1. 6 修改其它用户密码</h3><p><strong>1.使用ALTER语句来修改普通用户的密码</strong> 可以使用ALTER USER语句来修改普通用户的密码。基本语法形式如下：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>ALTER USER user [IDENTIFIED BY &#39;新密码&#39;]
[,user[IDENTIFIED BY &#39;新密码&#39;]]...;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. 使用SET命令来修改普通用户的密码</strong> 使用root用户登录到MySQL服务器后，可以使用SET语句来修改普通用户的密码。SET语句的代码如下：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SET PASSWORD FOR &#39;username&#39;@&#39;hostname&#39;=&#39;new_password&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>3.使用UPDATE语句修改普通用户的密码（不推荐）</strong></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>UPDATE MySQL.user SET authentication_string=PASSWORD(&quot;123456&quot;)
WHERE User = &quot;username&quot; AND Host = &quot;hostname&quot;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-7-mysql-8-密码管理-了解" tabindex="-1"><a class="header-anchor" href="#_1-7-mysql-8-密码管理-了解" aria-hidden="true">#</a> 1. 7 MySQL 8 密码管理(了解)</h3><h4 id="_1-密码过期策略" tabindex="-1"><a class="header-anchor" href="#_1-密码过期策略" aria-hidden="true">#</a> <strong>1.密码过期策略</strong></h4><ul><li>在MySQL中，数据库管理员可以手动设置账号密码过期，也可以建立一个自动密码过期策略。</li><li>过期策略可以是全局的，也可以为每个账号设置单独的过期策略。</li></ul><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>ALTER USER user PASSWORD EXPIRE;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>练习：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>ALTER USER &#39;kangshifu&#39;@&#39;localhost&#39; PASSWORD EXPIRE;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong>方式①：使用SQL语句更改该变量的值并持久化</strong></li></ul><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SET PERSIST default_password_lifetime = 180 ; # 建立全局策略，设置密码每隔 180 天过期
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong>方式②：配置文件my.cnf中进行维护</strong></li></ul><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>[mysqld]
default_password_lifetime=180 #建立全局策略，设置密码每隔 180 天过期
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>手动设置指定时间过期方式 2 ：单独设置每个账号既可延用全局密码过期策略，也可单独设置策略。在CREATE USER和ALTER USER语句上加入PASSWORD EXPIRE选项可实现单独设置策略。下面是一些语句示例。</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>#设置kangshifu账号密码每 90 天过期：
CREATE USER &#39;kangshifu&#39;@&#39;localhost&#39; PASSWORD EXPIRE INTERVAL 90 DAY;
ALTER USER &#39;kangshifu&#39;@&#39;localhost&#39; PASSWORD EXPIRE INTERVAL 90 DAY;

#设置密码永不过期：
CREATE USER &#39;kangshifu&#39;@&#39;localhost&#39; PASSWORD EXPIRE NEVER;
ALTER USER &#39;kangshifu&#39;@&#39;localhost&#39; PASSWORD EXPIRE NEVER;

#延用全局密码过期策略：
CREATE USER &#39;kangshifu&#39;@&#39;localhost&#39; PASSWORD EXPIRE DEFAULT;
ALTER USER &#39;kangshifu&#39;@&#39;localhost&#39; PASSWORD EXPIRE DEFAULT;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-密码重用策略" tabindex="-1"><a class="header-anchor" href="#_2-密码重用策略" aria-hidden="true">#</a> 2. 密码重用策略</h4><ul><li><p><strong>手动设置密码重用方式 1 ：全局</strong></p><ul><li><p><strong>方式①：使用SQL</strong></p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SET PERSIST password_history = 6 ; #设置不能选择最近使用过的 6 个密码

SET PERSIST password_reuse_interval = 365 ; #设置不能选择最近一年内的密码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="`+n+`" alt="image-20221216035341357" style="zoom:50%;"></li><li><p>方式②：my.cnf配置文件</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>[mysqld]
password_history= 6
password_reuse_interval= 365
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>手动设置密码重用方式 2 ：单独设置</strong></p></li></ul><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>#不能使用最近 5 个密码：
CREATE USER &#39;kangshifu&#39;@&#39;localhost&#39; PASSWORD HISTORY 5 ;
ALTER USER &#39;kangshifu&#39;@&#39;localhost&#39; PASSWORD HISTORY 5 ;

#不能使用最近 365 天内的密码：
CREATE USER &#39;kangshifu&#39;@&#39;localhost&#39; PASSWORD REUSE INTERVAL 365 DAY;
ALTER USER &#39;kangshifu&#39;@&#39;localhost&#39; PASSWORD REUSE INTERVAL 365 DAY;

#既不能使用最近 5 个密码，也不能使用 365 天内的密码
CREATE USER &#39;kangshifu&#39;@&#39;localhost&#39;
PASSWORD HISTORY 5
PASSWORD REUSE INTERVAL 365 DAY;

ALTER USER &#39;kangshifu&#39;@&#39;localhost&#39;

PASSWORD HISTORY 5
PASSWORD REUSE INTERVAL 365 DAY;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-权限管理" tabindex="-1"><a class="header-anchor" href="#_2-权限管理" aria-hidden="true">#</a> 2. 权限管理</h2><h3 id="_2-1-权限列表" tabindex="-1"><a class="header-anchor" href="#_2-1-权限列表" aria-hidden="true">#</a> 2. 1 权限列表</h3><p>MySQL到底都有哪些权限呢？</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>mysql&gt; show privileges;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>（ 1 ）<code>CREATE和DROP权限</code>，可以创建新的数据库和表，或删除（移掉）已有的数据库和表。如果将MySQL数据库中的DROP权限授予某用户，用户就可以删除MySQL访问权限保存的数据库。</p><p>（ 2 ）<code>SELECT、INSERT、UPDATE和DELETE权限</code>允许在一个数据库现有的表上实施操作。</p><p>（ 3 ）<code>SELECT权限</code>只有在它们真正从一个表中检索行时才被用到。</p><p>（ 4 ）<code>INDEX权限</code>允许创建或删除索引，INDEX适用于已有的表。如果具有某个表的CREATE权限，就可以在CREATE TABLE语句中包括索引定义。</p><p>（ 5 ）<code>ALTER权限</code>可以使用ALTER TABLE来更改表的结构和重新命名表。</p><p>（ 6 ）<code>CREATE ROUTINE权限</code>用来创建保存的程序（函数和程序），ALTER ROUTINE权限用来更改和删除保存的程序，<code>EXECUTE权限</code>用来执行保存的程序。</p><p>（ 7 ）<code>GRANT权限</code>允许授权给其他用户，可用于数据库、表和保存的程序。</p><p>（ 8 ）<code>FILE权限</code>使用户可以使用LOAD DATA INFILE和SELECT ... INTO OUTFILE语句读或写服务器上的文件，任何被授予FILE权限的用户都能读或写MySQL服务器上的任何文件（说明用户可以读任何数据库目录下的文件，因为服务器可以访问这些文件）。</p><h3 id="_2-2-授予权限的原则" tabindex="-1"><a class="header-anchor" href="#_2-2-授予权限的原则" aria-hidden="true">#</a> 2. 2 授予权限的原则</h3><p>权限控制主要是出于安全因素，因此需要遵循以下几个经验原则：</p><p>1 、只授予能<code>满足需要的最小权限</code>，防止用户干坏事。比如用户只是需要查询，那就只给select权限就可 以了，不要给用户赋予update、insert或者delete权限。</p><p>2 、创建用户的时候<code>限制用户的登录主机</code>，一般是限制成指定IP或者内网IP段。</p><p>3 、为每个用户<code>设置满足密码复杂度的密码</code>。</p><p>4 、<code>定期清理不需要的用户</code>，回收权限或者删除用户。</p><h3 id="_2-3-授予权限" tabindex="-1"><a class="header-anchor" href="#_2-3-授予权限" aria-hidden="true">#</a> 2. 3 授予权限</h3><p>给用户授权的方式有 2 种，分别是通过把<code>角色赋予用户给用户授权</code>和<code>直接给用户授权</code>。用户是数据库的使用者，我们可以通过给用户授予访问数据库中资源的权限，来控制使用者对数据库的访问，消除安全隐患。</p><p>授权命令：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>GRANT 权限1,权限2,...权限n ON 数据库名称.表名称 TO 用户名@用户地址 [IDENTIFIED BY ‘密码口令’];
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>该权限如果发现没有该用户，则会直接新建一个用户。</li></ul><p>比如：</p><ul><li><p>给li4用户用本地命令行方式，授予atguigudb这个库下的所有表的插删改查的权限。</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>GRANT SELECT,INSERT,DELETE,UPDATE ON atguigudb.* TO li4@localhost ;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>授予通过网络方式登录的joe用户 ，对所有库所有表的全部权限，密码设为 123 。注意这里唯独不包括grant的权限</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>GRANT ALL PRIVILEGES ON *.* TO joe@&#39;%&#39; IDENTIFIED BY &#39;123&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><blockquote><p>我们在开发应用的时候，经常会遇到一种需求，就是要根据用户的不同，对数据进行横向和纵向的分组。</p><ul><li>所谓横向的分组，就是指用户可以接触到的数据的范围，比如可以看到哪些表的数据；</li><li>所谓纵向的分组，就是指用户对接触到的数据能访问到什么程度，比如能看、能改，甚至是删除。</li></ul></blockquote><h3 id="_2-4-查看权限" tabindex="-1"><a class="header-anchor" href="#_2-4-查看权限" aria-hidden="true">#</a> 2. 4 查看权限</h3><ul><li>查看当前用户权限</li></ul><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SHOW GRANTS;
# 或
SHOW GRANTS FOR CURRENT_USER;
# 或
SHOW GRANTS FOR CURRENT_USER();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>查看某用户的全局权限</li></ul><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SHOW GRANTS FOR &#39;user&#39;@&#39;主机地址&#39; ;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-5-收回权限" tabindex="-1"><a class="header-anchor" href="#_2-5-收回权限" aria-hidden="true">#</a> 2. 5 收回权限</h3><p>收回权限就是取消已经赋予用户的某些权限。 <strong>收回用户不必要的权限可以在一定程度上保证系统的安全性</strong>。 MySQL中使用<code>REVOKE语句</code>取消用户的某些权限。使用REVOKE收回权限之后，用户账户的记录将从db、host、tables_priv和columns_priv表中删除，但是用户账户记录仍然在user表中保存（删除user表中的账户记录使用DROP USER语句）。</p><p><strong>注意：在将用户账户从user表删除之前，应该收回相应用户的所有权限。</strong></p><ul><li>收回权限命令</li></ul><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>REVOKE 权限1,权限2,...权限n ON 数据库名称.表名称 FROM 用户名@用户地址;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>举例</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>#收回全库全表的所有权限
REVOKE ALL PRIVILEGES ON *.* FROM joe@&#39;%&#39;;

#收回mysql库下的所有表的插删改查权限
REVOKE SELECT,INSERT,UPDATE,DELETE ON mysql.* FROM joe@localhost;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>注意：<code>须用户重新登录后才能生效</code></li></ul><h2 id="_3-权限表" tabindex="-1"><a class="header-anchor" href="#_3-权限表" aria-hidden="true">#</a> 3. 权限表</h2><h3 id="_3-1-user表" tabindex="-1"><a class="header-anchor" href="#_3-1-user表" aria-hidden="true">#</a> 3.1 user表</h3><p>user表是MySQL中最重要的一个权限表，记录用户账号和权限信息，有 49 个字段。如下图：</p><p><img src="`+r+`" alt="image-20221216040647686"></p><p>这些字段可以分成 4 类，分别是范围列（或用户列）、权限列、安全列和资源控制列。</p><p><strong>1 .范围列（或用户列）</strong></p><ul><li>host ： 表示连接类型 <ul><li><code>%</code> 表示所有远程通过 TCP方式的连接</li><li><code>IP 地址</code> 如 (192.168.1.2、127.0.0.1) 通过制定ip地址进行的TCP方式的连接</li><li><code>机器名</code> 通过制定网络中的机器名进行的TCP方式的连接</li><li><code>::1</code> IPv6的本地ip地址，等同于IPv4的 127.0.0.</li><li><code>localhost</code> 本地方式通过命令行方式的连接 ，比如mysql -u xxx -p xxx 方式的连接。</li></ul></li><li>user ： 表示用户名，同一用户通过不同方式链接的权限是不一样的。</li><li>password ： 密码 <ul><li>所有密码串通过 password(明文字符串) 生成的密文字符串。MySQL 8.0 在用户管理方面增加了角色管理，默认的密码加密方式也做了调整，由之前的 SHA1 改为了 SHA2，不可逆 。同时加上 MySQL 5.7 的禁用用户和用户过期的功能，MySQL 在用户管理方面的功能和安全性都较之 前版本大大的增强了。</li><li>mysql 5.7 及之后版本的密码保存到 authentication_string 字段中不再使用password 字段。</li></ul></li></ul><p><strong>2. 权限列</strong></p><ul><li>Grant_priv字段 <ul><li>表示是否拥有GRANT权限</li></ul></li><li>Shutdown_priv字段 <ul><li>表示是否拥有停止MySQL服务的权限</li></ul></li><li>Super_priv字段 <ul><li>表示是否拥有超级权限</li></ul></li><li>Execute_priv字段 <ul><li>表示是否拥有EXECUTE权限。拥有EXECUTE权限，可以执行存储过程和函数。</li></ul></li><li>Select_priv , Insert_priv等 <ul><li>为该用户所拥有的权限。</li></ul></li></ul><p><strong>3. 安全列</strong> 安全列只有 6 个字段，其中两个是ssl相关的（ssl_type、ssl_cipher），用于<code>加密</code>；两个是x相关的（x509_issuer、x509_subject），用于<code>标识用户</code>；另外两个Plugin字段用于<code>验证用户身份</code>的插件，该字段不能为空。如果该字段为空，服务器就使用内建授权验证机制验证用户身份。</p><p><strong>4. 资源控制列</strong> 资源控制列的字段用来<code>限制用户使用的资源</code>，包含 4 个字段，分别为：</p><p>①max_questions，用户每小时允许执行的查询操作次数；</p><p>②max_updates，用户每小时允许执行的更新操作次数；</p><p>③max_connections，用户每小时允许执行的连接操作次数；</p><p>④max_user_connections，用户允许同时建立的连接次数。</p><p>查看字段：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>DESC mysql.user;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看用户, 以列的方式显示数据：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SELECT * FROM mysql.user \\G;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查询特定字段：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SELECT host,user,authentication_string,select_priv,insert_priv,drop_priv
FROM mysql.user;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+c+`" alt="image-20221216041342680"></p><h3 id="_3-2-db表" tabindex="-1"><a class="header-anchor" href="#_3-2-db表" aria-hidden="true">#</a> 3.2 db表</h3><p>使用DESCRIBE查看db表的基本结构：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>DESCRIBE mysql.db;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>1. 用户列</strong> db表用户列有 3 个字段，分别是Host、User、Db。这 3 个字段分别表示主机名、用户名和数据库名。表示从某个主机连接某个用户对某个数据库的操作权限，这 3 个字段的组合构成了db表的主键。</p><p><strong>2. 权限列</strong></p><p>Create_routine_priv和Alter_routine_priv这两个字段决定用户是否具有创建和修改存储过程的权限。</p><h3 id="_3-3-tables-priv表和columns-priv表" tabindex="-1"><a class="header-anchor" href="#_3-3-tables-priv表和columns-priv表" aria-hidden="true">#</a> 3.3 tables_priv表和columns_priv表</h3><p>tables_priv表用来对<code>表设置操作权限</code>，columns_priv表用来对表的<code>某一列设置权限</code>。tables_priv表和columns_priv表的结构分别如图：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>desc mysql.tables_priv;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>tables_priv表有 8 个字段，分别是Host、Db、User、Table_name、Grantor、Timestamp、Table_priv和Column_priv，各个字段说明如下：</p><ul><li><code>Host</code>、<code>Db</code>、<code>User</code>和<code>Table_name</code>四个字段分别表示主机名、数据库名、用户名和表名。</li><li>Grantor表示修改该记录的用户。</li><li>Timestamp表示修改该记录的时间。</li><li><code>Table_priv</code>表示对象的操作权限。包括Select、Insert、Update、Delete、Create、Drop、Grant、References、Index和Alter。</li><li>Column_priv字段表示对表中的列的操作权限，包括Select、Insert、Update和References。</li></ul><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>desc mysql.columns_priv;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-4-procs-priv表" tabindex="-1"><a class="header-anchor" href="#_3-4-procs-priv表" aria-hidden="true">#</a> 3.4 procs_priv表</h3><p>procs_priv表可以对<code>存储过程和存储函数设置操作权限</code>，表结构如图：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>desc mysql.procs_priv;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+o+'" alt="image-20221216041708144"></p><h2 id="_4-访问控制-了解" tabindex="-1"><a class="header-anchor" href="#_4-访问控制-了解" aria-hidden="true">#</a> 4. 访问控制(了解)</h2><h3 id="_4-1-连接核实阶段" tabindex="-1"><a class="header-anchor" href="#_4-1-连接核实阶段" aria-hidden="true">#</a> 4. 1 连接核实阶段</h3><p>当用户试图连接MySQL服务器时，服务器基于用户的身份以及用户是否能提供正确的密码验证身份来确定接受或者拒绝连接。即客户端用户会在连接请求中提供用户名、主机地址、用户密码，MySQL服务器接收到用户请求后，会 <strong>使用user表中的host、user和authentication_string这 3 个字段匹配客户端提供信息</strong> 。</p><p>服务器只有在user表记录的Host和User字段匹配客户端主机名和用户名，并且提供正确的密码时才接受连接。 <strong>如果连接核实没有通过，服务器就完全拒绝访问</strong> ； <strong>否则，服务器接受连接，然后进入阶段 2 等待用户请求。</strong></p><h3 id="_4-2-请求核实阶段" tabindex="-1"><a class="header-anchor" href="#_4-2-请求核实阶段" aria-hidden="true">#</a> 4. 2 请求核实阶段</h3><p>一旦建立了连接，服务器就进入了访问控制的阶段 2 ，也就是请求核实阶段。对此连接上进来的每个请求，服务器检查该请求要执行什么操作、是否有足够的权限来执行它，这正是需要授权表中的权限列发挥作用的地方。这些权限可以来自user、db、table_priv和column_priv表。</p><p>确认权限时，MySQL首先<code>检查user表</code>，如果指定的权限没有在user表中被授予，那么MySQL就会继续<code>检查db表</code>，db表是下一安全层级，其中的权限限定于数据库层级，在该层级的SELECT权限允许用户查看指定数据库的所有表中的数据；如果在该层级没有找到限定的权限，则MySQL继续<code>检查tables_priv表</code>以及<code>columns_priv表</code>，如果所有权限表都检查完毕，但还是没有找到允许的权限操作，MySQL将<code>返回错误信息</code>，用户请求的操作不能执行，操作失败。</p><blockquote><p>提示： MySQL通过向下层级的顺序（从user表到columns_priv表）检查权限表，但并不是所有的权限都要执行该过程。例如，一个用户登录到MySQL服务器之后只执行对MySQL的管理操作，此时只涉及管理权限，因此MySQL只检查user表。另外，如果请求的权限操作不被允许，MySQL也不会继续检查下一层级的表。</p></blockquote><h2 id="_5-角色管理" tabindex="-1"><a class="header-anchor" href="#_5-角色管理" aria-hidden="true">#</a> 5. 角色管理</h2><h3 id="_5-1-角色的理解" tabindex="-1"><a class="header-anchor" href="#_5-1-角色的理解" aria-hidden="true">#</a> 5. 1 角色的理解</h3><p>引入角色的目的是<code>方便管理拥有相同权限的用户</code>。 <strong>恰当的权限设定，可以确保数据的安全性，这是至关重要的 。</strong></p><p><img src="'+u+`" alt="image-20221216041925324"></p><h3 id="_5-2-创建角色" tabindex="-1"><a class="header-anchor" href="#_5-2-创建角色" aria-hidden="true">#</a> 5. 2 创建角色</h3><p>创建角色使用<code>CREATE ROLE</code>语句，语法如下：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>CREATE ROLE &#39;role_name&#39;[@&#39;host_name&#39;] [,&#39;role_name&#39;[@&#39;host_name&#39;]]...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>角色名称的命名规则和用户名类似。如果<code>host_name省略，默认为%</code>，<code>role_name不可省略</code>，不可为空。</p><p>练习：我们现在需要创建一个经理的角色，就可以用下面的代码：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>CREATE ROLE &#39;manager&#39;@&#39;localhost&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-3-给角色赋予权限" tabindex="-1"><a class="header-anchor" href="#_5-3-给角色赋予权限" aria-hidden="true">#</a> 5. 3 给角色赋予权限</h3><p>创建角色之后，默认这个角色是没有任何权限的，我们需要给角色授权。给角色授权的语法结构是：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>GRANT privileges ON table_name TO &#39;role_name&#39;[@&#39;host_name&#39;];
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上述语句中privileges代表权限的名称，多个权限以逗号隔开。可使用SHOW语句查询权限名称，图11-列出了部分权限列表。</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SHOW PRIVILEGES\\G;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+m+'" alt="image-20221216042124519"></p><p><img src="'+v+'" alt="image-20221216042140066"></p><p>练习 1 ：我们现在想给经理角色授予商品信息表、盘点表和应付账款表的只读权限，就可以用下面的代码来实现：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>GRANT SELECT ON demo.settlement TO &#39;manager&#39;;\n\nGRANT SELECT ON demo.goodsmaster TO &#39;manager&#39;;\n\nGRANT SELECT ON demo.invcount TO &#39;manager&#39;;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-4-查看角色的权限" tabindex="-1"><a class="header-anchor" href="#_5-4-查看角色的权限" aria-hidden="true">#</a> 5. 4 查看角色的权限</h3><p>赋予角色权限之后，我们可以通过 SHOW GRANTS 语句，来查看权限是否创建成功了：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>mysql&gt; SHOW GRANTS FOR &#39;manager&#39;;\n+-------------------------------------------------------+\n| Grants for manager@% |\n+-------------------------------------------------------+\n| GRANT USAGE ON *.* TO `manager`@`%` |\n| GRANT SELECT ON `demo`.`goodsmaster` TO `manager`@`%` |\n| GRANT SELECT ON `demo`.`invcount` TO `manager`@`%` |\n| GRANT SELECT ON `demo`.`settlement` TO `manager`@`%` |\n+-------------------------------------------------------+\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只要你创建了一个角色，系统就会自动给你一个“<code>USAGE</code>”权限，意思是<code>连接登录数据库的权限</code>。代码的最后三行代表了我们给角色“manager”赋予的权限，也就是对商品信息表、盘点表和应付账款表的只读权限。</p><p>结果显示，库管角色拥有商品信息表的只读权限和盘点表的增删改查权限。</p><h3 id="_5-5-回收角色的权限" tabindex="-1"><a class="header-anchor" href="#_5-5-回收角色的权限" aria-hidden="true">#</a> 5. 5 回收角色的权限</h3><p>角色授权后，可以对角色的权限进行维护，对权限进行添加或撤销。添加权限使用GRANT语句，与角色授权相同。撤销角色或角色权限使用REVOKE语句。</p><p>修改了角色的权限，会影响拥有该角色的账户的权限。</p><p>撤销角色权限的SQL语法如下：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>REVOKE privileges ON tablename FROM &#39;rolename&#39;;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>练习 1 ：撤销school_write角色的权限。</p><p>（ 1 ）使用如下语句撤销school_write角色的权限。</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>REVOKE INSERT, UPDATE, DELETE ON school.* FROM &#39;school_write&#39;;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>（ 2 ）撤销后使用SHOW语句查看school_write对应的权限，语句如下。</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SHOW GRANTS FOR &#39;school_write&#39;;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-6-删除角色" tabindex="-1"><a class="header-anchor" href="#_5-6-删除角色" aria-hidden="true">#</a> 5. 6 删除角色</h3><p>当我们需要对业务重新整合的时候，可能就需要对之前创建的角色进行清理，删除一些不会再使用的角色。删除角色的操作很简单，你只要掌握语法结构就行了。</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>DROP ROLE role [,role2]...\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意，<code>如果你删除了角色，那么用户也就失去了通过这个角色所获得的所有权限</code>。</p><p>练习：执行如下SQL删除角色school_read。</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>DROP ROLE &#39;school_read&#39;;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-7-给用户赋予角色" tabindex="-1"><a class="header-anchor" href="#_5-7-给用户赋予角色" aria-hidden="true">#</a> 5. 7 给用户赋予角色</h3><p>角色创建并授权后，要赋给用户并处于激活状态才能发挥作用。给用户添加角色可使用GRANT语句，语法形式如下：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>GRANT role [,role2,...] TO user [,user2,...];\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在上述语句中，role代表角色，user代表用户。可将多个角色同时赋予多个用户，用逗号隔开即可。</p><p>练习：给kangshifu用户添加角色school_read权限。 （ 1 ）使用GRANT语句给kangshifu添加school_read权限，SQL语句如下。</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>GRANT &#39;school_read&#39; TO &#39;kangshifu&#39;@&#39;localhost&#39;;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>（ 2 ）添加完成后使用SHOW语句查看是否添加成功，SQL语句如下。</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SHOW GRANTS FOR &#39;kangshifu&#39;@&#39;localhost&#39;;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>（ 3 ）使用kangshifu用户登录，然后查询当前角色，如果角色未激活，结果将显示NONE。SQL语句如下。</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SELECT CURRENT_ROLE();\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="'+t+`" alt="image-20221216170825819"></p><h3 id="_5-8-激活角色" tabindex="-1"><a class="header-anchor" href="#_5-8-激活角色" aria-hidden="true">#</a> 5. 8 激活角色</h3><p><strong>方式 1 ：使用set default role 命令激活角色</strong></p><p>举例：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SET DEFAULT ROLE ALL TO &#39;kangshifu&#39;@&#39;localhost&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>举例：使用<code>SET DEFAULT ROLE</code>为下面 4 个用户默认激活所有已拥有的角色如下：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SET DEFAULT ROLE ALL TO
&#39;dev1&#39;@&#39;localhost&#39;,
&#39;read_user1&#39;@&#39;localhost&#39;,
&#39;read_user2&#39;@&#39;localhost&#39;,
&#39;rw_user1&#39;@&#39;localhost&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方式 2 ：将activate_all_roles_on_login设置为ON</strong></p><ul><li>默认情况：</li></ul><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>mysql&gt; show variables like &#39;activate_all_roles_on_login&#39;;
+-----------------------------+-------+
| Variable_name | Value |
+-----------------------------+-------+
| activate_all_roles_on_login | OFF |
+-----------------------------+-------+
1 row in set (0.00 sec)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>设置：</li></ul><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SET GLOBAL activate_all_roles_on_login=ON;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这条 SQL 语句的意思是，对所有角色永久激活。运行这条语句之后，用户才真正拥有了赋予角色的所有权限。</p><h3 id="_5-9-撤销用户的角色" tabindex="-1"><a class="header-anchor" href="#_5-9-撤销用户的角色" aria-hidden="true">#</a> 5.9 撤销用户的角色</h3><p>撤销用户角色的SQL语法如下：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>REVOKE role FROM user;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>练习：撤销kangshifu用户的school_read角色。</p><p>（ 1 ）撤销的SQL语句如下</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>REVOKE &#39;school_read&#39; FROM &#39;kangshifu&#39;@&#39;localhost&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>（ 2 ）撤销后，执行如下查询语句，查看kangshifu用户的角色信息</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SHOW GRANTS FOR &#39;kangshifu&#39;@&#39;localhost&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行发现，用户kangshifu之前的school_read角色已被撤销。</p><h3 id="_5-10-设置强制角色-mandatory-role" tabindex="-1"><a class="header-anchor" href="#_5-10-设置强制角色-mandatory-role" aria-hidden="true">#</a> 5.10 设置强制角色(mandatory role)</h3><p>方式 1 ：服务启动前设置</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>[mysqld]
mandatory_roles=&#39;role1,role2@localhost,r3@%.atguigu.com&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>方式 2 ：运行时设置</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SET PERSIST mandatory_roles = &#39;role1,role2@localhost,r3@%.example.com&#39;;  #系统重启后仍然有效
SET GLOBAL mandatory_roles = &#39;role1,role2@localhost,r3@%.example.com&#39;;  #系统重启后失效
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,228),h=[g];function b(E,y){return s(),a("div",null,h)}const S=e(p,[["render",b],["__file","第 03 章_用户与权限管理.html.vue"]]);export{S as default};
