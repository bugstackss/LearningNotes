const e=JSON.parse('{"key":"v-77b73ef6","path":"/notes/javacore/java/08%E3%80%81%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88%E4%B8%8B%EF%BC%89.html","title":"08、面向对象（下）","lang":"zh-CN","frontmatter":{"title":"08、面向对象（下）","category":["Java"],"tag":["Java"],"sticky":false,"star":false,"article":true,"timeline":true,"description":"01、关键字：static 1.1、static 的使用 当我们编写一个类时，其实就是在描述其对象的属性和行为，而并没有产生实质上的对象，只有通过 new 关键字才会产生出对象，这时系统才会分配内存空间给对象，其方法才可以供外部调用。 我们有时候希望无论是否产生了对象或无论产生了多少对象的情况下，某些特定的数据在内存空间里只有一份。 例如所有的中国人都...","head":[["meta",{"property":"og:url","content":"https://Ragnarokoo.github.io/LearningNotes/notes/javacore/java/08%E3%80%81%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88%E4%B8%8B%EF%BC%89.html"}],["meta",{"property":"og:site_name","content":"📚全栈开发学习指南"}],["meta",{"property":"og:title","content":"08、面向对象（下）"}],["meta",{"property":"og:description","content":"01、关键字：static 1.1、static 的使用 当我们编写一个类时，其实就是在描述其对象的属性和行为，而并没有产生实质上的对象，只有通过 new 关键字才会产生出对象，这时系统才会分配内存空间给对象，其方法才可以供外部调用。 我们有时候希望无论是否产生了对象或无论产生了多少对象的情况下，某些特定的数据在内存空间里只有一份。 例如所有的中国人都..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://Ragnarokoo.github.io/LearningNotes/"}],["meta",{"property":"og:updated_time","content":"2023-05-31T09:16:41.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"08、面向对象（下）"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:modified_time","content":"2023-05-31T09:16:41.000Z"}]]},"excerpt":"","headers":[{"level":2,"title":"01、关键字：static","slug":"_01、关键字-static","link":"#_01、关键字-static","children":[{"level":3,"title":"1.1、static 的使用","slug":"_1-1、static-的使用","link":"#_1-1、static-的使用","children":[]},{"level":3,"title":"1.2、类变量 vs 实例变量内存解析","slug":"_1-2、类变量-vs-实例变量内存解析","link":"#_1-2、类变量-vs-实例变量内存解析","children":[]},{"level":3,"title":"1.3、static 修饰方法","slug":"_1-3、static-修饰方法","link":"#_1-3、static-修饰方法","children":[]},{"level":3,"title":"1.4、自定义 ArrayUtil 的优化","slug":"_1-4、自定义-arrayutil-的优化","link":"#_1-4、自定义-arrayutil-的优化","children":[]},{"level":3,"title":"1.5、static 的应用举例","slug":"_1-5、static-的应用举例","link":"#_1-5、static-的应用举例","children":[]},{"level":3,"title":"1.6、static 的练习","slug":"_1-6、static-的练习","link":"#_1-6、static-的练习","children":[]},{"level":3,"title":"1.7、单例(Singleton)设计模式","slug":"_1-7、单例-singleton-设计模式","link":"#_1-7、单例-singleton-设计模式","children":[]}]},{"level":2,"title":"02、理解 main 方法的语法（了解)","slug":"_02、理解-main-方法的语法-了解","link":"#_02、理解-main-方法的语法-了解","children":[]},{"level":2,"title":"03、类的成员之四：代码块","slug":"_03、类的成员之四-代码块","link":"#_03、类的成员之四-代码块","children":[]},{"level":2,"title":"04、关键字：final","slug":"_04、关键字-final","link":"#_04、关键字-final","children":[]},{"level":2,"title":"05、抽象类与抽象方法","slug":"_05、抽象类与抽象方法","link":"#_05、抽象类与抽象方法","children":[{"level":3,"title":"5.1、抽象类应用","slug":"_5-1、抽象类应用","link":"#_5-1、抽象类应用","children":[]},{"level":3,"title":"5.2、练习","slug":"_5-2、练习","link":"#_5-2、练习","children":[]},{"level":3,"title":"5.3、创建抽象类的匿名子类对象","slug":"_5-3、创建抽象类的匿名子类对象","link":"#_5-3、创建抽象类的匿名子类对象","children":[]},{"level":3,"title":"5.4、多态的应用：模板方法设计模式(TemplateMethod)","slug":"_5-4、多态的应用-模板方法设计模式-templatemethod","link":"#_5-4、多态的应用-模板方法设计模式-templatemethod","children":[]},{"level":3,"title":"5.5、抽象类的练习","slug":"_5-5、抽象类的练习","link":"#_5-5、抽象类的练习","children":[]}]},{"level":2,"title":"06、接口(interface)","slug":"_06、接口-interface","link":"#_06、接口-interface","children":[{"level":3,"title":"6.1、概述","slug":"_6-1、概述","link":"#_6-1、概述","children":[]},{"level":3,"title":"6.2、举例","slug":"_6-2、举例","link":"#_6-2、举例","children":[]},{"level":3,"title":"6.3、接口的应用：代理模式(Proxy)","slug":"_6-3、接口的应用-代理模式-proxy","link":"#_6-3、接口的应用-代理模式-proxy","children":[]},{"level":3,"title":"6.4、接口的应用：工厂模式","slug":"_6-4、接口的应用-工厂模式","link":"#_6-4、接口的应用-工厂模式","children":[]}]},{"level":2,"title":"07、Java 8 中关于接口的改进","slug":"_07、java-8-中关于接口的改进","link":"#_07、java-8-中关于接口的改进","children":[]},{"level":2,"title":"08、类的内部成员之五：内部类","slug":"_08、类的内部成员之五-内部类","link":"#_08、类的内部成员之五-内部类","children":[{"level":3,"title":"8.1、匿名内部类","slug":"_8-1、匿名内部类","link":"#_8-1、匿名内部类","children":[]},{"level":3,"title":"8.2、局部内部类的使用注意","slug":"_8-2、局部内部类的使用注意","link":"#_8-2、局部内部类的使用注意","children":[]}]}],"git":{"createdTime":1685524601000,"updatedTime":1685524601000,"contributors":[{"name":"kirito","email":"2724964601@qq.com","commits":1}]},"readingTime":{"minutes":38.01,"words":11404},"filePathRelative":"notes/javacore/java/08、面向对象（下）.md","localizedDate":"2023年5月31日"}');export{e as data};
