import{_ as t}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as e,c as n,a as s}from"./app.9b10ba0a.js";const a="/assets/1b91153f7ba343f6833e8979fbb15d86-20230304224506196.668047e2.png",r="/assets/8d10ad209d584aefbf76f7ec529c0075-20230304224505846.3defd8e6.png",i={},d=s('<h1 id="_18、listener-监听器" tabindex="-1"><a class="header-anchor" href="#_18、listener-监听器" aria-hidden="true">#</a> 18、Listener 监听器</h1><h2 id="一、观察者模式" tabindex="-1"><a class="header-anchor" href="#一、观察者模式" aria-hidden="true">#</a> 一、观察者模式</h2><p>二十三种设计模式之一：</p><p><img src="'+a+'" alt="image.png"></p><ul><li>观察者：监控『被观察者』的行为，一旦发现『被观察者』触发了事件，就会调用事先准备好的方法执行操作。</li><li>被观察者：『被观察者』一旦触发了被监控的事件，就会被『观察者』发现。</li></ul><h2 id="二、监听器简介" tabindex="-1"><a class="header-anchor" href="#二、监听器简介" aria-hidden="true">#</a> 二、监听器简介</h2><h3 id="_1、概念" tabindex="-1"><a class="header-anchor" href="#_1、概念" aria-hidden="true">#</a> 1、概念</h3><p>监听器：专门用于对其他对象身上发生的事件或状态改变进行监听和相应处理的对象，当被监视的对象发生情况时，立即采取相应的行动。 <strong>Servlet监听器</strong>：Servlet规范中定义的一种特殊类，它用于监听Web应用程序中的ServletContext，HttpSession 和HttpServletRequest等域对象的创建与销毁事件，以及监听这些域对象中的属性发生修改的事件。</p><h3 id="_2、分类" tabindex="-1"><a class="header-anchor" href="#_2、分类" aria-hidden="true">#</a> 2、分类</h3><p><img src="'+r+`" alt="image.png"></p><ul><li>域对象监听器</li><li>域对象的属性域监听器</li><li>Session域中数据的监听器</li></ul><h3 id="_3、监听器列表" tabindex="-1"><a class="header-anchor" href="#_3、监听器列表" aria-hidden="true">#</a> 3、监听器列表</h3><h4 id="_1servletcontextlistener" tabindex="-1"><a class="header-anchor" href="#_1servletcontextlistener" aria-hidden="true">#</a> ①ServletContextListener</h4><p>作用：监听ServletContext对象的创建与销毁</p><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>contextInitialized(ServletContextEvent sce)</td><td>ServletContext创建时调用</td></tr><tr><td>contextDestroyed(ServletContextEvent sce)</td><td>ServletContext销毁时调用</td></tr></tbody></table><p>ServletContextEvent对象代表从ServletContext对象身上捕获到的事件，通过这个事件对象我们可以获取到ServletContext对象。</p><h4 id="_2httpsessionlistener" tabindex="-1"><a class="header-anchor" href="#_2httpsessionlistener" aria-hidden="true">#</a> ②HttpSessionListener</h4><p>作用：监听HttpSession对象的创建与销毁</p><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>sessionCreated(HttpSessionEvent hse)</td><td>HttpSession对象创建时调用</td></tr><tr><td>sessionDestroyed(HttpSessionEvent hse)</td><td>HttpSession对象销毁时调用</td></tr></tbody></table><p>HttpSessionEvent对象代表从HttpSession对象身上捕获到的事件，通过这个事件对象我们可以获取到触发事件的HttpSession对象。</p><h4 id="_3servletrequestlistener" tabindex="-1"><a class="header-anchor" href="#_3servletrequestlistener" aria-hidden="true">#</a> ③ServletRequestListener</h4><p>作用：监听ServletRequest对象的创建与销毁</p><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>requestInitialized(ServletRequestEvent sre)</td><td>ServletRequest对象创建时调用</td></tr><tr><td>requestDestroyed(ServletRequestEvent sre)</td><td>ServletRequest对象销毁时调用</td></tr></tbody></table><p>ServletRequestEvent对象代表从HttpServletRequest对象身上捕获到的事件，通过这个事件对象我们可以获取到触发事件的HttpServletRequest对象。另外还有一个方法可以获取到当前Web应用的ServletContext对象。</p><h4 id="_4servletcontextattributelistener" tabindex="-1"><a class="header-anchor" href="#_4servletcontextattributelistener" aria-hidden="true">#</a> ④ServletContextAttributeListener</h4><p>作用：监听ServletContext中属性的创建、修改和销毁</p><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>attributeAdded(ServletContextAttributeEvent scab)</td><td>向ServletContext中添加属性时调用</td></tr><tr><td>attributeRemoved(ServletContextAttributeEvent scab)</td><td>从ServletContext中移除属性时调用</td></tr><tr><td>attributeReplaced(ServletContextAttributeEvent scab)</td><td>当ServletContext中的属性被修改时调用</td></tr></tbody></table><p>ServletContextAttributeEvent对象代表属性变化事件，它包含的方法如下：</p><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>getName()</td><td>获取修改或添加的属性名</td></tr><tr><td>getValue()</td><td>获取被修改或添加的属性值</td></tr><tr><td>getServletContext()</td><td>获取ServletContext对象</td></tr></tbody></table><h4 id="_5httpsessionattributelistener" tabindex="-1"><a class="header-anchor" href="#_5httpsessionattributelistener" aria-hidden="true">#</a> ⑤HttpSessionAttributeListener</h4><p>作用：监听HttpSession中属性的创建、修改和销毁</p><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>attributeAdded(HttpSessionBindingEvent se)</td><td>向HttpSession中添加属性时调用</td></tr><tr><td>attributeRemoved(HttpSessionBindingEvent se)</td><td>从HttpSession中移除属性时调用</td></tr><tr><td>attributeReplaced(HttpSessionBindingEvent se)</td><td>当HttpSession中的属性被修改时调用</td></tr></tbody></table><p>HttpSessionBindingEvent对象代表属性变化事件，它包含的方法如下：</p><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>getName()</td><td>获取修改或添加的属性名</td></tr><tr><td>getValue()</td><td>获取被修改或添加的属性值</td></tr><tr><td>getSession()</td><td>获取触发事件的HttpSession对象</td></tr></tbody></table><h4 id="_6servletrequestattributelistener" tabindex="-1"><a class="header-anchor" href="#_6servletrequestattributelistener" aria-hidden="true">#</a> ⑥ServletRequestAttributeListener</h4><p>作用：监听ServletRequest中属性的创建、修改和销毁</p><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>attributeAdded(ServletRequestAttributeEvent srae)</td><td>向ServletRequest中添加属性时调用</td></tr><tr><td>attributeRemoved(ServletRequestAttributeEvent srae)</td><td>从ServletRequest中移除属性时调用</td></tr><tr><td>attributeReplaced(ServletRequestAttributeEvent srae)</td><td>当ServletRequest中的属性被修改时调用</td></tr></tbody></table><p>ServletRequestAttributeEvent对象代表属性变化事件，它包含的方法如下：</p><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>getName()</td><td>获取修改或添加的属性名</td></tr><tr><td>getValue()</td><td>获取被修改或添加的属性值</td></tr><tr><td>getServletRequest ()</td><td>获取触发事件的ServletRequest对象</td></tr></tbody></table><h4 id="_7httpsessionbindinglistener" tabindex="-1"><a class="header-anchor" href="#_7httpsessionbindinglistener" aria-hidden="true">#</a> ⑦HttpSessionBindingListener</h4><p>作用：监听某个对象在Session域中的创建与移除</p><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>valueBound(HttpSessionBindingEvent event)</td><td>该类的实例被放到Session域中时调用</td></tr><tr><td>valueUnbound(HttpSessionBindingEvent event)</td><td>该类的实例从Session中移除时调用</td></tr></tbody></table><p>HttpSessionBindingEvent对象代表属性变化事件，它包含的方法如下：</p><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>getName()</td><td>获取当前事件涉及的属性名</td></tr><tr><td>getValue()</td><td>获取当前事件涉及的属性值</td></tr><tr><td>getSession()</td><td>获取触发事件的HttpSession对象</td></tr></tbody></table><h4 id="_8httpsessionactivationlistener" tabindex="-1"><a class="header-anchor" href="#_8httpsessionactivationlistener" aria-hidden="true">#</a> ⑧HttpSessionActivationListener</h4><p>作用：监听某个对象在Session中的序列化与反序列化。</p><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>sessionWillPassivate(HttpSessionEvent se)</td><td>该类实例和Session一起钝化到硬盘时调用</td></tr><tr><td>sessionDidActivate(HttpSessionEvent se)</td><td>该类实例和Session一起活化到内存时调用</td></tr></tbody></table><p>HttpSessionEvent对象代表事件对象，通过getSession()方法获取事件涉及的HttpSession对象。</p><h2 id="三、servletcontextlistener" tabindex="-1"><a class="header-anchor" href="#三、servletcontextlistener" aria-hidden="true">#</a> 三、ServletContextListener</h2><h3 id="_1、实用性" tabindex="-1"><a class="header-anchor" href="#_1、实用性" aria-hidden="true">#</a> 1、实用性</h3><p>将来学习SpringMVC的时候，会用到一个ContextLoaderListener，这个监听器就实现了ServletContextListener接口，表示对ServletContext对象本身的生命周期进行监控。</p><h3 id="_2、具体用法" tabindex="-1"><a class="header-anchor" href="#_2、具体用法" aria-hidden="true">#</a> 2、具体用法</h3><h4 id="_1创建监听器类" tabindex="-1"><a class="header-anchor" href="#_1创建监听器类" aria-hidden="true">#</a> ①创建监听器类</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AtguiguListener</span> <span class="token keyword">implements</span> <span class="token class-name">ServletContextListener</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextInitialized</span><span class="token punctuation">(</span>
            <span class="token comment">// Event对象代表本次事件，通过这个对象可以获取ServletContext对象本身</span>
            <span class="token class-name">ServletContextEvent</span> sce<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello，我是ServletContext，我出生了！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">ServletContext</span> servletContext <span class="token operator">=</span> sce<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;servletContext = &quot;</span> <span class="token operator">+</span> servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextDestroyed</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> sce<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello，我是ServletContext，我打算去休息一会儿！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2注册监听器" tabindex="-1"><a class="header-anchor" href="#_2注册监听器" aria-hidden="true">#</a> ②注册监听器</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 每一个listener标签对应一个监听器配置，若有多个监听器，则配置多个listener标签即可 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 配置监听器指定全类名即可 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">&gt;</span></span>com.atguigu.listener.AtguiguListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>事件触发过程中控制台日志的打印：</p><blockquote><p>Connected to server [2021-03-20 04:23:20,982] Artifact pro10-listener:war exploded: Artifact is being deployed, please wait... 三月 20, 2021 4:23:21 下午 org.apache.catalina.deploy.WebXml setVersion 警告: Unknown version string [4.0]. Default version will be used. Hello，我是ServletContext，我出生了！ servletContext = org.apache.catalina.core.ApplicationContextFacade@6a66017e [2021-03-20 04:23:21,426] Artifact pro10-listener:war exploded: Artifact is deployed successfully [2021-03-20 04:23:21,426] Artifact pro10-listener:war exploded: Deploy took 444 milliseconds 三月 20, 2021 4:23:30 下午 org.apache.catalina.startup.HostConfig deployDirectory 信息: Deploying web application directory D:\\software\\apache-tomcat-7.0.57\\webapps\\manager 三月 20, 2021 4:23:31 下午 org.apache.catalina.startup.HostConfig deployDirectory 信息: Deployment of web application directory D:\\software\\apache-tomcat-7.0.57\\webapps\\manager has finished in 124 ms [2021-03-20 04:24:06,422] Artifact pro10-listener:war exploded: Artifact is being deployed, please wait... Hello，我是ServletContext，我打算去休息一会儿！ Hello，我是ServletContext，我出生了！ servletContext = org.apache.catalina.core.ApplicationContextFacade@2a55374c [2021-03-20 04:24:07,115] Artifact pro10-listener:war exploded: Artifact is deployed successfully [2021-03-20 04:24:07,115] Artifact pro10-listener:war exploded: Deploy took 694 milliseconds</p></blockquote>`,58),o=[d];function l(p,c){return e(),n("div",null,o)}const v=t(i,[["render",l],["__file","18、Listener 监听器.html.vue"]]);export{v as default};
