import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as a,c as s,a as t}from"./app.9b10ba0a.js";const e="/assets/D3KZ6tgpVO9Xozn.35ecc6fa.png",p="/assets/VCd79uTnoa3bBWw.9e75b54f.png",o="/assets/IRZtcW1pUFA6kTx.2fa53156.png",c="/assets/u8g3hf2kEIynwYl.4dffc78b.gif",l="/assets/wfJnQeES5VbxX1K.86975efb.gif",i="/assets/YOimhsXNCJEayBx.b6812915.gif",u="/assets/O1EviFRJZ9p6Dr5.8b94b7d8.png",d={},r=t(`<h1 id="_04、springmvc-视图" tabindex="-1"><a class="header-anchor" href="#_04、springmvc-视图" aria-hidden="true">#</a> 04、SpringMVC 视图</h1><p>SpringMVC 中的视图是<code>View</code>接口，视图的作用渲染数据，将模型<code>Model</code>中的数据展示给用户</p><p>SpringMVC 视图的种类很多，默认有<strong>转发视图</strong><code>InternalResourceView</code>和<strong>重定向视图</strong><code>RedirectView</code></p><p>当工程引入<code>jstl</code>的依赖，转发视图会自动转换为<code>JstlView</code>（JSP 内容了解即可）</p><p>若使用的视图技术为<code>Thymeleaf</code>，在 SpringMVC 的配置文件中配置了<code>Thymeleaf</code>的视图解析器，由此视图解析器解析之后所得到的是<code>ThymeleafView</code></p><blockquote><p><strong>注意</strong>：只有在视图名称没有任何前缀时，视图被<code>Thymeleaf</code>视图解析器解析之后，创建的才是<code>ThymeleafView</code>。当视图名称包含前缀（如<code>forward:</code>或<code>redirect:</code>）时，分别对应的时<code>InternalResourceView</code>转发视图和<code>RedirectView</code>重定向视图</p></blockquote><h2 id="_1、thymeleafview" tabindex="-1"><a class="header-anchor" href="#_1、thymeleafview" aria-hidden="true">#</a> 1、ThymeleafView</h2><p>当控制器方法中所设置的视图名称没有任何前缀时，此时的视图名称会被 SpringMVC 配置文件中所配置的视图解析器解析，视图名称拼接视图前缀和视图后缀所得到的最终路径，会通过转发的方式实现跳转</p><p>后台测试代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/testThymeleaftView&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testThymeleaftView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前台测试代码</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@{/viewController/testThymeleaftView}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>测试 ThymeleaftView<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>断点调试，查看创建的<code>View</code>视图对象为<code>ThymeleafView</code>对象</p><p><img src="`+e+`" alt="image-20220322200839355"></p><h2 id="_2、转发视图" tabindex="-1"><a class="header-anchor" href="#_2、转发视图" aria-hidden="true">#</a> 2、转发视图</h2><p>SpringMVC 中默认的转发视图是<code>InternalResourceView</code></p><p>创建转发视图的情况：当控制器方法中所设置的视图名称以<code>forward:</code>为前缀时，创建<code>InternalResourceView</code>视图，此时的视图名称不会被 SpringMVC 配置文件中所配置的视图解析器解析，而是会将前缀<code>forward:</code>去掉，剩余部分作为最终路径通过转发的方式实现跳转</p><p>例如：<code>forward:/</code>、<code>forward:/viewController/testThymeleaftView</code></p><p>后台测试代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/testForward&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testForward</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;forward:/viewController/testThymeleaftView&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前台测试代码</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@{/viewController/testForward}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>测试 InternalResourceView<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>断点调试，查看创建的<code>View</code>视图对象为<code>InternalResourceView</code>对象</p><p><img src="`+p+`" alt="image-20220322201800705"></p><h2 id="_3、重定向视图" tabindex="-1"><a class="header-anchor" href="#_3、重定向视图" aria-hidden="true">#</a> 3、重定向视图</h2><p>SpringMVC中默认的重定向视图是<code>RedirectView</code></p><p>创建重定向视图的情况：当控制器方法中所设置的视图名称以<code>redirect:</code>为前缀时，创建<code>RedirectView</code>视图，此时的视图名称不会被 SpringMVC 配置文件中所配置的视图解析器解析，而是会将前缀<code>redirect:</code>去掉，剩余部分作为最终路径通过重定向的方式实现跳转</p><p>例如：<code>forward:/</code>、<code>forward:/viewController/testThymeleaftView</code></p><p>后台测试代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/testRedirect&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testRedirect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;redirect:/viewController/testThymeleaftView&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前台测试代码</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@{/viewController/testRedirect}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>测试 RedirectView<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>断点调试，查看创建的<code>View</code>视图对象为<code>RedirectView</code>对象</p><p><img src="`+o+`" alt="image-20220322204348222"></p><h2 id="_4、转发和重定向" tabindex="-1"><a class="header-anchor" href="#_4、转发和重定向" aria-hidden="true">#</a> 4、转发和重定向</h2><p>转发和重定向的区别</p><ul><li>1）转发对于浏览器来说只发送一次请求（另一次请求实际上在服务器内部发生，只是客户端中看不到而已）；重定向对于浏览器来说发送两次请求（不管是转发还是重定向，在服务器中其实都是两次请求）</li><li>2）转发在浏览器地址栏中呈现的是发送请求时的地址；重定向在浏览器地址栏中呈现的是重定向后的地址</li><li>3）转发时<code>request</code>域对象为同一个；重定向时<code>request</code>域对象不是同一个</li><li>4）转发可以访问<code>WEB-INF</code>下资源；重定向不能访问<code>WEB-INF</code>下资源（因为<code>WEB-INF</code>下资源具有安全性、隐藏性，只能通过服务器内部访问，不能通过服务器外部访问）</li><li>5）转发不可以跨域；重定向可以跨域（因为转发是在服务器内部发生的，所以只能访问服务器内部资源；而重定向是浏览器发送的两次请求，可以访问任意资源。如可以重定向到某度，但不能转发到某度）</li></ul><p>以表格方式来对比<em>转发</em>和<em>重定向</em></p><table><thead><tr><th>页面跳转方式</th><th>转发</th><th>重定向</th></tr></thead><tbody><tr><td><strong>请求次数（对浏览器而言）</strong></td><td>1️⃣</td><td>2️⃣</td></tr><tr><td><strong>浏览器地址栏地址</strong></td><td>请求地址</td><td>重定向地址</td></tr><tr><td><strong>request 域对象是否同一个</strong></td><td>✔️</td><td>❌</td></tr><tr><td><strong>是否可访问 WEB-INF 下资源</strong></td><td>✔️</td><td>❌</td></tr><tr><td><strong>是否可跨域</strong></td><td>❌</td><td>✔️</td></tr></tbody></table><h2 id="_5、视图控制器-view-controller" tabindex="-1"><a class="header-anchor" href="#_5、视图控制器-view-controller" aria-hidden="true">#</a> 5、视图控制器 view-controller</h2><p>当前请求映射对应的控制器方法中，仅仅用来实现页面跳转，而没有其他请求过程的处理，即只需设置一个视图名称时，就可以将控制器方法使用<code>view-controller</code>标签进行表示</p><p>例如：我们在<code>HelloController</code>中配置的一个控制器方法，对应<code>view</code>请求，返回<code>view</code>视图</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/view&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">view</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;view&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时通过在SpringmMVC 配置文件中添加<code>&lt;mvc:view-controller&gt;</code>标签，就可以代替上述控制器方法（将上述方法注释即可）</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>view-controller</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/view<span class="token punctuation">&quot;</span></span> <span class="token attr-name">view-name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>view<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>view-controller</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中</p><ul><li><code>path</code>对应控制器方法上<code>@RequestMapping</code>中路径</li><li><code>view-name</code>对应控制器方法返回的视图名称</li></ul><p>此时再来访问<code>/view</code>，同样会被<code>Thymeleaf</code>视图解析器解析，拼接上视图前缀和视图后缀后，找到对应路径下的<code>view.html</code>页面</p><blockquote><p><strong>注意</strong>：在 SpringMVC 配置文件中配置了<code>view-controller</code>之后，控制器中所有的请求映射都会失效</p></blockquote><p>测试结果</p><p><img src="`+c+`" alt="动画  (1)"></p><p>怎么解决这个问题呢？我们需要在 SpringMVC 配置文件中开启 MVC 的注解驱动</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;!--
    当SpringMVC中设置任何一个view-controller时，其他控制器中的请求映射将全部失效，
    此时需要在SpringMVC的核心配置文件中设置开启mvc注解驱动的标签：
    --&gt;
&lt;!--开启 MVC 的注解驱动--&gt;
&lt;mvc:annotation-driven/&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试结果</p><p><img src="`+l+`" alt="动画  (2)"></p><blockquote><p><strong>额外的</strong>：MVC 的注解驱动功能很多，例如</p><p>1、如果加上了默认的 Servlet 处理静态资源（如 JS、CSS 等），控制器请求映射会失效，这时需要配置 MVC 的注解驱动</p><p>2、JAVA 对象转换为 JSON 对象，同样需要配置 MVC 的注解驱动</p><p>因为使用场景很多，所以一般情况下 MVC 注解驱动默认是需要配置的。但是注意，需要了解在不同情况下 MVC 注解驱动的功能是什么</p></blockquote><h2 id="_6、internalresourceviewresolver" tabindex="-1"><a class="header-anchor" href="#_6、internalresourceviewresolver" aria-hidden="true">#</a> 6、InternalResourceViewResolver</h2><p>因为这里是使用<code>JSP</code>作为对<code>InternalResourceViewResolver</code>视图解析器的讲解，所以仅做了解即可</p><p>SpringMVC 配置文件：这里使用<code>InternalResourceViewResolver</code>代替<code>ThymeleafViewResolver</code></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>InternalResourceViewResolver<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>prefix<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/WEB-INF/templates/<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>suffix<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>.jsp<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>后台测试代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JspController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/success&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前台测试代码</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>index.jsp
&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\${pageContext.request.contextPath}/success<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>success.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
success.jsp
&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Success<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Success<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试结果</p><p><img src="`+i+'" alt="动画  (3)"></p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>本节内容较少，主要掌握</p><ul><li>SpringMVC 中默认的视图：<code>InternalResourceView</code>、<code>RedirectView</code><ul><li>使用<code>forward:</code>前缀：<code>InternalResourceView</code>视图</li><li>使用<code>redirect:</code>前缀：<code>RedirectView</code>视图</li></ul></li><li><code>Thymeleaf</code>对应<code>ThymeleafView</code>视图（无任何前缀时），<code>jstl</code>对应<code>JstlView</code></li><li>注意转发和重定向的区别：请求次数、浏览器地址栏地址、<code>request</code>域对象、访问<code>WEB-INF</code>下资源、跨域等方面</li><li><code>InternalResourceViewResolver</code>视图解析器的使用</li></ul><p>附上导图，仅供参考</p><p><img src="'+u+'" alt="04-SpringMVC 视图"></p>',71),k=[r];function g(v,m){return a(),s("div",null,k)}const w=n(d,[["render",g],["__file","04、SpringMVC 视图.html.vue"]]);export{w as default};
