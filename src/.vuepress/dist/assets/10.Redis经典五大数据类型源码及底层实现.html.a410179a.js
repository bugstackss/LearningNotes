import{_ as r}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as c,c as o,d as s,e as t,b as p,a as i,r as d}from"./app.9b10ba0a.js";const g="/assets/image-20230508021351835.7264647f.png",m="/assets/image-20230508021359692.ac4ce37d.png",_="/assets/image-20230508021409333.f39a92e9.png",h="/assets/image-20230508021417863.a63cdfc8.png",u="/assets/image-20230508021428382.a61b80ed.png",b="/assets/image-20230508021437981.cf264175.png",k="/assets/image-20230508021859541.67699fb1.png",f="/assets/image-20230508021907757.cd9be848.png",z="/assets/image-20230508022035211.fd8cb4af.png",v="/assets/image-20230508022046863.cbce2bfa.png",y="/assets/image-20230509203354227.8d894c50.png",q="/assets/image-20230509215229681.1e241eae.png",S="/assets/image-20230509215439361.ae4c819b.png",R="/assets/image-20230509215455019.d33a71b5.png",x="/assets/image-20230509215506188.cf535c7b.png",a="/assets/image-20230509215614438.0fb4b115.png",O="/assets/image-20230509215727068.761469e6.png",D="/assets/image-20230509215736185.217af64b.png",j="/assets/image-20230509215854868.fbc71c13.png",N="/assets/image-20230509215907110.bc19d22a.png",E="/assets/image-20230509215939485.340b617e.png",C="/assets/image-20230509215948639.71bb857e.png",B="/assets/image-20230509220036861.af920f4f.png",L="/assets/image-20230509220119657.f95482c1.png",l="/assets/image-20230509220129201.82586077.png",I="/assets/image-20230509220431956.17e1c3bf.png",G="/assets/image-20230509220509370.d4b6f4d7.png",T="/assets/image-20230509220823386.9415ef79.png",w="/assets/image-20230509220912499.02466713.png",H="/assets/image-20230509221011053.0e0d4a95.png",J="/assets/image-20230509221022165.35edcc77.png",K="/assets/image-20230509221052297.47101622.png",V="/assets/image-20230509221103987.389635f0.png",Z="/assets/image-20230509221115597.2c3d9c61.png",n="/assets/image-20230509221201060.0e608850.png",M="/assets/image-20230509222448430.8b71faef.png",P="/assets/image-20230509222630569.14b5971b.png",F="/assets/image-20230509222702108.a37fac6e.png",A="/assets/image-20230509222726432.ecd3094f.png",W="/assets/image-20230509222742723.fa794255.png",Q="/assets/image-20230509231959382.4cd211cc.png",U="/assets/image-20230509232009883.84ab6e30.png",X="/assets/image-20230509232132907.7bdeee09.png",Y="/assets/image-20230509232702175.90c8afa1.png",$="/assets/image-20230509232710398.e15507c4.png",ss="/assets/image-20230509232737725.aed26256.png",is="/assets/image-20230509232750268.605bdd33.png",es="/assets/image-20230509232808397.2c7e4141.png",ts="/assets/image-20230509232910495.1dc90be7.png",ps="/assets/image-20230509232941611.22930f57.png",as="/assets/image-20230509232951505.1b6e043d.png",ls="/assets/image-20230509233024193.415ef4bc.png",ns="/assets/image-20230509233203927.3da01735.png",rs="/assets/image-20230509233218545.684fc04c.png",cs="/assets/image-20230509233431532.5cc1efee.png",os="/assets/image-20230509233459394.9a133d4e.png",ds="/assets/image-20230509233519053.7b5d7903.png",gs="/assets/image-20230509233607825.be5e40d5.png",ms="/assets/image-20230509233719838.a42bbb4c.png",_s="/assets/image-20230509233735350.e3386d92.png",hs="/assets/image-20230509233750495.bf846f11.png",us="/assets/image-20230509233804800.23f8a5c1.png",bs="/assets/image-20230509233815202.b1331bfc.png",ks="/assets/image-20230509233836570.7e4090e7.png",fs="/assets/image-20230509234008300.6f60473a.png",zs="/assets/image-20230509234024747.3c6a25bd.png",vs="/assets/image-20230509234038201.1d285445.png",ys="/assets/image-20230509234107947.c227dcc2.png",qs="/assets/image-20230509234118943.501f789d.png",Ss="/assets/image-20230509234149323.25b157d3.png",Rs="/assets/image-20230509234223463.6abca4d1.png",xs="/assets/image-20230509234235560.d99e3aad.png",Os="/assets/image-20230509234320428.7d8e7c24.png",Ds="/assets/image-20230509234423682.0e6dffeb.png",js="/assets/image-20230509234504165.b1f68960.png",Ns="/assets/image-20230510002521113.830e2a81.png",Es="/assets/image-20230510002530149.cbdd866d.png",Cs="/assets/image-20230510020446575.d2625caa.png",Bs="/assets/image-20230510020622589.c2090990.png",Ls="/assets/image-20230510020631057.083f73aa.png",Is="/assets/image-20230510020645149.04749f42.png",Gs="/assets/image-20230510020655549.650ea8da.png",Ts="/assets/image-20230510020703748.fa26eb88.png",ws="/assets/image-20230510020804510.462c136a.png",Hs="/assets/image-20230510020821340.c6db3787.png",Js="/assets/image-20230510204053783.1407a524.png",Ks="/assets/image-20230510020958477.5a0072df.png",Vs="/assets/image-20230510021011261.aa9d9dfb.png",Zs="/assets/image-20230510021021768.3fff13ae.png",Ms="/assets/image-20230510021051534.62716e9d.png",Ps="/assets/image-20230510021137388.7f46a058.png",Fs="/assets/image-20230510205135790.8096f7c6.png",As="/assets/image-20230510021237724.af9e80ee.png",Ws="/assets/image-20230510021247190.2c37cec6.png",Qs="/assets/image-20230510021328194.cd207ae1.png",Us="/assets/image-20230510021342117.be4eddf3.png",Xs="/assets/image-20230510021457140.8b413339.png",Ys="/assets/image-20230510021749690.94c626d0.png",$s="/assets/image-20230510021802131.182d4785.png",si="/assets/image-20230510021811134.950eb5fa.png",ii="/assets/image-20230510022158173.b5f6ab3d.png",ei="/assets/image-20230510022242416.8ccbce2d.png",ti="/assets/image-20230510022311272.d99f9eab.png",pi="/assets/image-20230510022325574.09f1765b.png",ai="/assets/image-20230510022359332.22d41984.png",li="/assets/image-20230510022450002.464c69aa.png",ni="/assets/image-20230510022457949.783a009e.png",ri="/assets/image-20230510022546847.51f9e6f2.png",ci="/assets/image-20230510022609876.1b4e59f6.png",oi="/assets/image-20230510022632957.c4151d5e.png",di="/assets/image-20230510022731659.b2cc9b51.png",gi="/assets/image-20230510022856370.798a1403.png",mi="/assets/image-20230510022910024.220f52a6.png",_i="/assets/image-20230510022930547.b1fa2afa.png",hi="/assets/image-20230510023048967.759f354e.png",ui="/assets/image-20230510023222013.7b205d73.png",bi="/assets/image-20230510023236943.a60c525f.png",ki="/assets/image-20230510023426158.edf3ef55.png",fi="/assets/image-20230510023627766.d0b36469.png",zi="/assets/image-20230510023642694.b2581342.png",vi="/assets/image-20230510023718974.7dc20cf3.png",yi="/assets/image-20230510023854558.68b11804.png",qi="/assets/image-20230510023902572.b54bb989.png",Si="/assets/image-20230510023938967.4e5cf256.png",Ri="/assets/image-20230510023951897.a947a173.png",xi="/assets/image-20230510024057988.bdf15e88.png",Oi="/assets/image-20230510024124732.264e36ba.png",Di="/assets/image-20230510024218451.4aeff79c.png",ji="/assets/image-20230510024253046.be39dadc.png",Ni="/assets/image-20230510024323149.1a6e6866.png",Ei="/assets/image-20230510024536116.aa00c963.png",Ci="/assets/image-20230510024654625.66e3c131.png",Bi="/assets/image-20230510024703708.1f3a571f.png",Li="/assets/image-20230510024813309.c371fc67.png",Ii="/assets/image-20230510024821872.69cea15f.png",Gi="/assets/image-20230510024845575.82fca65d.png",Ti="/assets/image-20230510024904385.9a5f535e.png",wi="/assets/image-20230510025039687.ba6a2418.png",Hi="/assets/image-20230510025051355.c1de55a0.png",Ji="/assets/image-20230510025133514.e7b76553.png",Ki="/assets/image-20230509221256528.4c6ac3f5.png",Vi="/assets/image-20230509221424702.6676a884.png",Zi="/assets/image-20230509221450451.8b5447ad.png",Mi="/assets/image-20230509221516212.a6fc6ee3.png",Pi="/assets/image-20230509221636753.b51d6e45.png",Fi="/assets/image-20230509221703826.ae3e1383.png",Ai="/assets/image-20230509221813873.dbade1d3.png",Wi="/assets/image-20230509222120822.22a5bcc9.png",Qi="/assets/image-20230509222128709.f141e2ee.png",Ui="/assets/image-20230509222139291.5dc934c4.png",Xi="/assets/image-20230509222147054.a480521c.png",Yi="/assets/image-20230509222213962.8ebe0624.png",$i="/assets/image-20230509222233180.27240a1f.png",se={},ie=i('<h2 id="_01、分析反馈回来的题目" tabindex="-1"><a class="header-anchor" href="#_01、分析反馈回来的题目" aria-hidden="true">#</a> 01、分析反馈回来的题目</h2><p><img src="'+g+'" alt="image-20230508021351835"></p><p><img src="'+m+'" alt="image-20230508021359692"></p><p><img src="'+_+'" alt="image-20230508021409333"></p><p><img src="'+h+'" alt="image-20230508021417863"></p><p><img src="'+u+'" alt="image-20230508021428382"></p><p><img src="'+b+'" alt="image-20230508021437981"></p><blockquote><p>Redis数据类型的底层数据结构</p></blockquote><ul><li>SDS动态字符串</li><li>双向链表</li><li>压缩列表ziplist</li><li>哈希表hashtable</li><li>跳表skiplist</li><li>整数集合intset</li><li>快速列表quicklist</li><li>紧凑列表listpack</li></ul><blockquote><p>阅读雨那么意义</p></blockquote><p>90%没有太大意义，完全为了面试</p><p>10%大厂自己内部中间件，比如贵公司自己内部redis重构，阿里云redis，美团tair，滴滴kedis等等。</p><h2 id="_02、redis源码在哪里" tabindex="-1"><a class="header-anchor" href="#_02、redis源码在哪里" aria-hidden="true">#</a> 02、Redis源码在哪里</h2>',13),ee=s("li",null,[s("p",null,"/redis-7.0.5/src")],-1),te={href:"https://github.com/redis/redis",target:"_blank",rel:"noopener noreferrer"},pe=i('<p><img src="'+k+'" alt="image-20230508021859541"></p><p><img src="'+f+'" alt="image-20230508021907757"></p><h2 id="_03、源码分析参考书-阳哥推荐的" tabindex="-1"><a class="header-anchor" href="#_03、源码分析参考书-阳哥推荐的" aria-hidden="true">#</a> 03、源码分析参考书，阳哥推荐的</h2><p>《Redis设计与实现》</p><img src="'+z+'" alt="image-20230508022035211" style="zoom:50%;"><p>《Redis5设计与源码分析》</p><img src="'+v+'" alt="image-20230508022046863" style="zoom:50%;"><h2 id="_04、redis源代码的核心部分" tabindex="-1"><a class="header-anchor" href="#_04、redis源代码的核心部分" aria-hidden="true">#</a> 04、Redis源代码的核心部分</h2><blockquote><p>src源码包下面该如何看？</p></blockquote><h3 id="_1-源码分析思路" tabindex="-1"><a class="header-anchor" href="#_1-源码分析思路" aria-hidden="true">#</a> 1.源码分析思路</h3><p>这么多你怎么看？</p><ul><li>外面考什么就看什么</li><li>分类</li></ul><h3 id="_2-redis基本的数据结构-骨架" tabindex="-1"><a class="header-anchor" href="#_2-redis基本的数据结构-骨架" aria-hidden="true">#</a> 2.Redis基本的数据结构（骨架）</h3>',13),ae={href:"https://github.com/redis/redis",target:"_blank",rel:"noopener noreferrer"},le=i('<p><img src="'+y+'" alt="image-20230509203354227"></p><ul><li><p>Redis对象<code> object.c</code></p></li><li><p>字符窜 <code>t_string.c</code></p></li><li><p>列表<code> t_list.c</code></p></li><li><p>字典<code> t_hash.c</code></p></li><li><p>集合及有序列表<code> t_set.c</code>和 <code>t_zset.c</code></p></li><li><p>数据流<code> t_stream.c</code>：Stream的底层实现结构 <code>listpack.c</code> 和<code> rax.c</code> (了解)</p></li></ul>',2),ne=i("<li><p>简单动态字符串 <code>sds.c</code></p></li><li><p>整数集合 <code>intset.c</code></p></li><li><p>压缩列表 <code>ziplist.c</code></p></li><li><p>快速列表<code> quicklist.c</code></p></li><li><p><code>listpack</code></p></li><li><p>字典 <code>dict.c</code></p></li>",6),re=i('<h3 id="_3-redis数据的实现" tabindex="-1"><a class="header-anchor" href="#_3-redis数据的实现" aria-hidden="true">#</a> 3.Redis数据的实现</h3><ul><li>数据库的底层原理实现 <code>db.c</code></li><li>持久化 <code>rdb.c</code> 和 <code>aof.c</code></li></ul><h3 id="_4-redis服务端和客户端实现" tabindex="-1"><a class="header-anchor" href="#_4-redis服务端和客户端实现" aria-hidden="true">#</a> 4.Redis服务端和客户端实现</h3><ul><li>时间驱动 <code>ae.c</code> 和 <code>ae_epoll.c</code></li><li>网络连接 <code>anet.c</code> 和 <code>networking.c</code></li><li>服务端程序 <code>server.c</code></li><li>客户端程序 <code>redis-cli.c</code></li></ul><h3 id="_5-其他" tabindex="-1"><a class="header-anchor" href="#_5-其他" aria-hidden="true">#</a> 5.其他</h3><ul><li>主从复制<code>replication.c</code></li><li>哨兵<code>sentinel.c</code></li><li>集群<code>cluster.c</code></li><li>其他数据结构，如<code>hyperloglog.c</code>、<code>geo.c</code>等</li><li>其他功能，如<code>pub/sub</code>、<code>Lua</code>脚本</li></ul><h2 id="_05、我们平时说redis是字典数据库kv键值对到底是什么" tabindex="-1"><a class="header-anchor" href="#_05、我们平时说redis是字典数据库kv键值对到底是什么" aria-hidden="true">#</a> 05、我们平时说redis是字典数据库KV键值对到底是什么</h2><h3 id="怎样实现键值对-key-value-数据库的" tabindex="-1"><a class="header-anchor" href="#怎样实现键值对-key-value-数据库的" aria-hidden="true">#</a> 怎样实现键值对（key-value）数据库的</h3><p><strong>redis是key-value存储系统</strong></p><ul><li>key一般都是String类型的字符串对象</li><li>value类型则是redis对象（redisObject） <ul><li>value可以是字符串对象，也可以是集合数据类型的对象，比如List对象、Hash对象、Set对象和Zset对象</li></ul></li></ul><p><strong>图说</strong></p><p><img src="'+q+'" alt="image-20230509215229681"></p><h3 id="_10大类型说明-粗分" tabindex="-1"><a class="header-anchor" href="#_10大类型说明-粗分" aria-hidden="true">#</a> 10大类型说明（粗分）</h3><p>传统的5大数据类型</p><ul><li>String</li><li>List</li><li>Hash</li><li>Set</li><li>ZSet</li></ul><p>新介绍的5大数据类型</p><img src="'+S+'" alt="image-20230509215439361" style="zoom:50%;"><p><img src="'+R+'" alt="image-20230509215455019"></p><p><img src="'+x+'" alt="image-20230509215506188"></p><ul><li>bitmap：实质String</li><li>hyperloglog：实质String</li><li>GEO：实质ZSet</li><li>Stream：实质Stream</li><li>BITFIELD：看具体key</li></ul><h3 id="上帝视角" tabindex="-1"><a class="header-anchor" href="#上帝视角" aria-hidden="true">#</a> 上帝视角</h3><p><img src="'+a+'" alt="image-20230509215614438"></p><h3 id="redis定义了redisobject结构体来表示string、hash、list、set、zset等数据类型" tabindex="-1"><a class="header-anchor" href="#redis定义了redisobject结构体来表示string、hash、list、set、zset等数据类型" aria-hidden="true">#</a> Redis定义了redisObject结构体来表示string、hash、list、set、zset等数据类型</h3><ul><li>C语言struct结构体语法简介</li></ul><p><img src="'+O+'" alt="image-20230509215727068"></p><p><img src="'+D+'" alt="image-20230509215736185"></p><ul><li><p>Redis中每个对象都是一个redisObject结构</p></li><li><p>字典、KV是什么（重点）</p><ul><li><p>每个键值对都会有一个dictEntry</p></li><li><p>（源码位置：dict.h）</p><p><img src="'+j+'" alt="image-20230509215854868"></p><p><img src="'+N+'" alt="image-20230509215907110"></p></li><li><p>重点：从dictEntry到RedisObject</p><p><img src="'+E+'" alt="image-20230509215939485"></p><p><img src="'+C+'" alt="image-20230509215948639"></p></li></ul></li><li><p>这些键值对是如何保存进Redis并进行读取操作，O（1）复杂度</p></li></ul><p><img src="'+B+'" alt="image-20230509220036861"></p><ul><li>redisObject+Redis数据类型+Redis所有编码方式（底层实现）三者之间的关系</li></ul><p><img src="'+L+'" alt="image-20230509220119657"></p><p><img src="'+l+'" alt="image-20230509220129201"></p><h2 id="_06、5大结构底层c语言源码分析" tabindex="-1"><a class="header-anchor" href="#_06、5大结构底层c语言源码分析" aria-hidden="true">#</a> 06、5大结构底层C语言源码分析</h2><h3 id="重点-redis数据类型与数据结构总纲图" tabindex="-1"><a class="header-anchor" href="#重点-redis数据类型与数据结构总纲图" aria-hidden="true">#</a> 重点：Redis数据类型与数据结构总纲图</h3><blockquote><p>源码分析总体数据结构大纲</p></blockquote><ol><li>SDS动态字符串</li><li>双向链表</li><li>压缩列表ziplist</li><li>哈希表hashtable</li><li>跳表skiplist</li><li>证书集合intset</li><li>快速列表quicklist</li><li>紧凑列表listpack</li></ol><blockquote><p>redis6.0.5</p></blockquote><p><strong>redis6之前，老版本</strong></p><p><img src="'+I+'" alt="image-20230509220431956"></p><blockquote><p>2021.11.29号之后</p></blockquote><blockquote><p>redis7</p></blockquote><p><img src="'+G+'" alt="image-20230509220509370"></p><blockquote><p>复习一下基础篇介绍的redis7新特性，看看数据结构</p></blockquote><h3 id="源码分析总体数据结构大纲" tabindex="-1"><a class="header-anchor" href="#源码分析总体数据结构大纲" aria-hidden="true">#</a> 源码分析总体数据结构大纲</h3><blockquote><p>程序员写代码时脑子底层思维</p></blockquote><ul><li>上帝视角最右边如何来的</li></ul><p><img src="'+a+'" alt="image-20230509215614438"></p><ul><li>redisObject操作底层定义来自哪里？</li></ul><p>笔记最下还有</p><p><img src="'+l+'" alt="image-20230509220129201"></p><p><img src="'+T+'" alt="image-20230509220823386"></p><h3 id="从set-hello-world说起" tabindex="-1"><a class="header-anchor" href="#从set-hello-world说起" aria-hidden="true">#</a> 从set hello world说起</h3><ul><li>每个键值对都会有一个dictEntry</li></ul><p>set hello word为例，因为Redis是KV键值对的数据库，每个键值对都会有一个dictEntry(源码位置：dict.h)，</p><p>里面指向了key和value的指针，next 指向下一个 dictEntry。</p><p>key 是字符串，但是 Redis 没有直接使用 C 的字符数组，而是存储在redis自定义的 SDS中。</p><p><strong>value 既不是直接作为字符串存储，也不是直接存储在 SDS 中，而是存储在redisObject 中</strong>。</p><p>实际上五种常用的数据类型的任何一种，都是通过 redisObject 来存储的。</p><p><img src="'+w+'" alt="image-20230509220912499"></p><ul><li>看看类型：type 键</li><li>看看编码：object encoding hello</li></ul><h3 id="redisobjct结构的作用" tabindex="-1"><a class="header-anchor" href="#redisobjct结构的作用" aria-hidden="true">#</a> redisObjct结构的作用</h3><p>为了便于操作，Redis采用redisObjec结构来统一五种不同的数据类型，这样所有的数据类型就都可以以相同的形式在函数间传递而不用使用特定的类型结构。同时，为了识别不同的数据类型，redisObjec中定义了type和encoding字段对不同的数据类型加以区别。简单地说，redisObjec就是string、hash、list、set、zset的父类，可以在函数间传递时隐藏具体的类型信息，所以作者抽象了redisObjec结构来到达同样的目的。</p><p><img src="'+H+'" alt="image-20230509221011053"></p><p><img src="'+J+'" alt="image-20230509221022165"></p><ul><li>RedisObject个字段的含义</li></ul><p><img src="'+K+'" alt="image-20230509221052297"></p><p><img src="'+V+'" alt="image-20230509221103987"></p><p>1 4位的type表示具体的数据类型</p><p>2 4位的encoding表示该类型的物理编码方式见下表，同一种数据类型可能有不同的编码方式。</p><p>(比如String就提供了3种:int embstr raw)</p><p><img src="'+Z+`" alt="image-20230509221115597"></p><p>3 lru字段表示当内存超限时采用LRU算法清除内存中的对象。</p><p>4 refcount表示对象的引用计数。</p><p>5 ptr指针指向真正的底层数据结构的指针。</p><ul><li>案例：set age 17</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">set</span> age <span class="token number">17</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+n+'" alt="image-20230509221201060"></p><table><thead><tr><th>type</th><th>类型</th></tr></thead><tbody><tr><td>encoding</td><td>编码，此处是数字类型</td></tr><tr><td>lru</td><td>最近被访问的时间</td></tr><tr><td>refcount</td><td>等于1，表示当前对象被引用的次数</td></tr><tr><td>ptr</td><td>value值是多少，当前就是17</td></tr></tbody></table><h3 id="经典5大数据结构解析" tabindex="-1"><a class="header-anchor" href="#经典5大数据结构解析" aria-hidden="true">#</a> 经典5大数据结构解析</h3><h4 id="_1-各个类型的数据结构的编码映射和定义" tabindex="-1"><a class="header-anchor" href="#_1-各个类型的数据结构的编码映射和定义" aria-hidden="true">#</a> 1.各个类型的数据结构的编码映射和定义</h4><p><img src="'+M+`" alt="image-20230509222448430"></p><h4 id="_2-debug-object-key" tabindex="-1"><a class="header-anchor" href="#_2-debug-object-key" aria-hidden="true">#</a> 2.Debug Object key</h4><ul><li>在看一次set age 17</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">set</span> age <span class="token number">17</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+n+'" alt="image-20230509221201060"></p><table><thead><tr><th>type</th><th>类型</th></tr></thead><tbody><tr><td>encoding</td><td>编码，此处是数字类型</td></tr><tr><td>lru</td><td>最近被访问的时间</td></tr><tr><td>refcount</td><td>等于1，表示当前对象被引用的次数</td></tr><tr><td>ptr</td><td>value值是多少，当前就是17</td></tr></tbody></table><ul><li><p>上述解读</p><ul><li><p>命令</p><p><img src="'+P+'" alt="image-20230509222630569"></p></li><li><p>案例</p><p><code>开启前</code></p><p><img src="'+F+'" alt="image-20230509222702108"></p><p><code>开启后</code></p><p><img src="'+A+'" alt="image-20230509222726432"></p><p>Value at: 内存地址</p><p>refcount: 引用次数</p><p>encoding: 物理编码类型</p><p>serializedlength: 序列化后的长度（注意这里的长度是序列化后的长度，保存为rdb文件时使用了该算法，不是真正存贮在内存的大小),会对字串做一些可能的压缩以便底层优化</p><p>lru：记录最近使用时间戳</p><p>lru_seconds_idle：空闲时间</p><p><img src="'+W+'" alt="image-20230509222742723"></p></li></ul></li></ul><h4 id="_3-string数据结构介绍" tabindex="-1"><a class="header-anchor" href="#_3-string数据结构介绍" aria-hidden="true">#</a> 3.String数据结构介绍</h4><blockquote><p><strong>3大物理编码方式</strong></p></blockquote><ul><li>RedisObject内部对应的3大物理编码</li></ul><p><img src="'+Q+'" alt="image-20230509231959382"></p><p><img src="'+U+'" alt="image-20230509232009883"></p><ul><li><p>int</p><ul><li><p>保存long型（长整型）的64位（8个字节）有符号整数</p></li><li><p>9223372036854775807</p><p><img src="'+X+'" alt="image-20230509232132907"></p></li><li><p>上面数字最多19位</p></li><li><p>补充：只有证书才会使用int，如果是浮点数，Redis内部其实是先将浮点数转化为字符串值，然后在保存。</p></li></ul></li><li><p>embster</p><ul><li>代表embstr格式的SDS（Simple Dynamic String 简单动态字符串），保存长度小于44字节的字符串</li><li>EMBSTER顾名思义即：embedded string，表示嵌入式的String</li></ul></li><li><p>raw：保存长度大于44字节的字符串</p></li></ul><hr><blockquote><p><strong>3大物理编码案例</strong></p></blockquote><p>1.案例测试</p><p><img src="'+Y+'" alt="image-20230509232702175"></p><p><img src="'+$+'" alt="image-20230509232710398"></p><p>2.C语言中字符串的展现</p><p>假如现在展现一个字符串:Redis</p><p><img src="'+ss+'" alt="image-20230509232737725"></p><p><img src="'+is+'" alt="image-20230509232750268"></p><p><strong>Redis没有直接复用C语言的字符串，而是****新建了属于自己的结构-----SDS</strong></p><p><strong>在Redis数据库里，包含字符串值的键值对都是由SDS实现的(Redis中所有的键都是由字符串对象实现的即底层是由SDS实现，Redis中所有的值对象中包含的字符串对象底层也是由SDS实现)。</strong></p><p><img src="'+es+'" alt="image-20230509232808397"></p><p>3.SDS简单动态字符串</p><ul><li>sds.h源码分析</li></ul><p><img src="'+ts+'" alt="image-20230509232910495"></p><ul><li>说明</li></ul><p><img src="'+ps+'" alt="image-20230509232941611"></p><p><img src="'+as+`" alt="image-20230509232951505"></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Redis中字符串的实现,SDS有多种结构（sds.h）：
sdshdr5、<span class="token punctuation">(</span><span class="token number">2</span>^5<span class="token operator">=</span>32byte<span class="token punctuation">)</span>
sdshdr8、<span class="token punctuation">(</span><span class="token number">2</span> ^ <span class="token assign-left variable">8</span><span class="token operator">=</span>256byte<span class="token punctuation">)</span>
sdshdr16、<span class="token punctuation">(</span><span class="token number">2</span> ^ <span class="token assign-left variable">16</span><span class="token operator">=</span>65536byte<span class="token operator">=</span>64KB<span class="token punctuation">)</span>
sdshdr32、 <span class="token punctuation">(</span><span class="token number">2</span> ^ <span class="token assign-left variable">32byte</span><span class="token operator">=</span>4GB<span class="token punctuation">)</span>
sdshdr64，2的64次方byte＝17179869184G用于存储不同的长度的字符串。
 
len 表示 SDS 的长度，使我们在获取字符串长度的时候可以在 O<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>情况下拿到，而不是像 C 那样需要遍历一遍字符串。
 
alloc 可以用来计算 <span class="token function">free</span> 就是字符串已经分配的未使用的空间，有了这个值就可以引入预分配空间的算法了，而不用去考虑内存分配的问题。
 
buf 表示字符串数组，真存数据的。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+ls+'" alt="image-20230509233024193"></p>',112),ce={href:"https://github.com/antirez/sds",target:"_blank",rel:"noopener noreferrer"},oe=i('<p>4.Redis为什么重新设计一个SDS数据结构？</p><p><img src="'+ns+'" alt="image-20230509233203927"></p><p>C语言没有Java里面的String类型，只能是靠自己的char[]来实现，字符串在 C 语言中的存储方式，想要获取 「Redis」的长度，需要从头开始遍历，直到遇到 &#39;\\0&#39; 为止。所以，Redis 没有直接使用 C 语言传统的字符串标识，而是自己构建了一种名为简单动态字符串 SDS（simple dynamic string）的抽象类型，并将 SDS 作为 Redis 的默认字符串。</p><p><img src="'+rs+'" alt="image-20230509233218545"></p><table><thead><tr><th></th><th>C语言</th><th>SDS</th></tr></thead><tbody><tr><td><strong>字符串长度处理</strong></td><td>需要从头开始遍历，直到遇到 &#39;\\0&#39; 为止，时间复杂度O(N)</td><td>记录当前字符串的长度，直接读取即可，时间复杂度 O(1)</td></tr><tr><td><strong>内存重新分配</strong></td><td>分配内存空间超过后，会导致数组下标越级或者内存分配溢出</td><td>空间预分配<br>SDS 修改后，len 长度小于 1M，那么将会额外分配与 len 相同长度的未使用空间。如果修改后长度大于 1M，那么将分配1M的使用空间。<br>惰性空间释放<br>有空间分配对应的就有空间释放。SDS 缩短时并不会回收多余的内存空间，而是使用 free 字段将多出来的空间记录下来。如果后续有变更操作，直接使用 free 中记录的空间，减少了内存的分配。</td></tr><tr><td><strong>二进制安全</strong></td><td>二进制数据并不是规则的字符串格式，可能会包含一些特殊的字符，比如 &#39;\\0&#39; 等。前面提到过，C中字符串遇到 &#39;\\0&#39; 会结束，那 &#39;\\0&#39; 之后的数据就读取不上了</td><td>根据 len 长度来判断字符串结束的，二进制安全的问题就解决了</td></tr></tbody></table><p>5.源码分析</p><p><strong>用户API</strong></p><p>set k1 v1底层发生了什么？调用关系？</p><p><img src="'+cs+'" alt="image-20230509233431532"></p><p><strong>3大物理编码方式</strong></p><p><img src="'+os+'" alt="image-20230509233459394"></p><ul><li><p>INT编码格式</p><p><img src="'+ds+`" alt="image-20230509233519053"></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">set</span> k1 <span class="token number">123</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令示例： set k1 123</p><p>当字符串键值的内容可以用一个64位有符号整形来表示时，Redis会将键值转化为long型来进行存储，此时即对应 OBJ_ENCODING_INT 编码类型。内部的内存结构表示如下:</p><img src="`+gs+`" alt="image-20230509233607825" style="zoom:50%;"><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Redis 启动时会预先建立 10000 个分别存储 0~9999 的 redisObject 变量作为共享对象，这就意味着如果 set字符串的键值在 0~10000 之间的话，则可以 **直接指向共享对象 而不需要再建立新对象，此时键值不占空间！**

set k1 123

set k2 123
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+ms+'" alt="image-20230509233719838"></p><p>redis源代码：server.h,笔记下面还有</p><p><img src="'+_s+'" alt="image-20230509233735350"></p><p>redis6源代码：object.c笔记下面还有</p><p><img src="'+hs+'" alt="image-20230509233750495"></p><p>redis7源代码：object.c笔记下面还有</p><p><img src="'+us+'" alt="image-20230509233804800"></p><p><img src="'+bs+'" alt="image-20230509233815202"></p></li><li><p>EMBSTR编码格式</p><p><img src="'+ks+`" alt="image-20230509233836570"></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">set</span> k1 abc 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>redis源代码：object.c</p><p><img src="`+fs+'" alt="image-20230509234008300"></p><p>对于长度小于 44的字符串，Redis 对键值采用OBJ_ENCODING_EMBSTR 方式，EMBSTR 顾名思义即：embedded string，表示嵌入式的String。从内存结构上来讲 即字符串 sds结构体与其对应的 redisObject 对象分配在同一块连续的内存空间，字符串sds嵌入在redisObject对象之中一样。</p><p><img src="'+zs+'" alt="image-20230509234024747"></p><p><img src="'+vs+'" alt="image-20230509234038201"></p><hr><p>进一步createEmbeddedStringObject方法</p><p>redis源代码：object.c</p><p><img src="'+ys+'" alt="image-20230509234107947"></p><p><img src="'+qs+'" alt="image-20230509234118943"></p></li><li><p>RAW编码格式</p><p><img src="'+Ss+'" alt="image-20230509234149323"></p><p>set k1 大于44长度的一个字符串，随便写</p><p><img src="'+Rs+'" alt="image-20230509234223463"></p><p>当字符串的键值为长度大于44的超长字符串时，Redis 则会将键值的内部编码方式改为OBJ_ENCODING_RAW格式，这与OBJ_ENCODING_EMBSTR编码方式的不同之处在于，此时动态字符串sds的内存与其依赖的redisObject的内存不再连续了</p><p><img src="'+xs+'" alt="image-20230509234235560"></p></li><li><p>明明没有超过阈值，为什么变成raw了</p><p><img src="'+Os+'" alt="image-20230509234320428"></p><p>判断不出来，就取最大Raw</p></li></ul><p>6.转变逻辑图</p><img src="'+Ds+'" alt="image-20230509234423682" style="zoom:50%;"><p>7.案例结论</p><p>只有整数才会使用 int，如果是浮点数， Redis 内部其实先将浮点数转化为字符串值，然后再保存。</p><p>embstr 与 raw 类型底层的数据结构其实都是 SDS (简单动态字符串，Redis 内部定义 sdshdr 一种结构)。</p><p>那这两者的区别见下图：</p><table><thead><tr><th>1 int</th><th>Long类型整数时，RedisObject中的ptr指针直接赋值为整数数据，不再额外的指针再指向整数了，节省了指针的空间开销。</th></tr></thead><tbody><tr><td>2 embstr</td><td>当保存的是字符串数据且字符串小于等于44字节时，embstr类型将会调用内存分配函数，只分配一块连续的内存空间，空间中依次包含 redisObject 与 sdshdr 两个数据结构，让元数据、指针和SDS是一块连续的内存区域，这样就可以避免内存碎片</td></tr><tr><td>3 raw</td><td>当字符串大于44字节时，SDS的数据量变多变大了，SDS和RedisObject布局分家各自过，会给SDS分配多的空间并用指针指向SDS结构，raw 类型将会调用两次内存分配函数，分配两块内存空间，一块用于包含 redisObject结构，而另一块用于包含 sdshdr 结构</td></tr></tbody></table><p><img src="'+js+'" alt="image-20230509234504165"></p><blockquote><p>总结</p></blockquote><p>Redis内部会根据用户给的不同键值而使用不同的编码方式，自适应地选择较优化的内部编码格式，而这一切对用户完全透明！</p><h4 id="_4-hash数据结构介绍" tabindex="-1"><a class="header-anchor" href="#_4-hash数据结构介绍" aria-hidden="true">#</a> 4.Hash数据结构介绍</h4><p><strong>案例</strong></p><blockquote><p>redis6</p></blockquote><p>1.案例</p><p><strong>hash-max-ziplist-entries：使用压缩列表保存时哈希集合中的最大元素个数。</strong></p><p><strong>hash-max-ziplist-value：使用压缩列表保存时哈希集合中单个元素的最大长度。</strong></p><p>Hash类型键的字段个数 小于 hash-max-ziplist-entries 并且每个字段名和字段值的长度 小于 hash-max-ziplist-value 时，</p><p>Redis才会使用 OBJ_ENCODING_ZIPLIST来存储该键，前述条件任意一个不满足则会转换为 OBJ_ENCODING_HT的编码方式</p><p><img src="'+Ns+'" alt="image-20230510002521113"></p><p><img src="'+Es+'" alt="image-20230510002530149"></p><hr><p>2.结构</p><ul><li>hash-max-ziplist-entries：使用压缩列表保存时哈希集合中的最大元素个数。</li><li>hash-max-ziplist-value：使用压缩列表保存时哈希集合中单个元素的最大长度。</li></ul><p>3.结论</p><blockquote><p>1.哈希对象保存的键值对数量小与512个；</p><p>2.所有的键值对的键和值的字符串长度都小于等于64byte（一个英文字母一个字节）时ziplist，反之用hashtable</p><p>ziplist升级到hashtable可以，反过来降级不可以</p></blockquote><p>一旦从压缩列表转为了哈希表，Hash类型就会一直用哈希表进行保存而不会再转回压缩列表了。</p><p>在节省内存空间方面哈希表就没有压缩列表高效了。</p><p>4.流程</p><p><img src="'+Cs+'" alt="image-20230510020446575"></p><p>5.源码分析</p><p><strong>t_hash.c</strong></p><ul><li>在redis中，hashtable被称为字典（direction），它是一个数组+链表的结构</li><li>OBJ_ENCODING_HT编码分析：<code>每个键值对都会有一个dictEntry</code></li></ul><p>OBJ_ENCODING_HT 这种编码方式内部才是真正的哈希表结构，或称为字典结构，其可以实现O(1)复杂度的读写操作，因此效率很高。</p><p>在 Redis内部，从 OBJ_ENCODING_HT类型到底层真正的散列表数据结构是一层层嵌套下去的，组织关系见面图：</p><p><img src="'+Bs+'" alt="image-20230510020622589"></p><p><img src="'+Ls+'" alt="image-20230510020631057"></p><p>源代码：dict.h</p><p><img src="'+Is+'" alt="image-20230510020645149"></p><p><img src="'+Gs+'" alt="image-20230510020655549"></p><p><img src="'+Ts+'" alt="image-20230510020703748"></p><ul><li>hset命令讲解</li></ul><p><img src="'+ws+'" alt="image-20230510020804510"></p><p>类型</p><p><img src="'+Hs+'" alt="image-20230510020821340"></p><hr><p><strong>ziplist.c</strong></p><p>Ziplist 压缩列表是一种紧凑编码格式，总体思想是多花<code>时间来换取节约空间</code>，即以部分读写性能为代价，来换取极高的内存空间利用率，</p><p>因此<code>·。压缩列表内存利用率极高的原因与其连续内存</code>的特性是分不开的。</p><p><img src="'+Js+'" alt="image-20230510204053783"></p><p>​ 想想我们的学过的一种GC垃圾回收机制：标记--压缩算法</p><p>当一个 hash对象 只包含少量键值对且每个键值对的键和值要么就是小整数要么就是长度比较短的字符串，那么它用 ziplist 作为底层实现</p><ul><li>ziplist，什么样</li></ul><p>源代码：ziplist.c</p><p>为了节约内存而开发的，它是由连续内存块组成的顺序型数据结构，有点类似于数组</p><p>ziplist是一个经过特殊编码的<code>双向链表，它不存储指向前一个链表节点prev和指向下一个链表节点的指针next而是存储上一个节点长度和当前节点长度</code>，通过牺牲部分读写性能，来换取高效的内存空间利用率，节约内存，是一种时间换空间的思想。只用在<code>字段个数少，字段值小的场景里面</code></p><p><img src="'+Ks+'" alt="image-20230510020958477"></p><p><img src="'+Vs+'" alt="image-20230510021011261"></p><p><img src="'+Zs+'" alt="image-20230510021021768"></p><p>ziplist各个单位组成单元什么意思</p><p><img src="'+Ms+'" alt="image-20230510021051534"></p><ul><li><p>zlentry，压缩列表节点的构成</p><ul><li><p>官网源码</p><p><img src="'+Ps+'" alt="image-20230510021137388"></p></li><li><p>zlentry实体结构解析</p><p>ziplist.c</p><p><img src="'+Fs+'" alt="image-20230510205135790"></p></li></ul></li><li><p>ziplist存取情况</p><p><img src="'+As+'" alt="image-20230510021237724"></p><p><img src="'+Ws+'" alt="image-20230510021247190"></p><table><thead><tr><th>prevlen</th><th>记录了前一个节点的长度；</th></tr></thead><tbody><tr><td>encoding</td><td>记录了当前节点实际数据的类型以及长度</td></tr><tr><td>data</td><td>记录了当前节点的实际数据</td></tr></tbody></table><ul><li><p>zlentry解析</p><p><strong>压缩列表zlentry节点结构：每个zlentry由<code>前一个节点</code>的长度、encoding和entry-data三部分组成</strong></p><p><img src="'+Qs+'" alt="image-20230510021328194"></p><p><code>前节点</code>：(前节点占用的内存字节数)表示前1个zlentry的长度，privious_entry_length有两种取值情况：<code>1字节或5字节</code>。取值1字节时，表示上一个entry的长度小于254字节。虽然1字节的值能表示的数值范围是0到255，但是压缩列表中zlend的取值默认是255，因此，就默认用255表示整个压缩列表的结束，其他表示长度的地方就不能再用255这个值了。所以，当上一个entry长度小于254字节时，prev_len取值为1字节，否则，就取值为5字节。记录长度的好处：占用内存小，1或者5个字节</p><p><code>enncoding</code>：记录节点的content保存数据的类型和长度。</p><p><code>content</code>：保存实际数据内容</p><p><img src="'+Us+'" alt="image-20230510021342117"></p></li><li><p>为什么zlentry这么设计？数组和链表数据结构对比</p><p>privious_entry_length，encoding长度都可以根据编码方式推算，真正变化的是content，而content长度记录在encoding里 ，因此entry的长度就知道了。entry总长度 = privious_entry_length字节数+encoding字节数+content字节数</p><p><img src="'+Xs+'" alt="image-20230510021457140"></p><p><strong>为什么entry这么设计？记录前一个节点的长度？</strong></p><p>链表在内存中，一般是不连续的，遍历相对比较慢，而ziplist可以很好的解决这个问题。如果知道了当前的起始地址，因为entry是连续的，entry后一定是另一个entry，想知道下一个entry的地址，只要将当前的起始地址加上当前entry总长度。如果还想遍历下一个entry，只要继续同样的操作。</p></li></ul></li><li><p>明明有链表了，为什么出来一个压缩链表</p><blockquote><p>1 普通的双向链表会有两个指针，在存储数据很小的情况下，<code>我们存储的实际数据的大小可能还没有指针占用的内存大，得不偿失</code>。ziplist 是一个特殊的双向链表没有<code>维护双向指针:previous next</code>；而是存储上一个 entry的长度和当前entry的长度，通过长度推算下一个元素在什么地方。牺牲读取的性能，获得高效的存储空间，因为(简短字符串的情况)存储指针比存储entry长度更费内存。这是典型的“时间换空间”。</p><p>2 链表在内存中一般是不连续的，遍历相对比较慢而ziplist可以很好的解决这个问题，普通数组的遍历是根据数组里存储的数据类型找到下一个元素的(例如int类型的数组访问下一个元素时每次只需要移动一个sizeof(int)就行)，但是ziplist的每个节点的长度是可以不一样的，而我们面对不同长度的节点又不可能直接sizeof(entry)，所以ziplist只好将一些必要的偏移量信息记录在了每一个节点里，使之能跳到上一个节点或下一个节点。</p><p>备注:sizeof实际上是获取了数据在内存中所占用的存储空间，以字节为单位来计数。</p><p>3 头节点里有头节点里同时还有一个参数 len，和string类型提到的 SDS 类似，这里是用来记录链表长度的。因此<code>获取链表长度时不用再遍历整个链表</code>，直接拿到len值就可以了，这个时间复杂度是 O(1)</p></blockquote></li><li><p>ziplist总结</p><ul><li><p>ziplist为了节省内存，采用了紧凑的连续存储。</p></li><li><p>ziplist是一个双向链表，可以在时间复杂度为 O(1) 下从头部、尾部进行 pop 或 push。</p></li><li><p><code>新增或更新元素可能会出现连锁更新现象(致命缺点导致被listpack替换)。</code></p></li><li><p>不能保存过多的元素，否则查询效率就会降低，数量小和内容小的情况下可以使用。</p></li></ul></li></ul><hr><blockquote><p>redis7</p></blockquote><p>1.案例</p><p><strong>hash-max-listpack-entries：使用压缩列表保存时哈希集合中的最大元素个数。</strong></p><p><strong>hash-max-listpack-value：使用压缩列表保存时哈希集合中单个元素的最大长度。</strong></p><p>Hash类型键的字段个数 小于 hash-max-listpack-entries且每个字段名和字段值的长度 小于 hash-max-listpack-value 时，</p><p>Redis才会使用OBJ_ENCODING_LISTPACK来存储该键，前述条件任意一个不满足则会转换为 OBJ_ENCODING_HT的编码方式</p><img src="'+Ys+'" alt="image-20230510021749690" style="zoom:50%;"><img src="'+$s+'" alt="image-20230510021802131" style="zoom:50%;"><img src="'+si+'" alt="image-20230510021811134" style="zoom:50%;"><p>2.结构</p><ul><li>hash-max-listpack-entries：使用紧凑列表保存时哈希集合中的最大元素个数。</li><li>hash-max-listpack-value：使用紧凑列表保存时哈希集合中单个元素的最大值。</li></ul><p>3.结论</p><blockquote><p>1.哈希对象保存的键值对数量小于512个；</p><p>2.所有的键值对的键和值的字符串长度都小于等于64byte（一个英文字母一个字节）时用listpack，反之用hashtable</p><p>listpack升级到hashtable可以，反过来降级不可以</p></blockquote><p>4.流程（同前，只不过ziplist修改为listpack）</p><p><img src="'+ii+'" alt="image-20230510022158173"></p><p>5.源码分析</p><ul><li><p>源码说明</p><ul><li><p>实现：object.c</p><p><img src="'+ei+'" alt="image-20230510022242416"></p></li><li><p>实现：listpack.c</p><p><img src="'+ti+'" alt="image-20230510022311272"></p><p><img src="'+pi+'" alt="image-20230510022325574"></p><blockquote><p>lpNew 函数创建了一个空的 listpack，一开始分配的大小是 LP_HDR_SIZE 再加 1 个字节。LP_HDR_SIZE 宏定义是在 listpack.c 中，它默认是 6 个字节，其中 4 个字节是记录 listpack 的总字节数，2 个字节是记录 listpack 的元素数量。</p><p>此外，listpack 的最后一个字节是用来标识 listpack 的结束，其默认值是宏定义 LP_EOF。</p><p>和 ziplist 列表项的结束标记一样，LP_EOF 的值也是 255</p></blockquote></li><li><p>实现2：object.c</p><p><img src="'+ai+'" alt="image-20230510022359332"></p></li></ul></li><li><p>明明有ziplist了，为什么出来一个listpack紧凑列表？</p><ul><li><p>复习</p><p><img src="'+li+'" alt="image-20230510022450002"></p><p><img src="'+ni+'" alt="image-20230510022457949"></p></li><li><p>ziplist的连锁更新问题</p><p>压缩列表新增某个元素或修改某个元素时，如果空间不不够，压缩列表占用的内存空间就需要重新分配。而当新插入的元素较大时，可能会导致后续元素的 prevlen 占用空间都发生变化，从而引起「连锁更新」问题，导致每个元素的空间都要重新分配，造成访问压缩列表性能的下降。</p><p>案例说明：<strong>压缩列表每个节点正因为需要保存前一个节点的长度字段，就会有连锁更新的隐患</strong></p><p><code>第一步</code>：现在假设一个压缩列表中有多个连续的、长度在 250～253 之间的节点，如下图：</p><p><img src="'+ri+'" alt="image-20230510022546847"></p><p>因为这些节点长度值小于 254 字节，所以 prevlen 属性需要用 1 字节的空间来保存这个长度值，一切OK，O(∩_∩)O哈哈~</p><p><code>第二步</code>：这时，如果将一个长度大于等于 254 字节的新节点加入到压缩列表的表头节点，即新节点将成为entry1的前置节点，如下图：</p><p><img src="'+ci+'" alt="image-20230510022609876"></p><p>因为entry1节点的prevlen属性只有1个字节大小，无法保存新节点的长度，此时就需要对压缩列表的空间重分配操作并将entry1节点的prevlen 属性从原来的 1 字节大小扩展为 5 字节大小。</p><p><code>第三步</code>：连续更新问题出现</p><p><img src="'+oi+'" alt="image-20230510022632957"></p><p>entry1节点原本的长度在250～253之间，因为刚才的扩展空间，此时entry1节点的长度就大于等于254，因此原本entry2节点保存entry1节点的 prevlen属性也必须从1字节扩展至5字节大小。entry1节点影响entry2节点，entry2节点影响entry3节点......一直持续到结尾。这<code>种在特殊情况下产生的连续多次空间扩展操作就叫做「连锁更新」</code></p></li><li><p>结论</p><p>listpack 是 Redis 设计用来取代掉 ziplist 的数据结构，它通过每个节点记录自己的长度且放在节点的尾部，来彻底解决掉了 ziplist 存在的连锁更新的问题</p></li></ul></li><li><p>listpack结构</p><p><img src="'+di+'" alt="image-20230510022731659"></p></li></ul>',91),de={href:"https://github.com/antirez/listpack/blob/master/listpack.md",target:"_blank",rel:"noopener noreferrer"},ge=i('<p>listpack由四部分组成：total Bytes、Num Elem、Entry以及End</p><p><img src="'+gi+'" alt="image-20230510022856370"></p><table><thead><tr><th>Total Bytes</th><th>为整个listpack的空间大小，占用4个字节，每个listpack最多占用4294967295Bytes。</th></tr></thead><tbody><tr><td>num-elements</td><td>为listpack中的元素个数，即Entry的个数占用2个字节</td></tr><tr><td>element-1~element-N</td><td>为每个具体的元素</td></tr><tr><td>listpack-end-byte</td><td>为listpack结束标志，占用1个字节，内容为0xFF。</td></tr></tbody></table><p><img src="'+mi+'" alt="image-20230510022910024"></p><p>entry结构</p><p><img src="'+_i+'" alt="image-20230510022930547"></p><ul><li>当前元素的编码类型（entry-encoding）</li><li>元素结构（entry-data）</li><li>以及编码类型和元素数据这两部分的长度（entry-len）</li><li>listpackEntry结构定义：listpack.c</li></ul><p><img src="'+hi+'" alt="image-20230510023048967"></p><hr><ul><li><code>ziplist内存布局 VS listpack内存布局</code></li></ul><p><img src="'+ui+'" alt="image-20230510023222013"></p><p><strong>和ziplist 列表项类似，listpack 列表项也包含了元数据信息和数据本身。不过，为了避免ziplist引起的连锁更新问题，listpack 中的每个列表项</strong></p><p><strong>不再像ziplist列表项那样保存其前一个列表项的长度。</strong></p><p><img src="'+bi+'" alt="image-20230510023236943"></p><hr><blockquote><p>hash的两种编码方式</p></blockquote><ul><li>redis6 <ul><li>ziplist</li><li>hashtable</li></ul></li><li>redis7 <ul><li>listpack</li><li>hashtable</li></ul></li></ul><h4 id="_5-list数据结构介绍" tabindex="-1"><a class="header-anchor" href="#_5-list数据结构介绍" aria-hidden="true">#</a> 5.List数据结构介绍</h4><p><strong>案例</strong></p><blockquote><p>redis6</p></blockquote><p><strong>案例</strong></p><p><img src="'+ki+'" alt="image-20230510023426158"></p><p>这是Redis6的案例说明</p><p><code>(1) ziplist压缩配置：list-compress-depth 0</code></p><p>表示一个quicklist两端不被压缩的节点个数。这里的节点是指quicklist双向链表的节点，而不是指ziplist里面的数据项个数</p><p>参数list-compress-depth的取值含义如下：</p><p><code>0: 是个特殊值，表示都不压缩。这是Redis的默认值。</code></p><p>1: 表示quicklist两端各有1个节点不压缩，中间的节点压缩。</p><p>2: 表示quicklist两端各有2个节点不压缩，中间的节点压缩。</p><p>3: 表示quicklist两端各有3个节点不压缩，中间的节点压缩。</p><p>依此类推…</p><p><code>(2) ziplist中entry配置：list-max-ziplist-size -2</code></p><p>当取正值的时候，表示按照数据项个数来限定每个quicklist节点上的ziplist长度。比如，当这个参数配置成5的时候，表示每个quicklist节点的ziplist最多包含5个数据项。<code>当取负值的时候，表示按照占用字节数来限定每个quicklist节点上的ziplist长度</code>。这时，它只能取-1到-5这五个值，</p><p>每个值含义如下：</p><p>-5: 每个quicklist节点上的ziplist大小不能超过64 Kb。（注：1kb =&gt; 1024 bytes）</p><p>-4: 每个quicklist节点上的ziplist大小不能超过32 Kb。</p><p>-3: 每个quicklist节点上的ziplist大小不能超过16 Kb。</p><p><code>-2: 每个quicklist节点上的ziplist大小不能超过8 Kb。（-2是Redis给出的默认值）</code></p><p>-1: 每个quicklist节点上的ziplist大小不能超过4 Kb。</p><hr><p><strong>Redis6版本前的List的一种编码格式</strong></p><p>list用quicklist来存储，quicklist存储了一个双向链表，每一个节点都是一个ziplist</p><p><img src="'+fi+'" alt="image-20230510023627766"></p><p>在Redis3.0之前，list采用的底层数据结构是ziplist压缩列表+linkedList双向链表</p><p>然后在高版本的Redis中底层数据结构是quicklist(替换了ziplist+linkedList)，而quicklist也用到了ziplist</p><p><code>结论：quicklist就是「双向链表 + 压缩列表」组合，因为一个 quicklist 就是一个链表，而链表中的每个元素又是一个压缩列表</code></p><p><img src="'+zi+'" alt="image-20230510023642694"></p><hr><p><strong>quicklist总纲</strong></p><p>quicklist 实际上是 zipList 和 linkedList 的混合体，它将 linkedList按段切分，每一段使用 zipList 来紧凑存储，多个 zipList 之间使用双向指针串接起来。</p><p><img src="'+vi+'" alt="image-20230510023718974"></p><p><code>是ziplist和linkedlist的结合体</code></p><hr><p><strong>源码分析</strong></p><p>quicklist.h，head和tail执行双向列表的表头和表尾</p><ul><li><p>quicklist结构</p><p><img src="'+yi+'" alt="image-20230510023854558"></p><p><img src="'+qi+'" alt="image-20230510023902572"></p></li><li><p>quicklistNode结构</p><p><img src="'+Si+'" alt="image-20230510023938967"></p><p><img src="'+Ri+'" alt="image-20230510023951897"></p></li></ul><p><code>quicklistNode中的*zl指向一个ziplist，一个ziplist可以存放多个元素</code></p><p><img src="'+xi+'" alt="image-20230510024057988"></p><blockquote><p>redis7</p></blockquote><p><strong>案例</strong></p><img src="'+Oi+'" alt="image-20230510024124732" style="zoom:50%;"><p>listpack紧凑列表</p><p>是用来替代 ziplist 的新数据结构，<code>在 7.0 版本已经没有 ziplist 的配置了</code>（6.0版本仅部分数据类型作为过渡阶段在使用）</p><hr><p><strong>源码分析</strong></p><ul><li><p>实现：t_list.c</p><p>本图最下方有lpush命令执行后直接调用pushGenericCommand命令</p><p><img src="'+Di+'" alt="image-20230510024218451"></p><p>看看redis6相同t_list.c</p><p><img src="'+ji+'" alt="image-20230510024253046"></p></li><li><p>实现：object.c</p><p><img src="'+Ni+'" alt="image-20230510024323149"></p></li></ul><hr><p><strong>Redis7的List的一种编码方式</strong></p><ul><li>list用quicklist来存储，quicklist存储了一个双向链表，单个节点都是一个listpack</li><li>quicklist：<code>是listpack和linkedlist的结合体</code></li></ul><h4 id="_6-set数据结构介绍" tabindex="-1"><a class="header-anchor" href="#_6-set数据结构介绍" aria-hidden="true">#</a> 6.Set数据结构介绍</h4><p><strong>案例</strong></p><p>Redis用intset或hashtable存储set。如果元素都是整数类型，就用intset存储。</p><p>如果不是整数类型，就用hashtable（数组+链表的存来储结构）。key就是元素的值，value为null。</p><p><img src="'+Ei+'" alt="image-20230510024536116"></p><p>set-proc-title 修改进程标题以显示一些运行时信息</p><hr><p>Set的两种编码方式</p><ul><li>intset</li><li>hashtable</li></ul><hr><p><strong>源码分析</strong></p><p>t_set.c</p><p><img src="'+Ci+'" alt="image-20230510024654625"></p><p><img src="'+Bi+'" alt="image-20230510024703708"></p><h4 id="_7-zset数据结构介绍" tabindex="-1"><a class="header-anchor" href="#_7-zset数据结构介绍" aria-hidden="true">#</a> 7.ZSet数据结构介绍</h4><p><strong>案例</strong></p><blockquote><p>redis6</p></blockquote><p>当有序集合中包含的元素数量超过服务器属性 server.zset_max_ziplist_entries 的值（默认值为 128 ），</p><p><code>或者</code>有序集合中新添加元素的 member 的长度大于服务器属性 server.zset_max_ziplist_value 的值（默认值为 64 ）时，</p><p>redis会使用<code>跳跃表</code>作为有序集合的底层实现。</p><p>否则会使用ziplist作为有序集合的底层实现</p><p><img src="'+Li+'" alt="image-20230510024813309"></p><p><img src="'+Ii+'" alt="image-20230510024821872"></p><blockquote><p>redis7</p></blockquote><img src="'+Gi+'" alt="image-20230510024845575" style="zoom:50%;"><p>下面还有步骤</p><p><img src="'+Ti+'" alt="image-20230510024904385"></p><hr><p><strong>ZSet的两种编码格式</strong></p><ul><li>redis6 <ul><li>ziplist</li><li>skiplist</li></ul></li><li>redis7 <ul><li>listpack</li><li>skiplist</li></ul></li></ul><hr><p><strong>redis6源码分析</strong></p><p>t_zset.c</p><p><img src="'+wi+'" alt="image-20230510025039687"></p><p><img src="'+Hi+'" alt="image-20230510025051355"></p><hr><p><strong>redis7源码分析</strong></p><p>t_zset.c</p><p><img src="'+Ji+'" alt="image-20230510025133514"></p><hr><h3 id="小总结" tabindex="-1"><a class="header-anchor" href="#小总结" aria-hidden="true">#</a> 小总结</h3><ul><li>redis6类型-物理编码-对应表</li></ul><p><img src="'+Ki+'" alt="image-20230509221256528"></p><ul><li>redis6数据类型对应的底层数据结构</li></ul><ol><li>字符串</li></ol><p>int:8个字节的长整型。</p><p>embstr:小于等于44个字节的字符串。</p><p>raw:大于44个字节的字符串。</p><p>Redis会根据当前值的类型和长度决定使用哪种内部编码实现。</p><ol start="2"><li>哈希</li></ol><p>ziplist(压缩列表):当哈希类型元素个数小于hash-max-ziplist-entries 配置(默认512个)、同时所有值都小于hash-max-ziplist-value配置(默认64 字节)时，</p><p>Redis会使用ziplist作为哈希的内部实现，ziplist使用更加紧凑的 结构实现多个元素的连续存储，所以在节省内存方面比hashtable更加优秀。</p><p>hashtable(哈希表):当哈希类型无法满足ziplist的条件时，Redis会使 用hashtable作为哈希的内部实现，因为此时ziplist的读写效率会下降，而hashtable的读写时间复杂度为O(1)。</p><ol start="3"><li>列表</li></ol><p>ziplist(压缩列表):当列表的元素个数小于list-max-ziplist-entries配置 (默认512个)，同时列表中每个元素的值都小于list-max-ziplist-value配置时 (默认64字节)，</p><p>Redis会选用ziplist来作为列表的内部实现来减少内存的使 用。</p><p>linkedlist(链表):当列表类型无法满足ziplist的条件时，Redis会使用 linkedlist作为列表的内部实现。quicklist ziplist和linkedlist的结合以ziplist为节点的链表(linkedlist)</p><ol start="4"><li>集合</li></ol><p>intset(整数集合):当集合中的元素都是整数且元素个数小于set-max-intset-entries配置(默认512个)时，Redis会用intset来作为集合的内部实现，从而减少内存的使用。</p><p>hashtable(哈希表):当集合类型无法满足intset的条件时，Redis会使用hashtable作为集合的内部实现。</p><ol start="5"><li>有序集合</li></ol><p>ziplist(压缩列表):当有序集合的元素个数小于zset-max-ziplist- entries配置(默认128个)，同时每个元素的值都小于zset-max-ziplist-value配 置(默认64字节)时，</p><p>Redis会用ziplist来作为有序集合的内部实现，ziplist 可以有效减少内存的使用。</p><p>skiplist(跳跃表):当ziplist条件不满足时，有序集合会使用skiplist作 为内部实现，因为此时ziplist的读写效率会下降。</p><hr><ul><li>redis6数据类型以及数据结构的关系</li></ul><p><img src="'+Vi+'" alt="image-20230509221424702"></p><ul><li>redis7数据类型以及数据结构的关系</li></ul><p><img src="'+Zi+'" alt="image-20230509221450451"></p><ul><li>redis数据类型以及数据结构的时间复杂度</li></ul><p><img src="'+Mi+'" alt="image-20230509221516212"></p><h2 id="_07、skiplist跳表面试题" tabindex="-1"><a class="header-anchor" href="#_07、skiplist跳表面试题" aria-hidden="true">#</a> 07、skiplist跳表面试题</h2><blockquote><p>为什么引出跳表？</p></blockquote><p><strong>先从一个单链表来讲</strong></p><p>对于一个单链表来讲，即便链表中存储的数据是有序的，如果我们要想在其中查找某个数据，也只能从头到尾遍历链表。</p><p>这样查找效率就会很低，时间复杂度会很高O(N)</p><p><img src="'+Pi+'" alt="image-20230509221636753"></p><p><strong>痛点</strong></p><ul><li>优化1</li></ul><p><img src="'+Fi+'" alt="image-20230509221703826"></p><p>从这个例子里，我们看出，加来一层索引之后，查找一个结点需要遍历的结点个数减少了，也就是说查找效率提高了。</p><ul><li>优化2</li></ul><p>画了一个包含64个结点的链表，按照前面讲的这种思路，建立了五级索引</p><p><img src="'+Ai+'" alt="image-20230509221813873"></p><blockquote><p>是什么？</p></blockquote><ul><li>跳表是可以实现二分查找的有序列表</li></ul><p>skiplist是一种<code>以空间换取时间的结构。</code></p><p>由于链表，无法进行二分查找，因此借鉴数据库索引的思想，提取出链表中关键节点（索引），先在关键节点上查找，再进入下层链表查找，提取多层关键节点，就形成了跳跃表</p><p>but</p><p><strong>由于索引也要占据一定空间的，所以，索引添加的越多，空间占用的越多</strong></p><ul><li>总结来讲 跳表 = 链表 + 多级索引</li></ul><blockquote><p>跳表空间+ 空间复杂度介绍</p></blockquote><ul><li>跳表的时间复杂度【时间复杂度是O(logN)】</li></ul><p><code>跳表查询的时间复杂度分析，如果链表里有N个结点，会有多少级索引呢？</code></p><p>按照我们前面讲的，两两取首。每两个结点会抽出一个结点作为上一级索引的结点，以此估算：</p><p>第一级索引的结点个数大约就是n/2，</p><p>第二级索引的结点个数大约就是n/4，</p><p>第三级索引的结点个数大约就是n/8，依次类推......</p><p>也就是说，第k级索引的结点个数是第k-1级索引的结点个数的1/2，那第k级索引结点的个数就是n/(2^k)</p><p><img src="'+Wi+'" alt="image-20230509222120822"></p><p><img src="'+Qi+'" alt="image-20230509222128709"></p><p><img src="'+Ui+'" alt="image-20230509222139291"></p><p><img src="'+Xi+'" alt="image-20230509222147054"></p><ul><li>跳表的空间复杂度【所以空间复杂度是O(N)】</li></ul><p><strong>跳表查询的空间复杂度分析</strong></p><p>比起单纯的单链表，跳表需要存储多级索引，肯定要消耗更多的存储空间。那到底需要消耗多少额外的存储空间呢？</p><p>我们来分析一下跳表的空间复杂度。</p><p><code>第一步</code>：首先原始链表长度为n，</p><p><code> 第二步</code>：两两取首，每层索引的结点数：n/2, n/4, n/8 ... , 8, 4, 2 每上升一级就减少一半，直到剩下2个结点,以此类推；如果我们把每层索引的结点数写出来，就是一个等比数列。</p><p><img src="'+Yi+'" alt="image-20230509222213962"></p><p>这几级索引的结点总和就是n/2+n/4+n/8…+8+4+2=n-2。所以，跳表的空间复杂度是O(n) 。也就是说，如果将包含n个结点的单链表构造成跳表，我们需要额外再用接近n个结点的存储空间。</p><p><code>第三步</code>：思考三三取首，每层索引的结点数：n/3, n/9, n/27 ... , 9, 3, 1 以此类推；</p><p>第一级索引需要大约n/3个结点，第二级索引需要大约n/9个结点。每往上一级，索引结点个数都除以3。为了方便计算，我们假设最高一级的索</p><p>引结点个数是1。我们把每级索引的结点个数都写下来，也是一个等比数列</p><p><img src="'+$i+'" alt="image-20230509222233180"></p><p>通过等比数列求和公式，总的索引结点大约就是n/3+n/9+n/27+…+9+3+1=n/2。尽管空间复杂度还是O(n) ，但比上面的每两个结点抽一个结点的索引构建方法，要减少了一半的索引结点存储空间。</p><p><strong>所以空间复杂度是O(n)；</strong></p><blockquote><p>优缺点</p></blockquote><p><strong>优点：</strong></p><p>跳表是一个最典型的<code>空间换时间解决方案</code>，而且只有在数据量较大的情况下才能体现出来优势。而且应该是<code>读多写少的情况下</code>才能使用，所以它的适用范围应该还是比较有限的</p><p><strong>缺点：</strong></p><p>维护成本相对要高，</p><p>在单链表中，一旦定位好要插入的位置，插入结点的时间复杂度是很低的，就是O(1)</p><p>but</p><p>新增或者删除时需要把所有索引都更新一遍，为了保证原始链表中数据的有序性，我们需要先找</p><p>到要动作的位置，这个查找操作就会比较耗时最后在新增和删除的过程中的更新，时间复杂度也是O(log n)</p><hr>',196),me=s("p",null,"可以参考学习文章：",-1),_e={href:"https://blog.csdn.net/weixin_46925850/article/details/129306546",target:"_blank",rel:"noopener noreferrer"};function he(ue,be){const e=d("ExternalLinkIcon");return c(),o("div",null,[ie,s("ul",null,[ee,s("li",null,[s("p",null,[s("a",te,[t("https://github.com/redis/redis"),p(e)])])])]),pe,s("ul",null,[s("li",null,[s("p",null,[s("a",ae,[t("Github官网说明"),p(e)])]),le]),ne]),re,s("ul",null,[s("li",null,[s("a",ce,[t("官网"),p(e)])])]),oe,s("p",null,[s("a",de,[t("官网"),p(e)])]),ge,s("blockquote",null,[me,s("p",null,[s("a",_e,[t("(65条消息) Redis原理篇_JuneQS的博客-CSDN博客"),p(e)])])])])}const ze=r(se,[["render",he],["__file","10.Redis经典五大数据类型源码及底层实现.html.vue"]]);export{ze as default};
