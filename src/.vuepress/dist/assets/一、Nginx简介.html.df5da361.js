import{_ as r}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as t,c as d,d as i,e,b as s,a,r as l}from"./app.9b10ba0a.js";const h="/assets/1573470187616.24071c07.png",c="/assets/1573489359728.eb92888c.png",o="/assets/1573489653799.c2fc8713.png",p="/assets/1581394945120.a96140af.png",x="/assets/1585139995444.478d85e9.png",g={},u=a('<h3 id="背景介绍" tabindex="-1"><a class="header-anchor" href="#背景介绍" aria-hidden="true">#</a> 背景介绍</h3><p>Nginx（“engine x”）一个具有高性能的【HTTP】和【反向代理】的【WEB服务器】，同时也是一个【POP3/SMTP/IMAP代理服务器】，是由伊戈尔·赛索耶夫(俄罗斯人)使用C语言编写的，Nginx的第一个版本是2004年10月4号发布的0.1.0版本。另外值得一提的是伊戈尔·赛索耶夫将Nginx的源码进行了开源，这也为Nginx的发展提供了良好的保障。</p><p><img src="'+h+'" alt="1573470187616"></p><h4 id="名词解释" tabindex="-1"><a class="header-anchor" href="#名词解释" aria-hidden="true">#</a> 名词解释</h4><ol><li>WEB服务器：</li></ol><p>WEB服务器也叫网页服务器，英文名叫Web Server，主要功能是为用户提供网上信息浏览服务。</p><ol start="2"><li>HTTP:</li></ol><p>HTTP是超文本传输协议的缩写，是用于从WEB服务器传输超文本到本地浏览器的传输协议，也是互联网上应用最为广泛的一种网络协议。HTTP是一个客户端和服务器端请求和应答的标准，客户端是终端用户，服务端是网站，通过使用Web浏览器、网络爬虫或者其他工具，客户端发起一个到服务器上指定端口的HTTP请求。</p><ol start="3"><li>POP3/SMTP/IMAP：</li></ol><p>POP3(Post Offic Protocol 3)邮局协议的第三个版本，</p><p>SMTP(Simple Mail Transfer Protocol)简单邮件传输协议，</p><p>IMAP(Internet Mail Access Protocol)交互式邮件存取协议，</p><p>通过上述名词的解释，我们可以了解到Nginx也可以作为电子邮件代理服务器。</p><ol start="4"><li>反向代理</li></ol><p>正向代理</p><p><img src="'+c+'" alt="1573489359728"></p><p>反向代理</p><p><img src="'+o+`" alt="1573489653799"></p><h3 id="常见服务器对比" tabindex="-1"><a class="header-anchor" href="#常见服务器对比" aria-hidden="true">#</a> 常见服务器对比</h3><p>在介绍这一节内容之前，我们先来认识一家公司叫Netcraft。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Netcraft公司于1994年底在英国成立，多年来一直致力于互联网市场以及在线安全方面的咨询服务，其中在国际上最具影响力的当属其针对网站服务器、SSL市场所做的客观严谨的分析研究，公司官网每月公布的调研数据（Web Server Survey）已成为当今人们了解全球网站数量以及服务器市场分额情况的主要参考依据，时常被诸如华尔街杂志，英国BBC，Slashdot等媒体报道或引用。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,21),b={href:"http://nginx.org/",target:"_blank",rel:"noopener noreferrer"},m=a('<p><img src="'+p+'" alt="1581394945120"></p><p>上面这张图展示了2019年全球主流Web服务器的市场情况，其中有Apache、Microsoft-IIS、google Servers、Nginx、Tomcat等，而我们在了解新事物的时候，往往习惯通过类比来帮助自己理解事物的概貌。所以下面我们把几种常见的服务器来给大家简单介绍下：</p><h4 id="iis" tabindex="-1"><a class="header-anchor" href="#iis" aria-hidden="true">#</a> IIS</h4><p>​ 全称(Internet Information Services)即互联网信息服务，是由微软公司提供的基于windows系统的互联网基本服务。windows作为服务器在稳定性与其他一些性能上都不如类UNIX操作系统，因此在需要高性能Web服务器的场合下，IIS可能就会被&quot;冷落&quot;.</p><h4 id="tomcat" tabindex="-1"><a class="header-anchor" href="#tomcat" aria-hidden="true">#</a> Tomcat</h4><p>​ Tomcat是一个运行Servlet和JSP的Web应用软件，Tomcat技术先进、性能稳定而且开放源代码，因此深受Java爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web应用服务器。但是Tomcat天生是一个重量级的Web服务器，对静态文件和高并发的处理比较弱。</p><h4 id="apache" tabindex="-1"><a class="header-anchor" href="#apache" aria-hidden="true">#</a> Apache</h4><p>​ Apache的发展时期很长，同时也有过一段辉煌的业绩。从上图可以看出大概在2014年以前都是市场份额第一的服务器。Apache有很多优点，如稳定、开源、跨平台等。但是它出现的时间太久了，在它兴起的年代，互联网的产业规模远远不如今天，所以它被设计成一个重量级的、不支持高并发的Web服务器。在Apache服务器上，如果有数以万计的并发HTTP请求同时访问，就会导致服务器上消耗大量能存，操作系统内核对成百上千的Apache进程做进程间切换也会消耗大量的CUP资源，并导致HTTP请求的平均响应速度降低，这些都决定了Apache不可能成为高性能的Web服务器。这也促使了Lighttpd和Nginx的出现。</p><h4 id="lighttpd" tabindex="-1"><a class="header-anchor" href="#lighttpd" aria-hidden="true">#</a> Lighttpd</h4><p>​ Lighttpd是德国的一个开源的Web服务器软件，它和Nginx一样，都是轻量级、高性能的Web服务器，欧美的业界开发者比较钟爱Lighttpd,而国内的公司更多的青睐Nginx，同时网上Nginx的资源要更丰富些。</p><h4 id="其他的服务器" tabindex="-1"><a class="header-anchor" href="#其他的服务器" aria-hidden="true">#</a> 其他的服务器</h4><p>Google Servers，Weblogic, Webshpere(IBM)...</p><p>经过各个服务器的对比，种种迹象都表明，Nginx将以性能为王。这也是我们为什么选择Nginx的理由。</p><h4 id="nginx的优点" tabindex="-1"><a class="header-anchor" href="#nginx的优点" aria-hidden="true">#</a> Nginx的优点</h4><h5 id="_1-速度更快、并发更高" tabindex="-1"><a class="header-anchor" href="#_1-速度更快、并发更高" aria-hidden="true">#</a> (1)速度更快、并发更高</h5><p>单次请求或者高并发请求的环境下，Nginx都会比其他Web服务器响应的速度更快。一方面在正常情况下，单次请求会得到更快的响应，另一方面，在高峰期(如有数以万计的并发请求)，Nginx比其他Web服务器更快的响应请求。Nginx之所以有这么高的并发处理能力和这么好的性能原因在于Nginx采用了多进程和I/O多路复用(epoll)的底层实现。</p><h5 id="_2-配置简单-扩展性强" tabindex="-1"><a class="header-anchor" href="#_2-配置简单-扩展性强" aria-hidden="true">#</a> (2)配置简单，扩展性强</h5><p>Nginx的设计极具扩展性，它本身就是由很多模块组成，这些模块的使用可以通过配置文件的配置来添加。这些模块有官方提供的也有第三方提供的模块，如果需要完全可以开发服务自己业务特性的定制模块。</p><h5 id="_3-高可靠性" tabindex="-1"><a class="header-anchor" href="#_3-高可靠性" aria-hidden="true">#</a> (3)高可靠性</h5><p>Nginx采用的是多进程模式运行，其中有一个master主进程和N多个worker进程，worker进程的数量我们可以手动设置，每个worker进程之间都是相互独立提供服务，并且master主进程可以在某一个worker进程出错时，快速去&quot;拉起&quot;新的worker进程提供服务。</p><h5 id="_4-热部署" tabindex="-1"><a class="header-anchor" href="#_4-热部署" aria-hidden="true">#</a> (4)热部署</h5><p>现在互联网项目都要求以7*24小时进行服务的提供，针对于这一要求，Nginx也提供了热部署功能，即可以在Nginx不停止的情况下，对Nginx进行文件升级、更新配置和更换日志文件等功能。</p><h5 id="_5-成本低、bsd许可证" tabindex="-1"><a class="header-anchor" href="#_5-成本低、bsd许可证" aria-hidden="true">#</a> (5)成本低、BSD许可证</h5><p>BSD是一个开源的许可证，世界上的开源许可证有很多，现在比较流行的有六种分别是GPL、BSD、MIT、Mozilla、Apache、LGPL。这六种的区别是什么，我们可以通过下面一张图来解释下：</p><p><img src="'+x+`" alt="1585139995444"></p><p>Nginx本身是开源的，我们不仅可以免费的将Nginx应用在商业领域，而且还可以在项目中直接修改Nginx的源码来定制自己的特殊要求。这些点也都是Nginx为什么能吸引无数开发者继续为Nginx来贡献自己的智慧和青春。OpenRestry [Nginx+Lua] Tengine[淘宝]</p><h3 id="nginx的功能特性及常用功能" tabindex="-1"><a class="header-anchor" href="#nginx的功能特性及常用功能" aria-hidden="true">#</a> Nginx的功能特性及常用功能</h3><p>Nginx提供的基本功能服务从大体上归纳为&quot;基本HTTP服务&quot;、“高级HTTP服务”和&quot;邮件服务&quot;等三大类。</p><h4 id="基本http服务" tabindex="-1"><a class="header-anchor" href="#基本http服务" aria-hidden="true">#</a> 基本HTTP服务</h4><p>Nginx可以提供基本HTTP服务，可以作为HTTP代理服务器和反向代理服务器，支持通过缓存加速访问，可以完成简单的负载均衡和容错，支持包过滤功能，支持SSL等。</p><ul><li>处理静态文件、处理索引文件以及支持自动索引；</li><li>提供反向代理服务器，并可以使用缓存加上反向代理，同时完成负载均衡和容错；</li><li>提供对FastCGI、memcached等服务的缓存机制，，同时完成负载均衡和容错；</li><li>使用Nginx的模块化特性提供过滤器功能。Nginx基本过滤器包括gzip压缩、ranges支持、chunked响应、XSLT、SSI以及图像缩放等。其中针对包含多个SSI的页面，经由FastCGI或反向代理，SSI过滤器可以并行处理。</li><li>支持HTTP下的安全套接层安全协议SSL.</li><li>支持基于加权和依赖的优先权的HTTP/2</li></ul><h4 id="高级http服务" tabindex="-1"><a class="header-anchor" href="#高级http服务" aria-hidden="true">#</a> 高级HTTP服务</h4><ul><li>支持基于名字和IP的虚拟主机设置</li><li>支持HTTP/1.0中的KEEP-Alive模式和管线(PipeLined)模型连接</li><li>自定义访问日志格式、带缓存的日志写操作以及快速日志轮转。</li><li>提供3xx~5xx错误代码重定向功能</li><li>支持重写（Rewrite)模块扩展</li><li>支持重新加载配置以及在线升级时无需中断正在处理的请求</li><li>支持网络监控</li><li>支持FLV和MP4流媒体传输</li></ul><h4 id="邮件服务" tabindex="-1"><a class="header-anchor" href="#邮件服务" aria-hidden="true">#</a> 邮件服务</h4><p>Nginx提供邮件代理服务也是其基本开发需求之一，主要包含以下特性：</p><ul><li>支持IMPA/POP3代理服务功能</li><li>支持内部SMTP代理服务功能</li></ul><h4 id="nginx常用的功能模块" tabindex="-1"><a class="header-anchor" href="#nginx常用的功能模块" aria-hidden="true">#</a> Nginx常用的功能模块</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>静态资源部署
Rewrite地址重写
    正则表达式
反向代理
负载均衡
    轮询、加权轮询、ip_hash、url_hash、fair
Web缓存
环境部署
    高可用的环境
用户认证模块...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Nginx的核心组成</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>nginx二进制可执行文件
nginx.conf配置文件
error.log错误的日志记录
access.log访问日志记录
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,40);function v(N,_){const n=l("ExternalLinkIcon");return t(),d("div",null,[u,i("p",null,[e("我们先来看一组数据，我们先打开Nginx的官方网站 "),i("a",b,[e("http://nginx.org/"),s(n)]),e(",找到Netcraft公司公布的数据，对当前主流服务器产品进行介绍。")]),m])}const f=r(g,[["render",v],["__file","一、Nginx简介.html.vue"]]);export{f as default};
