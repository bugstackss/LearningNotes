import{_ as a}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as e,c as s,a as r}from"./app.9b10ba0a.js";const i="/assets/image-20210929214004518.6de0fde6.png",t="/assets/image-20210929214041662.93029c42.png",n="/assets/image-20210929214144170.9adb393d.png",p="/assets/image-20210929214213703.d379bfdd.png",c="/assets/image-20210929214224423.5b72faf4.png",d="/assets/image-20210929214237561.f61eb209.png",o="/assets/image-20210929214249848.a5bc032d.png",h="/assets/image-20210929214041662.93029c42.png",l="/assets/image-20210929214506123.ce8c998f.png",m="/assets/image-20210929214546424.12e326b8.png",g="/assets/image-20210929214605895.c2affce2.png",_="/assets/image-20210929214622747.de25633b.png",u="/assets/image-20210929214734697.42139085.png",b="/assets/image-20210929214808112.fabcb435.png",f="/assets/image-20210929214940522.46effd01.png",k="/assets/image-20210929214949657.a1a3184f.png",q="/assets/image-20210929215024937.e0cf16ee.png",A="/assets/image-20210929215121096.1d52a43d.png",S="/assets/image-20210929215157532.84ac6b76.png",x="/assets/image-20210929215208921.2eabb117.png",v="/assets/image-20210929215217723.6ce455fe.png",Q="/assets/image-20210929215348250.49d07477.png",L="/assets/image-20210929215500057.b26ffc10.png",C="/assets/image-20210929215527782.d011a89b.png",y="/assets/image-20210929215532317.69a35d7c.png",w="/assets/image-20210929215617239.ebc8ad12.png",N="/assets/image-20210929215622470.3c68eb23.png",F="/assets/image-20210929215636783.2b6948b3.png",I="/assets/image-20210929215721311.c161dbee.png",H="/assets/image-20210929215749207.2988fbdc.png",z="/assets/image-20210929215842781.7e4ff968.png",j="/assets/image-20210929215859160.82cf0816.png",P="/assets/image-20210929215907481.dc8afd24.png",R="/assets/image-20210929215923254.b7e9f5d7.png",E={},O=r('<h2 id="十六、abstractqueuedsynchronizer之aqs" tabindex="-1"><a class="header-anchor" href="#十六、abstractqueuedsynchronizer之aqs" aria-hidden="true">#</a> 十六、AbstractQueuedSynchronizer之AQS</h2><h3 id="_1、aqs是什么" tabindex="-1"><a class="header-anchor" href="#_1、aqs是什么" aria-hidden="true">#</a> 1、AQS是什么</h3><p>字面意思:抽象的队列同步器</p><p><img src="'+i+`" alt="image20210929214004518"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">AbstractOwnableSynchronizer</span>
<span class="token class-name">AbstractQueuedLongSynchronizer</span>
<span class="token class-name">AbstractQueuedSynchronizer</span>                  
通常地：<span class="token class-name">AbstractQueuedSynchronizer</span>简称为<span class="token constant">AQS</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>技术解释</strong></p><p>是用来构建锁或者其它同步器组件的重量级基础框架及整个JUC体系的基石，通过内置的FIFO队列来完成资源获取线程的排队工作，并通过一个int类变量表示持有锁的状态</p><p><img src="`+t+'" alt="image20210929214041662"></p><p>CLH：Craig、Landin and Hagersten 队列，是一个单向链表，AQS中的队列是CLH变体的虚拟双向队列FIFO</p><h3 id="_2、aqs为什么是juc内容中最重要的基石" tabindex="-1"><a class="header-anchor" href="#_2、aqs为什么是juc内容中最重要的基石" aria-hidden="true">#</a> 2、AQS为什么是JUC内容中最重要的基石</h3><h4 id="_1、和aqs有关的" tabindex="-1"><a class="header-anchor" href="#_1、和aqs有关的" aria-hidden="true">#</a> 1、和AQS有关的</h4><p><img src="'+n+'" alt="image20210929214144170"></p><h4 id="_2、reentrantlock" tabindex="-1"><a class="header-anchor" href="#_2、reentrantlock" aria-hidden="true">#</a> 2、ReentrantLock</h4><p><img src="'+p+'" alt="image20210929214213703"></p><h4 id="_3、countdownlatch" tabindex="-1"><a class="header-anchor" href="#_3、countdownlatch" aria-hidden="true">#</a> 3、CountDownLatch</h4><p><img src="'+c+'" alt="image20210929214224423"></p><h4 id="_4、reentrantreadwritelock" tabindex="-1"><a class="header-anchor" href="#_4、reentrantreadwritelock" aria-hidden="true">#</a> 4、ReentrantReadWriteLock</h4><p><img src="'+d+'" alt="image20210929214237561"></p><h4 id="_5、semaphore" tabindex="-1"><a class="header-anchor" href="#_5、semaphore" aria-hidden="true">#</a> 5、Semaphore</h4><p><img src="'+o+'" alt="image20210929214249848"></p><h4 id="_6、进一步理解锁和同步器的关系" tabindex="-1"><a class="header-anchor" href="#_6、进一步理解锁和同步器的关系" aria-hidden="true">#</a> 6、进一步理解锁和同步器的关系</h4><p>锁，面向锁的使用者</p><p>定义了程序员和锁交互的使用层API，隐藏了实现细节，你调用即可。</p><p>同步器，面向锁的实现者</p><p>比如Java并发大神DougLee，提出统一规范并简化了锁的实现，屏蔽了同步状态管理、阻塞线程排队和通知、唤醒机制等。</p><h3 id="_3、aqs能干嘛" tabindex="-1"><a class="header-anchor" href="#_3、aqs能干嘛" aria-hidden="true">#</a> 3、AQS能干嘛</h3><p>加锁会导致阻塞，有阻塞就需要排队，实现排队必然需要队列</p><p>抢到资源的线程直接使用处理业务，抢不到资源的必然涉及一种排队等候机制。抢占资源失败的线程继续去等待(类似银行业务办理窗口都满了，暂时没有受理窗口的顾客只能去候客区排队等候)，但等候线程仍然保留获取锁的可能且获取锁流程仍在继续(候客区的顾客也在等着叫号，轮到了再去受理窗口办理业务)。</p><p>既然说到了排队等候机制，那么就一定会有某种队列形成，这样的队列是什么数据结构呢？</p><p>如果共享资源被占用，就需要一定的阻塞等待唤醒机制来保证锁分配。这个机制主要用的是CLH队列的变体实现的，将暂时获取不到锁的线程加入到队列中，这个队列就是AQS的抽象表现。它将请求共享资源的线程封装成队列的结点（Node），通过CAS、自旋以及LockSupport.park()的方式，维护state变量的状态，使并发达到同步的效果。</p><p><img src="'+h+'" alt="image20210929214426330"></p><h3 id="_4、aqs初步" tabindex="-1"><a class="header-anchor" href="#_4、aqs初步" aria-hidden="true">#</a> 4、AQS初步</h3><h4 id="_1、官网解释" tabindex="-1"><a class="header-anchor" href="#_1、官网解释" aria-hidden="true">#</a> 1、官网解释</h4><p><img src="'+l+'" alt="image20210929214506123"></p><p>有阻塞就需要排队，实现排队必然需要队列</p><p>AQS使用一个volatile的int类型的成员变量来表示同步状态，通过内置的FIFO队列来完成资源获取的排队工作将每条要去抢占资源的线程封装成一个Node节点来实现锁的分配，通过CAS完成对State值的修改。</p><p><img src="'+m+'" alt="image20210929214546424"></p><h4 id="_2、aqs内部体系架构" tabindex="-1"><a class="header-anchor" href="#_2、aqs内部体系架构" aria-hidden="true">#</a> 2、AQS内部体系架构</h4><p><img src="'+g+'" alt="image20210929214605895"></p><p><img src="'+_+'" alt="image20210929214622747"></p><h5 id="_1、aqs自身" tabindex="-1"><a class="header-anchor" href="#_1、aqs自身" aria-hidden="true">#</a> 1、AQS自身</h5><ol><li>AQS的int变量</li></ol><p>AQS的同步状态State成员变量</p><p><img src="'+u+'" alt="image20210929214734697"></p><p>银行办理业务的受理窗口状态</p><p>零就是没人，自由状态可以办理</p><p>大于等于1，有人占用窗口，等着去</p><ol><li>AQS的CLH队列</li></ol><p>CLH队列(三个大牛的名字组成)，为一个双向队列</p><p><img src="'+b+`" alt="image20210929214808112"></p><p><strong>小总结</strong></p><p>有阻塞就需要排队，实现排队必然需要队列</p><p>state变量+CLH双端队列</p><h5 id="_2、内部类node-node类在aqs类内部" tabindex="-1"><a class="header-anchor" href="#_2、内部类node-node类在aqs类内部" aria-hidden="true">#</a> 2、内部类Node(Node类在AQS类内部)</h5><ol><li>Node的int变量</li></ol><p>Node的等待状态waitState成员变量</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">volatile</span> <span class="token keyword">int</span> waitStatus
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>等候区其它顾客(其它线程)的等待状态</p><p>队列中每个排队的个体就是一个 Node</p><ol><li>Node此类的讲解</li></ol><p><img src="`+f+'" alt="image20210929214940522"></p><p><img src="'+k+'" alt="image20210929214949657"></p><h5 id="_3、aqs同步队列的基本结构" tabindex="-1"><a class="header-anchor" href="#_3、aqs同步队列的基本结构" aria-hidden="true">#</a> 3、AQS同步队列的基本结构</h5><p><img src="'+q+'" alt="image20210929215024937"></p><p>CLH：Craig、Landin and Hagersten 队列，是个单向链表，AQS中的队列是CLH变体的虚拟双向队列（FIFO）</p><h3 id="_5、从reentrantlock开始解读aqs" tabindex="-1"><a class="header-anchor" href="#_5、从reentrantlock开始解读aqs" aria-hidden="true">#</a> 5、从ReentrantLock开始解读AQS</h3><p>Lock接口的实现类，基本都是通过【聚合】了一个【队列同步器】的子类完成线程访问控制的</p><h4 id="_1、reentrantlock的原理" tabindex="-1"><a class="header-anchor" href="#_1、reentrantlock的原理" aria-hidden="true">#</a> 1、ReentrantLock的原理</h4><p><img src="'+A+'" alt="image20210929215121096"></p><h4 id="_2、从最简单的lock方法开始看看公平和非公平" tabindex="-1"><a class="header-anchor" href="#_2、从最简单的lock方法开始看看公平和非公平" aria-hidden="true">#</a> 2、从最简单的lock方法开始看看公平和非公平</h4><p><img src="'+S+'" alt="image20210929215157532"></p><p><img src="'+x+'" alt="image20210929215208921"></p><p><img src="'+v+'" alt="image20210929215217723"></p><blockquote><p>可以明显看出公平锁与非公平锁的lock()方法唯一的区别就在于公平锁在获取同步状态时多了一个限制条件： hasQueuedPredecessors() hasQueuedPredecessors是公平锁加锁时判断等待队列中是否存在有效节点的方法</p></blockquote><h4 id="_3、非公平锁-方法lock" tabindex="-1"><a class="header-anchor" href="#_3、非公平锁-方法lock" aria-hidden="true">#</a> 3、非公平锁 方法lock()</h4><p>对比公平锁和非公平锁的 tryAcquire()方法的实现代码，其实差别就在于非公平锁获取锁时比公平锁中少了一个判断 !hasQueuedPredecessors()</p><p>hasQueuedPredecessors() 中判断了是否需要排队，导致公平锁和非公平锁的差异如下：</p><p>公平锁：公平锁讲究先来先到，线程在获取锁时，如果这个锁的等待队列中已经有线程在等待，那么当前线程就会进入等待队列中；</p><p>非公平锁：不管是否有等待队列，如果可以获取锁，则立刻占有锁对象。也就是说队列的第一个排队线程在unpark()，之后还是需要竞争锁（存在线程竞争的情况下）</p><p><img src="'+Q+'" alt="image20210929215348250"></p><h4 id="_4、源码解读" tabindex="-1"><a class="header-anchor" href="#_4、源码解读" aria-hidden="true">#</a> 4、源码解读</h4><h5 id="_1、lock" tabindex="-1"><a class="header-anchor" href="#_1、lock" aria-hidden="true">#</a> 1、lock()</h5><p><img src="'+L+'" alt="image20210929215500057"></p><h5 id="_2、acquire" tabindex="-1"><a class="header-anchor" href="#_2、acquire" aria-hidden="true">#</a> 2、acquire()</h5><p><img src="'+C+'" alt="image20210929215527782"></p><p><img src="'+y+'" alt="image20210929215532317"></p><h5 id="_3、tryacquire-arg" tabindex="-1"><a class="header-anchor" href="#_3、tryacquire-arg" aria-hidden="true">#</a> 3、tryAcquire(arg)</h5><p>非公平锁</p><p><img src="'+w+'" alt="image20210929215617239"></p><p><img src="'+N+'" alt="image20210929215622470"></p><p>nonfairTryAcquire(acquires)</p><p><img src="'+F+'" alt="image20210929215636783"></p><p>return false; 继续推进条件，走下一个方法</p><p>return true; 结束</p><h5 id="_4、addwaiter-node-exclusive" tabindex="-1"><a class="header-anchor" href="#_4、addwaiter-node-exclusive" aria-hidden="true">#</a> 4、addWaiter(Node.EXCLUSIVE)</h5><p>addWaiter(Node mode)</p><p><img src="'+I+'" alt="image20210929215721311"></p><p>enq(node);</p><p><img src="'+H+'" alt="image20210929215749207"></p><p>双向链表中，第一个节点为虚节点(也叫哨兵节点)，其实并不存储任何信息，只是占位。 真正的第一个有数据的节点，是从第二个节点开始的。</p><p>假如3号ThreadC线程进来</p><p>prev - compareAndSetTail - next</p><h5 id="_5、acquirequeued-addwaiter-node-exclusive-arg" tabindex="-1"><a class="header-anchor" href="#_5、acquirequeued-addwaiter-node-exclusive-arg" aria-hidden="true">#</a> 5、acquireQueued(addWaiter(Node.EXCLUSIVE), arg)</h5><p>acquireQueued</p><p><img src="'+z+'" alt="image20210929215842781"></p><p>假如再抢抢失败就会进入</p><p>shouldParkAfterFailedAcquire 和 parkAndCheckInterrupt 方法中</p><p><img src="'+j+'" alt="image20210929215859160"></p><p>shouldParkAfterFailedAcquire</p><p><img src="'+P+'" alt="image20210929215907481"></p><p>如果前驱节点的 waitStatus 是 SIGNAL状态，即 shouldParkAfterFailedAcquire 方法会返回 true 程序会继续向下执行 parkAndCheckInterrupt 方法，用于将当前线程挂起</p><p>parkAndCheckInterrupt</p><p><img src="'+R+'" alt="image20210929215923254"></p><h4 id="_5、unlock" tabindex="-1"><a class="header-anchor" href="#_5、unlock" aria-hidden="true">#</a> 5、unlock</h4><p>sync.release(1);</p><p>tryRelease(arg)</p><p>unparkSuccessor</p>',117),U=[O];function W(J,T){return e(),s("div",null,U)}const D=a(E,[["render",W],["__file","十六、AbstractQueuedSynchronizer之AQS.html.vue"]]);export{D as default};
