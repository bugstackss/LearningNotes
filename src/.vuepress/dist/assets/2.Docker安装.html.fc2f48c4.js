import{_ as i}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as r,c,d as e,e as s,b as o,a as n,r as t}from"./app.9b10ba0a.js";const l="/assets/2023-05-17-20-20-03-image.5839b066.png",p="/assets/2023-05-17-20-20-56-image.c95e05f3.png",d="/assets/2023-05-17-20-23-16-image.973beab1.png",u="/assets/2023-05-17-20-26-53-image.dacc6ddc.png",m="/assets/2023-05-17-20-27-34-image.e1725e7f.png",g="/assets/2023-05-17-20-29-10-image.4d04aad5.png",v="/assets/2023-05-17-20-30-08-image.cc41b893.png",b="/assets/2023-05-17-20-34-16-image.46856221.png",k="/assets/2023-05-17-20-34-58-image.b58e2996.png",h="/assets/2023-05-17-20-36-26-image.6e890337.png",_="/assets/2023-05-17-20-38-43-image.c6eccb0f.png",f="/assets/2023-05-17-20-50-45-image.7758fe95.png",x="/assets/2023-05-17-20-52-45-image.f35f7d46.png",y="/assets/2023-05-17-20-55-24-image.81fc9370.png",D="/assets/2023-05-17-20-56-12-image.9e7dd264.png",q="/assets/2023-05-17-20-59-54-image.888072fd.png",C="/assets/2023-05-17-21-02-44-image.62eaf2ae.png",S="/assets/2023-05-17-21-03-15-image.bcbfe6aa.png",w="/assets/2023-05-17-21-15-02-image.38c1facb.png",E="/assets/2023-05-17-21-15-31-image.43bca219.png",O="/assets/2023-05-17-21-16-39-image.45fa87fa.png",j="/assets/2023-05-17-21-17-03-image.c4b48dd9.png",N="/assets/2023-05-17-21-26-06-image.776a51c4.png",P="/assets/2023-05-17-21-26-31-image.484d9adc.png",T="/assets/2023-05-17-21-27-44-image.7ee29748.png",V="/assets/2023-05-17-21-27-56-image.4843dbcd.png",H={},I=n('<h2 id="一、前提说明" tabindex="-1"><a class="header-anchor" href="#一、前提说明" aria-hidden="true">#</a> 一、前提说明</h2><p><strong>CentOS Docker 安装</strong></p><p><img src="'+l+'" alt=""></p><p><strong>前提条件</strong></p><p>目前，CentOS 仅发行版本中的内核支持 Docker。Docker 运行在CentOS 7 (64-bit)上，</p><p>要求系统为64位、Linux系统内核版本为 3.8以上，这里选用Centos7.x</p><p><strong>查看自己的内核</strong></p><p>uname命令用于打印当前系统相关信息（内核版本号、硬件架构、主机名称和操作系统类型等）。</p><p><img src="'+p+'" alt=""></p><h2 id="二、docker的基本组成" tabindex="-1"><a class="header-anchor" href="#二、docker的基本组成" aria-hidden="true">#</a> 二、Docker的基本组成</h2><ul><li>镜像（image）</li></ul><p>Docker 镜像（Image）就是一个<strong>只读</strong>的模板。镜像可以用来创建 Docker 容器，<code>一个镜像可以创建很多容器</code>。</p><p>它也相当于是一个root文件系统。比如官方镜像 centos:7 就包含了完整的一套 centos:7 最小系统的 root 文件系统。</p><p>相当于容器的“源代码”，<code>docker镜像文件类似于Java的类模板，而docker容器实例类似于java中new出来的实例对象。</code></p><p><img src="'+d+'" alt=""></p><ul><li>容器（Container）</li></ul><p><strong>1 从面向对象角度</strong></p><p>Docker 利用容器（Container）独立运行的一个或一组应用，应用程序或服务运行在容器里面，容器就类似于一个虚拟化的运行环境，<code>容器是用镜像创建的运行实例</code>。就像是Java中的类和实例对象一样，镜像是静态的定义，容器是镜像运行时的实体。容器为镜像提供了一个标准的和隔离的运行环境，它可以被启动、开始、停止、删除。每个容器都是相互隔离的、保证安全的平台</p><p><strong>2 从镜像容器角度</strong></p><p><em><strong>可以把容器看做是一个简易版的 Linux 环境</strong></em>（包括root用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序。</p><ul><li>仓库（repoistory）</li></ul><p>仓库（Repository）是<code>集中存放镜像文件</code>的场所。</p><p>类似于</p><p>Maven仓库，存放各种jar包的地方；</p><p>github仓库，存放各种git项目的地方；</p><p>Docker公司提供的官方registry被称为Docker Hub，存放各种镜像模板的地方。</p><p>仓库分为公开仓库（Public）和私有仓库（Private）两种形式。</p>',27),L={href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"},B=n('<ul><li>小总结</li></ul><p><strong>需要正确的理解仓库/镜像/容器这几个概念:</strong></p><p>Docker 本身是一个容器运行载体或称之为管理引擎。我们把应用程序和配置依赖打包好形成一个可交付的运行环境，这个打包好的运行环境就是image镜像文件。只有通过这个镜像文件才能生成Docker容器实例(类似Java中new出来一个对象)。</p><p>image文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。</p><p><strong>镜像文件</strong></p><ul><li>image 文件生成的容器实例，本身也是一个文件，称为镜像文件。</li></ul><p><strong>容器实例</strong></p><ul><li>一个容器运行一种服务，当我们需要的时候，就可以通过docker客户端创建一个对应的运行实例，也就是我们的容器</li></ul><p><strong>仓库</strong></p><ul><li>就是放一堆镜像的地方，我们可以把镜像发布到仓库中，需要的时候再从仓库中拉下来就可以了。</li></ul><hr><h2 id="三、docker平台架构图解" tabindex="-1"><a class="header-anchor" href="#三、docker平台架构图解" aria-hidden="true">#</a> 三、Docker平台架构图解</h2><blockquote><p>Docker平台架构图解（入门版）</p></blockquote><p><img src="'+u+'" alt=""></p><p><code>Docker工作原理</code></p><p>Docker是一个Client-Server结构的系统，Docker守护进程运行在主机上， 然后通过Socket连接从客户端访问，守护进程从客户端接受命令并管理运行在主机上的容器。 <strong>容器，是一个运行时环境，就是我们前面说到的集装箱。可以对比mysql演示对比讲解</strong></p><p><img src="'+m+'" alt=""></p><blockquote><p>Docker平台架构图解（架构版）</p></blockquote><p>首次懵逼很正常，后续深入，先有大概轮廓，混个眼熟</p><p><strong>整体架构及底层通信原理概述</strong></p><p>Docker 是一个 C/S 模式的架构，后端是一个松耦合架构，众多模块各司其职。</p><p><img src="'+g+'" alt=""></p><p><img src="'+v+'" alt=""></p><h2 id="四、安装步骤" tabindex="-1"><a class="header-anchor" href="#四、安装步骤" aria-hidden="true">#</a> 四、安装步骤</h2>',24),J={href:"https://docs.docker.com/engine/install/centos/",target:"_blank",rel:"noopener noreferrer"},F=n(`<p><strong>安装步骤</strong></p><p>1.确定你是CentOS7及以上版本</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cat</span> /etc/redhat-release
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.卸载旧版本</p>`,4),M={href:"https://docs.docker.com/engine/install/centos/",target:"_blank",rel:"noopener noreferrer"},R=n('<p><img src="'+b+`" alt=""></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum remove <span class="token function">docker</span> <span class="token punctuation">\\</span>
                  docker-client <span class="token punctuation">\\</span>
                  docker-client-latest <span class="token punctuation">\\</span>
                  docker-common <span class="token punctuation">\\</span>
                  docker-latest <span class="token punctuation">\\</span>
                  docker-latest-logrotate <span class="token punctuation">\\</span>
                  docker-logrotate <span class="token punctuation">\\</span>
                  docker-engine
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.yum安装gcc相关</p><p>CentOS7能上外网</p><p><img src="`+k+`" alt=""></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token parameter variable">-y</span> <span class="token function">install</span> gcc
yum <span class="token parameter variable">-y</span> <span class="token function">install</span> gcc-c++
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>4.安装需要的软件包</p><p>官网要求</p><p><img src="`+h+`" alt=""></p><p>执行命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utils
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>5.设置stable镜像仓库</p><p><code>❌大坑</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utils
<span class="token function">sudo</span> yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+_+`" alt=""></p><p>报错：</p><p>1   [Errno 14] curl#35 - TCP connection reset by peer</p><p>2   [Errno 12] curl#35 - Timeout</p><p><strong>官网要求</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>报错：</p><p>1   [Errno 14] curl#35 - TCP connection reset by peer</p><p>2   [Errno 12] curl#35 - Timeout</p><p><strong>✅推荐</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们自己使用这个（阿里的镜像）</p><p><img src="`+f+`" alt=""></p><p>6.更新yum软件包索引</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum makecache fast
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>7.安装Docker CE</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum <span class="token function">install</span> docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>官网要求</p><p><img src="`+x+'" alt=""></p><p>执行结果</p><p><img src="'+y+'" alt=""></p><p><img src="'+D+`" alt=""></p><p>8.启动Docker</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl start <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>9.测试</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> version
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+q+`" alt=""></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run hello-word
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+C+'" alt=""></p><p>10.卸载</p><p><img src="'+S+`" alt=""></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl stop <span class="token function">docker</span>

<span class="token function">sudo</span> yum remove docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-ce-rootless-extras

<span class="token function">sudo</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> /var/lib/docker

<span class="token function">sudo</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> /var/lib/containerd
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="五、阿里云镜像加速" tabindex="-1"><a class="header-anchor" href="#五、阿里云镜像加速" aria-hidden="true">#</a> 五、阿里云镜像加速</h2><blockquote><p>是什么</p></blockquote>`,48),U={href:"https://promotion.aliyun.com/ntms/act/kubernetes.html",target:"_blank",rel:"noopener noreferrer"},W=n('<blockquote><p>注册一个属于自己的阿里云账户（可复用淘宝账号）</p></blockquote><blockquote><p>获得加速器地址连接</p></blockquote><ol><li>登录阿里云开发者平台</li></ol><p><img src="'+w+'" alt=""></p><ol start="2"><li>点击控制台</li></ol><p><img src="'+E+'" alt=""></p><ol start="3"><li>选择容器镜像服务</li></ol><p><img src="'+O+'" alt=""></p><ol start="4"><li>获取加速器地址</li></ol><p><img src="'+j+`" alt=""></p><blockquote><p>粘贴脚本直接执行</p></blockquote><ul><li>直接粘</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /etc/docker
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">tee</span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;-</span><span class="token string">&#39;EOF&#39;
{
  &quot;registry-mirrors&quot;: [&quot;https://gt9wq4lq.mirror.aliyuncs.com&quot;]
}
EOF</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>或者分步骤都行</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /etc/docker

<span class="token function">vim</span> /etc/docker/daemon.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>#阿里云
<span class="token punctuation">{</span>
  <span class="token property">&quot;registry-mirrors&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;https://｛自已的编码｝.mirror.aliyuncs.com&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>重启服务器</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl daemon-reload
systemctl restart <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="六、永远的helloword" tabindex="-1"><a class="header-anchor" href="#六、永远的helloword" aria-hidden="true">#</a> 六、永远的HelloWord</h2><p>启动Docker后台容器（测试运行 helo-world）</p><ul><li>docker run hello-world</li></ul><p><img src="`+N+'" alt=""></p><p>输出这段提示以后，hello world就会停止运行，容器自动终止。</p><ul><li>run 干了什么</li></ul><p><img src="'+P+'" alt=""></p><h2 id="七、底层原理" tabindex="-1"><a class="header-anchor" href="#七、底层原理" aria-hidden="true">#</a> 七、底层原理</h2><blockquote><p>为什么Docker会比VM虚拟机快？</p></blockquote><p><code>(1)docker有着比虚拟机更少的抽象层</code></p><p>由于docker不需要Hypervisor(虚拟机)实现硬件资源虚拟化,运行在docker容器上的程序直接使用的都是实际物理机的硬件资源。因此在CPU、内存利用率上docker将会在效率上有明显优势。</p><p><code>(2)docker利用的是宿主机的内核,而不需要加载操作系统OS内核</code></p><p>当新建一个容器时,docker不需要和虚拟机一样重新加载一个操作系统内核。进而避免引寻、加载操作系统内核返回等比较费时费资源的过程,当新建一个虚拟机时,虚拟机软件需要加载OS,返回新建过程是分钟级别的。而docker由于直接利用宿主机的操作系统,则省略了返回过程,因此新建一个docker容器只需要几秒钟。</p><p><img src="'+T+'" alt=""></p><p><img src="'+V+'" alt=""></p>',34);function z(A,G){const a=t("ExternalLinkIcon");return r(),c("div",null,[I,e("p",null,[e("strong",null,[s("最大的公开仓库是 Docker Hub("),e("a",L,[s("https://hub.docker.com/"),o(a)]),s(")，")]),s(" 存放了数量庞大的镜像供用户下载。国内的公开仓库包括阿里云 、网易云等")]),B,e("p",null,[s("[下载地址]("),e("a",J,[s("Install Docker Engine on CentOS | Docker Documentation"),o(a)]),s(")")]),F,e("p",null,[e("a",M,[s("https://docs.docker.com/engine/install/centos/"),o(a)])]),R,e("p",null,[e("a",U,[s("开放云原生应用-云原生（Cloud Native）-云原生介绍 - 阿里云 (aliyun.com)"),o(a)])]),W])}const X=i(H,[["render",z],["__file","2.Docker安装.html.vue"]]);export{X as default};
