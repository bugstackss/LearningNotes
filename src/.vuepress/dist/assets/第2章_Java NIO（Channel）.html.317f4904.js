import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as a,c as s,a as t}from"./app.9b10ba0a.js";const e="/assets/image-20230225174128809.8dc16807.png",p="/assets/image-20230225180341734.7153cbf0.png",o="/assets/image-20230225180453937.ea339556.png",c={},l=t('<h1 id="_01、java-nio-channel" tabindex="-1"><a class="header-anchor" href="#_01、java-nio-channel" aria-hidden="true">#</a> 01、Java NIO（Channel）</h1><h2 id="_1-1-channel-概述" tabindex="-1"><a class="header-anchor" href="#_1-1-channel-概述" aria-hidden="true">#</a> <strong>1.1 Channel 概述</strong></h2><p>Java NIO 的通道类似流，但又有些不同：</p><ul><li><p>既可以从通道中读取数据，又可以写数据到通道。但流的读写通常是单向的。</p></li><li><p>通道可以异步地读写。</p></li><li><p>通道中的数据总是要先读到一个 Buffer，或者总是要从一个 Buffer 中写入。</p></li></ul><p>正如上面所说，从通道读取数据到缓冲区，从缓冲区写入数据到通道。如下图所示：</p><p><img src="'+e+`" alt="image-20230225174128809"></p><h2 id="_1-2-channel-实现" tabindex="-1"><a class="header-anchor" href="#_1-2-channel-实现" aria-hidden="true">#</a> <strong>1.2 Channel 实现</strong></h2><p>下面是 Java NIO 中最重要的 Channel 的实现：</p><ul><li>FileChannel</li><li>DatagramChannel</li><li>SocketChannel</li><li>ServerSocketChannel</li></ul><p>（1）FileChannel 从文件中读写数据。</p><p>（2）DatagramChannel 能通过 UDP 读写网络中的数据。</p><p>（3）SocketChannel 能通过 TCP 读写网络中的数据。</p><p>（4）ServerSocketChannel 可以监听新进来的 TCP 连接，像 Web 服务器那样。对 每一个新进来的连接都会创建一个 SocketChannel。</p><p>正如你所看到的，这些通道涵盖了 UDP 和 TCP 网络 IO，以及文件 IO</p><h2 id="_1-3-filechannel-介绍和示例" tabindex="-1"><a class="header-anchor" href="#_1-3-filechannel-介绍和示例" aria-hidden="true">#</a> <strong>1.3 FileChannel 介绍和示例</strong></h2><p>FileChannel 类可以实现常用的 read，write 以及 scatter/gather 操作，同时它也提</p><p>供了很多专用于文件的新方法。这些方法中的许多都是我们所熟悉的文件操作。</p><table><thead><tr><th style="text-align:center;">方法</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>int read(ByteBuffer dst)</strong></td><td style="text-align:center;"><strong>从 Channel 中读取到ByteBuffer</strong></td></tr><tr><td style="text-align:center;"><strong>long read(ByteBuffer[] dsts )</strong></td><td style="text-align:center;"><strong>将 Channel 中的数据“分散” 到 ByteBuffer[]</strong></td></tr><tr><td style="text-align:center;"><strong>int write(ByteBuffer src)</strong></td><td style="text-align:center;"><strong>将 ByteBuffer 中的数据写入到Channel</strong></td></tr><tr><td style="text-align:center;"><strong>long write(ByteBuffer[] srcs )</strong></td><td style="text-align:center;"><strong>将 ByteBuffer[] 中的数据 “聚集” 到Channel</strong></td></tr><tr><td style="text-align:center;">long position()</td><td style="text-align:center;">返回此通道的文件位置</td></tr><tr><td style="text-align:center;">FileChannel position(long p)</td><td style="text-align:center;">设置此通道的文件位置</td></tr><tr><td style="text-align:center;">long size()</td><td style="text-align:center;">返回此通道的文件的当前大小</td></tr><tr><td style="text-align:center;">FileChannel truncate(long s)</td><td style="text-align:center;">将此通道的文件截取为给定大小</td></tr><tr><td style="text-align:center;">void force(boolean metaData)</td><td style="text-align:center;">强制将所有对此通道的文件更新写入到存储设备中</td></tr></tbody></table><p><strong>下面是一个使用 FileChannel 读取数据到 Buffer 中的示例：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileChannelDemo</span> <span class="token punctuation">{</span> 
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span> 
    <span class="token class-name">RandomAccessFile</span> aFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token string">&quot;d:\\\\atguigu\\\\01.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rw&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">FileChannel</span> inChannel <span class="token operator">=</span> aFile<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token class-name">ByteBuffer</span> buf <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">int</span> bytesRead <span class="token operator">=</span> inChannel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">while</span> <span class="token punctuation">(</span>bytesRead <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;读取： &quot;</span> <span class="token operator">+</span> bytesRead<span class="token punctuation">)</span><span class="token punctuation">;</span> 
      buf<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
      <span class="token keyword">while</span> <span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">hasRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> buf<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
      <span class="token punctuation">}</span>
      buf<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
      bytesRead <span class="token operator">=</span> inChannel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
    aFile<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;操作结束&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Buffer</strong> <strong>通常的操作</strong></p><ol><li>将数据写入缓冲区</li><li>调用 buffer.flip() 反转读写模式</li><li>从缓冲区读取数据</li><li>调用 buffer.clear() 或 buffer.compact() 清除缓冲区内容</li></ol><h2 id="_1-4-filechannel-操作详解" tabindex="-1"><a class="header-anchor" href="#_1-4-filechannel-操作详解" aria-hidden="true">#</a> <strong>1.4 FileChannel 操作详解</strong></h2><h3 id="_1-4-1-打开-filechannel" tabindex="-1"><a class="header-anchor" href="#_1-4-1-打开-filechannel" aria-hidden="true">#</a> <strong>1.4.1 打开 FileChannel</strong></h3><p>在使用 FileChannel 之前，必须先打开它。但是，我们无法直接打开一个 FileChannel，需要通过使用一个 InputStream、OutputStream 或 RandomAccessFile 来获取一个 FileChannel 实例。下面是通过 RandomAccessFile</p><p>打开 FileChannel 的示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">RandomAccessFile</span> aFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token string">&quot;d:\\\\atguigu\\\\01.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rw&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token class-name">FileChannel</span> inChannel <span class="token operator">=</span> aFile<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-4-2-从-filechannel-读取数据" tabindex="-1"><a class="header-anchor" href="#_1-4-2-从-filechannel-读取数据" aria-hidden="true">#</a> <strong>1.4.2 从 FileChannel 读取数据</strong></h3><p>调用多个 read()方法之一从 FileChannel 中读取数据。如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ByteBuffer</span> buf <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">int</span> bytesRead <span class="token operator">=</span> inChannel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，分配一个 Buffer。从 FileChannel 中读取的数据将被读到 Buffer 中。然后，调 用 FileChannel.read()方法。该方法将数据从 FileChannel 读取到 Buffer 中。read() 方法返回的 int 值表示了有多少字节被读到了 Buffer 中。如果返回-1，表示到了文件 末尾。</p><h3 id="_1-4-3-向-filechannel-写数据" tabindex="-1"><a class="header-anchor" href="#_1-4-3-向-filechannel-写数据" aria-hidden="true">#</a> <strong>1.4.3 向 FileChannel 写数据</strong></h3><p>使用 FileChannel.write()方法向 FileChannel 写数据，该方法的参数是一个 Buffer。</p><p>如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileChannelDemo</span> <span class="token punctuation">{</span> 
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span> 
    <span class="token class-name">RandomAccessFile</span> aFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token string">&quot;d:\\\\atguigu\\\\01.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rw&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">FileChannel</span> inChannel <span class="token operator">=</span> aFile<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token class-name">String</span> newData <span class="token operator">=</span> <span class="token string">&quot;New String to write to file...&quot;</span> <span class="token operator">+</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ByteBuffer</span> buf1 <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    buf1<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    buf1<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>newData<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    buf1<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">while</span><span class="token punctuation">(</span>buf1<span class="token punctuation">.</span><span class="token function">hasRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
      inChannel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buf1<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
    inChannel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意 FileChannel.write()是在 while 循环中调用的。因为无法保证 write()方法一次能 向 FileChannel 写入多少字节，因此需要重复调用 write()方法，直到 Buffer 中已经没 有尚未写入通道的字节。</p><h3 id="_1-4-4-关闭-filechannel" tabindex="-1"><a class="header-anchor" href="#_1-4-4-关闭-filechannel" aria-hidden="true">#</a> <strong>1.4.4 关闭 FileChannel</strong></h3><p>用完 FileChannel 后必须将其关闭。如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>inChannel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-4-5-filechannel-的-position-方法" tabindex="-1"><a class="header-anchor" href="#_1-4-5-filechannel-的-position-方法" aria-hidden="true">#</a> <strong>1.4.5 FileChannel 的 position 方法</strong></h3><p>有时可能需要在 FileChannel 的某个特定位置进行数据的读/写操作。可以通过调用 position()方法获取 FileChannel 的当前位置。也可以通过调用 position(long pos)方 法设置 FileChannel 的当前位置。</p><p>这里有两个例子：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">long</span> pos <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
channel<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span>pos <span class="token operator">+</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果将位置设置在文件结束符之后，然后试图从文件通道中读取数据，读方法将返回- 1 （文件结束标志）。</p><p>如果将位置设置在文件结束符之后，然后向通道中写数据，文件将撑大到当前位置并 写入数据。这可能导致“文件空洞”，磁盘上物理文件中写入的数据间有空隙。</p><h3 id="_1-4-6-filechannel-的-size-方法" tabindex="-1"><a class="header-anchor" href="#_1-4-6-filechannel-的-size-方法" aria-hidden="true">#</a> <strong>1.4.6 FileChannel 的 size 方法</strong></h3><p>FileChannel 实例的 size()方法将返回该实例所关联文件的大小。如:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">long</span> fileSize <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-4-7-filechannel-的-truncate-方法" tabindex="-1"><a class="header-anchor" href="#_1-4-7-filechannel-的-truncate-方法" aria-hidden="true">#</a> <strong>1.4.7 FileChannel 的 truncate 方法</strong></h3><p>可以使用 FileChannel.truncate()方法截取一个文件。截取文件时，文件将中指定长度</p><p>后面的部分将被删除。如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>channel<span class="token punctuation">.</span><span class="token function">truncate</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个例子截取文件的前 1024 个字节。</p><h3 id="_1-4-8-filechannel-的-force-方法" tabindex="-1"><a class="header-anchor" href="#_1-4-8-filechannel-的-force-方法" aria-hidden="true">#</a> <strong>1.4.8 FileChannel 的 force 方法</strong></h3><p>FileChannel.force()方法将通道里尚未写入磁盘的数据强制写到磁盘上。出于性能方 面的考虑，操作系统会将数据缓存在内存中，所以无法保证写入到 FileChannel 里的 数据一定会即时写到磁盘上。要保证这一点，需要调用 force()方法。</p><p>force()方法有一个 boolean 类型的参数，指明是否同时将文件元数据（权限信息等） 写到磁盘上。</p><h3 id="_1-4-9-filechannel-的-transferto-和-transferfrom-方法" tabindex="-1"><a class="header-anchor" href="#_1-4-9-filechannel-的-transferto-和-transferfrom-方法" aria-hidden="true">#</a> <strong>1.4.9 FileChannel 的 transferTo 和 transferFrom 方法</strong></h3><p><strong>通道之间的数据传输：</strong></p><p>如果两个通道中有一个是 FileChannel，那你可以直接将数据从一个 channel 传输到 另外一个 channel。</p><p><strong>（1）transferFrom()方法</strong></p><p>FileChannel 的 transferFrom()方法可以将数据从源通道传输到 FileChannel 中（译 者注：这个方法在 JDK 文档中的解释为将字节从给定的可读取字节通道传输到此通道 的文件中）。下面是一个 FileChannel 完成文件间的复制的例子：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileChannelWrite</span> <span class="token punctuation">{</span> 
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span> 
    <span class="token class-name">RandomAccessFile</span> aFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token string">&quot;d:\\\\atguigu\\\\01.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rw&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">FileChannel</span> fromChannel <span class="token operator">=</span> aFile<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token class-name">RandomAccessFile</span> bFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token string">&quot;d:\\\\atguigu\\\\02.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rw&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">FileChannel</span> toChannel <span class="token operator">=</span> bFile<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">long</span> position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 
    <span class="token keyword">long</span> count <span class="token operator">=</span> fromChannel<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    toChannel<span class="token punctuation">.</span><span class="token function">transferFrom</span><span class="token punctuation">(</span>fromChannel<span class="token punctuation">,</span> position<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    aFile<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    bFile<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;over!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法的输入参数 position 表示从 position 处开始向目标文件写入数据，count 表示最 多传输的字节数。如果源通道的剩余空间小于 count 个字节，则所传输的字节数要小 于请求的字节数。此外要注意，在 SoketChannel 的实现中，SocketChannel 只会传 输此刻准备好的数据（可能不足 count 字节）。因此，SocketChannel 可能不会将请 求的所有数据(count 个字节)全部传输到 FileChannel 中。</p><p><strong>（2）transferTo()方法</strong></p><p>transferTo()方法将数据从 FileChannel 传输到其他的 channel 中。</p><p>下面是一个 transferTo()方法的例子：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileChannelDemo</span> <span class="token punctuation">{</span> 
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span> 
    <span class="token class-name">RandomAccessFile</span> aFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token string">&quot;d:\\\\atguigu\\\\02.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rw&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">FileChannel</span> fromChannel <span class="token operator">=</span> aFile<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token class-name">RandomAccessFile</span> bFile <span class="token operator">=</span> <span class="token function">newRandomAccessFile</span><span class="token punctuation">(</span><span class="token string">&quot;d:\\\\atguigu\\\\03.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rw&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">FileChannel</span> toChannel <span class="token operator">=</span> bFile<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">long</span> position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 
    <span class="token keyword">long</span> count <span class="token operator">=</span> fromChannel<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    fromChannel<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span>position<span class="token punctuation">,</span> count<span class="token punctuation">,</span> toChannel<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    aFile<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    bFile<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;over!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-5-scatter-gather" tabindex="-1"><a class="header-anchor" href="#_1-5-scatter-gather" aria-hidden="true">#</a> <strong>1.5</strong> <strong>Scatter/Gather</strong></h2><p>Java NIO 开始支持 scatter/gather，scatter/gather 用于描述从 Channel 中读取或者写入到 Channel 的操作。</p><p>**分散（scatter）**从 Channel 中读取是指在读操作时将读取的数据写入多个 buffer 中。</p><p>因此，Channel 将从 Channel 中读取的数据“分散（scatter）”到多个 Buffer 中。</p><p>**聚集（gather）**写入 Channel 是指在写操作时将多个 buffer 的数据写入同一个 Channel，因此，Channel 将多个 Buffer 中的数据“聚集（gather）”后发送到 Channel。</p><p>scatter / gather 经常用于需要将传输的数据分开处理的场合，例如传输一个由消息头 和消息体组成的消息，你可能会将消息体和消息头分散到不同的 buffer 中，这样你可 以方便的处理消息头和消息体。</p><h3 id="_1-5-1-scattering-reads" tabindex="-1"><a class="header-anchor" href="#_1-5-1-scattering-reads" aria-hidden="true">#</a> <strong>1.5.1 Scattering Reads</strong></h3><p>Scattering Reads 是指数据从一个 channel 读取到多个 buffer 中。如下图描述：</p><p><img src="`+p+`" alt="image-20230225180341734"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ByteBuffer</span> header <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token class-name">ByteBuffer</span> body <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ByteBuffer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bufferArray <span class="token operator">=</span> <span class="token punctuation">{</span> header<span class="token punctuation">,</span> body <span class="token punctuation">}</span><span class="token punctuation">;</span> 
channel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bufferArray<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意 buffer 首先被插入到数组，然后再将数组作为 channel.read() 的输入参数。</p><p>read()方法按照 buffer 在数组中的顺序将从 channel 中读取的数据写入到 buffer，当 一个 buffer 被写满后，channel 紧接着向另一个 buffer 中写。</p><p>Scattering Reads 在移动下一个 buffer 前，必须填满当前的 buffer，这也意味着它 不适用于动态消息(译者注：消息大小不固定)。换句话说，如果存在消息头和消息体， 消息头必须完成填充（例如 128byte），Scattering Reads 才能正常工作。</p><h3 id="_1-5-2-gathering-writes" tabindex="-1"><a class="header-anchor" href="#_1-5-2-gathering-writes" aria-hidden="true">#</a> <strong>1.5.2 Gathering Writes</strong></h3><p>Gathering Writes 是指数据从多个 buffer 写入到同一个 channel。如下图描述：</p><p><img src="`+o+`" alt="image-20230225180453937"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ByteBuffer</span> header <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token class-name">ByteBuffer</span> body <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token comment">//write data into buffers </span>
<span class="token class-name">ByteBuffer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bufferArray <span class="token operator">=</span> <span class="token punctuation">{</span> header<span class="token punctuation">,</span> body <span class="token punctuation">}</span><span class="token punctuation">;</span> 
channel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bufferArray<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>buffers 数组是 write()方法的入参，write()方法会按照 buffer 在数组中的顺序，将数 据写入到 channel，注意只有 position 和 limit 之间的数据才会被写入。因此，如果 一个 buffer 的容量为 128byte，但是仅仅包含 58byte 的数据，那么这 58byte 的数 据将被写入到 channel 中。因此与 Scattering Reads 相反，Gathering Writes 能较 好的处理动态消息。</p>`,85),i=[l];function u(r,k){return a(),s("div",null,i)}const f=n(c,[["render",u],["__file","第2章_Java NIO（Channel）.html.vue"]]);export{f as default};
