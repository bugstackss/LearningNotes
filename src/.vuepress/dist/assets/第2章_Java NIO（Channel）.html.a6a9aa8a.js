const e=JSON.parse('{"key":"v-2751b89b","path":"/notes/javacore/nio/%E7%AC%AC2%E7%AB%A0_Java%20NIO%EF%BC%88Channel%EF%BC%89.html","title":"二、Java NIO（Channel）","lang":"zh-CN","frontmatter":{"title":"二、Java NIO（Channel）","category":["IO"],"tag":["NIO","IO","java"],"sticky":false,"star":false,"article":true,"timeline":true,"description":"1.1 Channel 概述 Java NIO 的通道类似流，但又有些不同： 既可以从通道中读取数据，又可以写数据到通道。但流的读写通常是单向的。 ; 通道可以异步地读写。 ; 通道中的数据总是要先读到一个 Buffer，或者总是要从一个 Buffer 中写入。 ; 正如上面所说，从通道读取数据到缓冲区，从缓冲区写入数据到通道。如下图所示： image...","head":[["meta",{"property":"og:url","content":"https://Ragnarokoo.github.io/LearningNotes/notes/javacore/nio/%E7%AC%AC2%E7%AB%A0_Java%20NIO%EF%BC%88Channel%EF%BC%89.html"}],["meta",{"property":"og:site_name","content":"📚全栈开发学习指南"}],["meta",{"property":"og:title","content":"二、Java NIO（Channel）"}],["meta",{"property":"og:description","content":"1.1 Channel 概述 Java NIO 的通道类似流，但又有些不同： 既可以从通道中读取数据，又可以写数据到通道。但流的读写通常是单向的。 ; 通道可以异步地读写。 ; 通道中的数据总是要先读到一个 Buffer，或者总是要从一个 Buffer 中写入。 ; 正如上面所说，从通道读取数据到缓冲区，从缓冲区写入数据到通道。如下图所示： image..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://Ragnarokoo.github.io/LearningNotes/"}],["meta",{"property":"og:updated_time","content":"2023-05-31T09:16:41.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"二、Java NIO（Channel）"}],["meta",{"property":"article:tag","content":"NIO"}],["meta",{"property":"article:tag","content":"IO"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:modified_time","content":"2023-05-31T09:16:41.000Z"}]]},"excerpt":"","headers":[{"level":2,"title":"1.1 Channel 概述","slug":"_1-1-channel-概述","link":"#_1-1-channel-概述","children":[]},{"level":2,"title":"1.2 Channel 实现","slug":"_1-2-channel-实现","link":"#_1-2-channel-实现","children":[]},{"level":2,"title":"1.3 FileChannel 介绍和示例","slug":"_1-3-filechannel-介绍和示例","link":"#_1-3-filechannel-介绍和示例","children":[]},{"level":2,"title":"1.4 FileChannel 操作详解","slug":"_1-4-filechannel-操作详解","link":"#_1-4-filechannel-操作详解","children":[{"level":3,"title":"1.4.1 打开 FileChannel","slug":"_1-4-1-打开-filechannel","link":"#_1-4-1-打开-filechannel","children":[]},{"level":3,"title":"1.4.2 从 FileChannel 读取数据","slug":"_1-4-2-从-filechannel-读取数据","link":"#_1-4-2-从-filechannel-读取数据","children":[]},{"level":3,"title":"1.4.3 向 FileChannel 写数据","slug":"_1-4-3-向-filechannel-写数据","link":"#_1-4-3-向-filechannel-写数据","children":[]},{"level":3,"title":"1.4.4 关闭 FileChannel","slug":"_1-4-4-关闭-filechannel","link":"#_1-4-4-关闭-filechannel","children":[]},{"level":3,"title":"1.4.5 FileChannel 的 position 方法","slug":"_1-4-5-filechannel-的-position-方法","link":"#_1-4-5-filechannel-的-position-方法","children":[]},{"level":3,"title":"1.4.6 FileChannel 的 size 方法","slug":"_1-4-6-filechannel-的-size-方法","link":"#_1-4-6-filechannel-的-size-方法","children":[]},{"level":3,"title":"1.4.7 FileChannel 的 truncate 方法","slug":"_1-4-7-filechannel-的-truncate-方法","link":"#_1-4-7-filechannel-的-truncate-方法","children":[]},{"level":3,"title":"1.4.8 FileChannel 的 force 方法","slug":"_1-4-8-filechannel-的-force-方法","link":"#_1-4-8-filechannel-的-force-方法","children":[]},{"level":3,"title":"1.4.9 FileChannel 的 transferTo 和 transferFrom 方法","slug":"_1-4-9-filechannel-的-transferto-和-transferfrom-方法","link":"#_1-4-9-filechannel-的-transferto-和-transferfrom-方法","children":[]}]},{"level":2,"title":"1.5 Scatter/Gather","slug":"_1-5-scatter-gather","link":"#_1-5-scatter-gather","children":[{"level":3,"title":"1.5.1 Scattering Reads","slug":"_1-5-1-scattering-reads","link":"#_1-5-1-scattering-reads","children":[]},{"level":3,"title":"1.5.2 Gathering Writes","slug":"_1-5-2-gathering-writes","link":"#_1-5-2-gathering-writes","children":[]}]}],"git":{"createdTime":1685524601000,"updatedTime":1685524601000,"contributors":[{"name":"kirito","email":"2724964601@qq.com","commits":1}]},"readingTime":{"minutes":7.78,"words":2334},"filePathRelative":"notes/javacore/nio/第2章_Java NIO（Channel）.md","localizedDate":"2023年5月31日"}');export{e as data};
