import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as a,c as s,a as e}from"./app.9b10ba0a.js";const t="/assets/image-20210922203923024.24c37d71.png",p="/assets/image-20210922204024363.e7a3c550.png",i="/assets/image-20210922204027690.547800d6.png",l="/assets/image-20210922204126528.dae14b84.png",o="/assets/image-20210922204301539.8cbee99f.png",c="/assets/image-20210922204320477.7136f50d.png",u="/assets/image-20210922204329642.8388f413.png",d="/assets/image-20210922204339917.15e07bcb.png",r="/assets/image-20210922204349150.a6fd9195.png",k="/assets/image-20210922204417963.2ca8234b.png",v="/assets/image-20210922204432078.406f0050.png",m="/assets/image-20210922204533258.5cb36a93.png",b="/assets/image-20210922204820482.b92fae2c.png",g="/assets/image-20210922205210267.b3ebb654.png",h="/assets/image-20210922205402552.0b901c73.png",_="/assets/image-20210922205426175.e3e26712.png",f="/assets/image-20210922205521467.a624a2ce.png",y="/assets/image-20210922205631332.cc79f114.png",w="/assets/image-20210922205704525.5dd3008a.png",x="/assets/image-20210922205718122.2a4db146.png",j="/assets/image-20210922205752322.ae5bd0f8.png",S="/assets/image-20210922205902093.40095efc.png",q="/assets/image-20210922210024000.56592116.png",D="/assets/image-20210922210055834.4ea3ef45.png",J="/assets/image-20210922210258725.9639eca4.png",L="/assets/image-20210922210741247.251b53d5.png",M="/assets/image-20210922210815931.f953148c.png",T="/assets/image-20210922211112799.aeaa4978.png",V="/assets/image-20210922211216698.47329344.png",N="/assets/image-20210922211234267.b4c520a2.png",C="/assets/image-20210922211247865.68049ae6.png",U="/assets/image-20210922211259274.bd9f6b80.png",E="/assets/image-20210922211344635.a717afe5.png",I="/assets/image-20210922211354764.ef813f9a.png",O="/assets/image-20210922211419405.7f6d1a2b.png",z="/assets/image-20210922211436123.cf5b2ca6.png",P="/assets/image-20210922211447326.50e41ea8.png",A="/assets/image-20210922211501481.43646ccb.png",B="/assets/image-20210922211532860.fd7e8dca.png",H={},K=e('<h2 id="十、volatile与java内存模型" tabindex="-1"><a class="header-anchor" href="#十、volatile与java内存模型" aria-hidden="true">#</a> 十、volatile与Java内存模型</h2><h3 id="_1、被volatile修改的变量有2大特点" tabindex="-1"><a class="header-anchor" href="#_1、被volatile修改的变量有2大特点" aria-hidden="true">#</a> 1、被volatile修改的变量有2大特点</h3><ul><li>可见性</li><li>有序性</li></ul><h3 id="_2、volatile的内存语义" tabindex="-1"><a class="header-anchor" href="#_2、volatile的内存语义" aria-hidden="true">#</a> 2、volatile的内存语义</h3><ul><li>当写一个volatile变量时，JMM会把该线程对应的本地内存中的共享变量值立即刷新回主内存中。</li><li>当读一个volatile变量时，JMM会把该线程对应的本地内存设置为无效，直接从主内存中读取共享变量</li><li>所以volatile的写内存语义是直接刷新到主内存中，读的内存语义是直接从主内存中读取。</li></ul><h3 id="_3、内存屏障-重点" tabindex="-1"><a class="header-anchor" href="#_3、内存屏障-重点" aria-hidden="true">#</a> 3、内存屏障（重点）</h3><h4 id="_1、生活case" tabindex="-1"><a class="header-anchor" href="#_1、生活case" aria-hidden="true">#</a> 1、生活case</h4><ul><li>没有管控，顺序难保</li><li>设定规则，禁止乱序</li></ul><p><img src="'+t+'" alt="image20210922203923024"></p><p>上海南京路步行街武警“人墙”当红灯</p><p><img src="'+p+'" alt="image20210922204024363"></p><p><img src="'+i+'" alt="image20210922204027690"></p><h4 id="_2、内存屏障是什么" tabindex="-1"><a class="header-anchor" href="#_2、内存屏障是什么" aria-hidden="true">#</a> 2、内存屏障是什么</h4><p>内存屏障（也称内存栅栏，内存栅障，屏障指令等，是一类同步屏障指令，是CPU或编译器在对内存随机访问的操作中的一个同步点，使得此点之前的所有读写操作都执行后才可以开始执行此点之后的操作），避免代码重排序。内存屏障其实就是一种JVM指令，Java内存模型的重排规则会要求Java编译器在生成JVM指令时插入特定的内存屏障指令，通过这些内存屏障指令，volatile实现了Java内存模型中的可见性和有序性，但volatile无法保证原子性。</p><p>内存屏障之前的所有写操作都要回写到主内存，内存屏障之后的所有读操作都能获得内存屏障之前的所有写操作的最新结果(实现了可见性)。</p><p><img src="'+l+'" alt="image20210922204126528"></p><p>因此重排序时，不允许把内存屏障之后的指令重排序到内存屏障之前。 一句话：对一个 volatile 域的写, happens-before 于任意后续对这个 volatile 域的读，也叫写后读。</p><h4 id="_3、volatile凭什么可以保证可见性和有序性" tabindex="-1"><a class="header-anchor" href="#_3、volatile凭什么可以保证可见性和有序性" aria-hidden="true">#</a> 3、volatile凭什么可以保证可见性和有序性？？？</h4><p>内存屏障 (Memory Barriers / Fences)</p><h4 id="_4、jvm中提供了四类内存屏障指令" tabindex="-1"><a class="header-anchor" href="#_4、jvm中提供了四类内存屏障指令" aria-hidden="true">#</a> 4、JVM中提供了四类内存屏障指令</h4><p>Unsafe.class</p><p><img src="'+o+'" alt="image20210922204301539"></p><p>Unsafe.java</p><p><img src="'+c+'" alt="image20210922204320477"></p><p>Unsafe.cpp</p><p><img src="'+u+'" alt="image20210922204329642"></p><p>OrderAccess.hpp</p><p><img src="'+d+'" alt="image20210922204339917"></p><p>orderAccess_linux_x86.inline.hpp</p><p><img src="'+r+'" alt="image20210922204349150"></p><h4 id="_5、四大屏障分别是什么意思" tabindex="-1"><a class="header-anchor" href="#_5、四大屏障分别是什么意思" aria-hidden="true">#</a> 5、四大屏障分别是什么意思</h4><p><img src="'+k+'" alt="image20210922204417963"></p><p>orderAccess_linux_x86.inline.hpp</p><p><img src="'+v+'" alt="image20210922204432078"></p><h4 id="_6、happens-before-之-volatile-变量规则" tabindex="-1"><a class="header-anchor" href="#_6、happens-before-之-volatile-变量规则" aria-hidden="true">#</a> 6、happens-before 之 volatile 变量规则</h4><p><img src="'+m+'" alt="image20210922204533258"></p><table><thead><tr><th>当第一个操作为volatile读时，不论第二个操作是什么，都不能重排序。这个操作保证了volatile读之后的操作不会被重排到volatile读之前。</th></tr></thead><tbody><tr><td>当第二个操作为volatile写时，不论第一个操作是什么，都不能重排序。这个操作保证了volatile写之前的操作不会被重排到volatile写之后。</td></tr><tr><td>当第一个操作为volatile写时，第二个操作为volatile读时，不能重排。</td></tr></tbody></table><h4 id="_7、jmm-就将内存屏障插入策略分为-4-种" tabindex="-1"><a class="header-anchor" href="#_7、jmm-就将内存屏障插入策略分为-4-种" aria-hidden="true">#</a> 7、JMM 就将内存屏障插⼊策略分为 4 种</h4><ul><li>写 <ul><li>在每个 volatile 写操作的前⾯插⼊⼀个 StoreStore 屏障</li><li>在每个 volatile 写操作的后⾯插⼊⼀个 StoreLoad 屏障</li></ul></li><li>读 <ul><li>在每个 volatile 读操作的后⾯插⼊⼀个 LoadLoad 屏障</li><li>在每个 volatile 读操作的后⾯插⼊⼀个 LoadStore 屏障</li></ul></li></ul><p><img src="'+b+`" alt="image20210922204820482"></p><h3 id="_4、volatile特性" tabindex="-1"><a class="header-anchor" href="#_4、volatile特性" aria-hidden="true">#</a> 4、volatile特性</h3><h4 id="_1、保证可见性" tabindex="-1"><a class="header-anchor" href="#_1、保证可见性" aria-hidden="true">#</a> 1、保证可见性</h4><p>保证不同线程对这个变量进行操作时的可见性，即变量一旦改变所有线程立即可见</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VolatileSeeDemo</span>
<span class="token punctuation">{</span>
    <span class="token keyword">static</span>          <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>       <span class="token comment">//不加volatile，没有可见性</span>
    <span class="token comment">//static volatile boolean flag = true;       //加了volatile，保证可见性</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;\\t come in&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>

            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;\\t flag被修改为false,退出.....&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">&quot;t1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//暂停2秒钟后让main线程修改flag值</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

        flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;main线程修改完成&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>不加volatile，没有可见性，程序无法停止</li><li>加了volatile，保证可见性，程序可以停止</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>线程t1中为何看不到被主线程main修改为false的flag的值？

问题可能:
1. 主线程修改了flag之后没有将其刷新到主内存，所以t1线程看不到。
2. 主线程将flag刷新到了主内存，但是t1一直读取的是自己工作内存中flag的值，没有去主内存中更新获取flag最新的值。

我们的诉求：
1.线程中修改了工作内存中的副本之后，立即将其刷新到主内存；
2.工作内存中每次读取共享变量时，都去主内存中重新读取，然后拷贝到工作内存。

解决：
使用volatile修饰共享变量，就可以达到上面的效果，被volatile修改的变量有以下特点：
1. 线程中读取的时候，每次读取都会去主内存中读取共享变量最新的值，然后将其复制到工作内存
2. 线程中修改了工作内存中变量的副本，修改之后会立即刷新到主内存
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_1、volatile变量的读写过程" tabindex="-1"><a class="header-anchor" href="#_1、volatile变量的读写过程" aria-hidden="true">#</a> 1、volatile变量的读写过程</h5><p>Java内存模型中定义的8种工作内存与主内存之间的原子操作 read(读取)→load(加载)→use(使用)→assign(赋值)→store(存储)→write(写入)→lock(锁定)→unlock(解锁)</p><p><img src="`+g+`" alt="image20210922205210267"></p><p>read: 作用于主内存，将变量的值从主内存传输到工作内存，主内存到工作内存</p><p>load: 作用于工作内存，将read从主内存传输的变量值放入工作内存变量副本中，即数据加载</p><p>use: 作用于工作内存，将工作内存变量副本的值传递给执行引擎，每当JVM遇到需要该变量的字节码指令时会执行该操作</p><p>assign: 作用于工作内存，将从执行引擎接收到的值赋值给工作内存变量，每当JVM遇到一个给变量赋值字节码指令时会执行该操作</p><p>store: 作用于工作内存，将赋值完毕的工作变量的值写回给主内存</p><p>write: 作用于主内存，将store传输过来的变量值赋值给主内存中的变量 由于上述只能保证单条指令的原子性，针对多条指令的组合性原子保证，没有大面积加锁，所以，</p><p>JVM提供了另外两个原子指令：</p><p>lock: 作用于主内存，将一个变量标记为一个线程独占的状态，只是写时候加锁，就只是锁了写变量的过程。</p><p>unlock: 作用于主内存，把一个处于锁定状态的变量释放，然后才能被其他线程占用</p><h4 id="_2、没有原子性" tabindex="-1"><a class="header-anchor" href="#_2、没有原子性" aria-hidden="true">#</a> 2、没有原子性</h4><h5 id="_1、volatile变量的复合操作-如i-不具有原子性" tabindex="-1"><a class="header-anchor" href="#_1、volatile变量的复合操作-如i-不具有原子性" aria-hidden="true">#</a> 1、volatile变量的复合操作(如i++)不具有原子性</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">MyNumber</span>
<span class="token punctuation">{</span>
    <span class="token keyword">volatile</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addPlusPlus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        number<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VolatileNoAtomicDemo</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">MyNumber</span> myNumber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">1000</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    myNumber<span class="token punctuation">.</span><span class="token function">addPlusPlus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//暂停几秒钟线程</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\t&quot;</span> <span class="token operator">+</span> myNumber<span class="token punctuation">.</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从i++的字节码角度说明</p><p><img src="`+h+`" alt="image20210922205402552"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>原子性指的是一个操作是不可中断的，即使是在多线程环境下，一个操作一旦开始就不会被其他线程影响。
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
        i<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//不具备原子性，该操作是先读取值，然后写回一个新值，相当于原来的值加上1，分3步完成</span>
 <span class="token punctuation">}</span>
如果第二个线程在第一个线程读取旧值和写回新值期间读取i的域值，那么第二个线程就会与第一个线程一起看到同一个值，
并执行相同值的加<span class="token number">1</span>操作，这也就造成了线程安全失败，因此对于add方法必须使用<span class="token keyword">synchronized</span>修饰，以便保证线程安全<span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+_+`" alt="image20210922205426175"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>多线程环境下，<span class="token string">&quot;数据计算&quot;</span>和<span class="token string">&quot;数据赋值&quot;</span>操作可能多次出现，即操作非原子。若数据在加载之后，若主内存count变量发生修改之后，由于线程工作内存中的值在此前已经加载，从而不会对变更操作做出相应变化，即私有内存和公共内存中变量不同步，进而导致数据不一致
对于<span class="token keyword">volatile</span>变量，<span class="token constant">JVM</span>只是保证从主内存加载到线程工作内存的值是最新的，也就是数据加载时是最新的。
由此可见<span class="token keyword">volatile</span>解决的是变量读时的可见性问题，但无法保证原子性，对于多线程修改共享变量的场景必须使用加锁同步
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2、读取赋值一个普通变量的情况" tabindex="-1"><a class="header-anchor" href="#_2、读取赋值一个普通变量的情况" aria-hidden="true">#</a> 2、读取赋值一个普通变量的情况</h5><p>当线程1对主内存对象发起read操作到write操作第一套流程的时间里，线程2随时都有可能对这个主内存对象发起第二套操作</p><p><img src="`+f+`" alt="image20210922205521467"></p><h5 id="_3、既然一修改就是可见-为什么还不能保证原子性" tabindex="-1"><a class="header-anchor" href="#_3、既然一修改就是可见-为什么还不能保证原子性" aria-hidden="true">#</a> 3、既然一修改就是可见，为什么还不能保证原子性？</h5><p>volatile主要是对其中部分指令做了处理</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>要<span class="token function">use</span><span class="token punctuation">(</span>使用<span class="token punctuation">)</span>一个变量的时候必需<span class="token function">load</span><span class="token punctuation">(</span>载入），要载入的时候必需从主内存<span class="token function">read</span><span class="token punctuation">(</span>读取）这样就解决了读的可见性。 
写操作是把assign和store做了关联<span class="token punctuation">(</span>在<span class="token function">assign</span><span class="token punctuation">(</span>赋值<span class="token punctuation">)</span>后必需<span class="token function">store</span><span class="token punctuation">(</span>存储<span class="token punctuation">)</span><span class="token punctuation">)</span>。<span class="token function">store</span><span class="token punctuation">(</span>存储<span class="token punctuation">)</span>后<span class="token function">write</span><span class="token punctuation">(</span>写入<span class="token punctuation">)</span>。
也就是做到了给一个变量赋值的时候一串关联指令直接把变量值写到主内存。
就这样通过用的时候直接从主内存取，在赋值到直接写回主内存做到了内存可见性。注意蓝色框框的间隙。。。。。。<span class="token function">o</span><span class="token punctuation">(</span>╥﹏╥<span class="token punctuation">)</span>o
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+y+'" alt="image20210922205631332"></p><h5 id="_4、读取赋值一个volatile变量的情况" tabindex="-1"><a class="header-anchor" href="#_4、读取赋值一个volatile变量的情况" aria-hidden="true">#</a> 4、读取赋值一个volatile变量的情况</h5><p><img src="'+w+`" alt="image20210922205704525"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> read<span class="token operator">-</span>load<span class="token operator">-</span>use 和 assign<span class="token operator">-</span>store<span class="token operator">-</span>write 成为了两个不可分割的原子操作，但是在use和assign之间依然有极小的一段真空期，有可能变量会被其他线程读取，导致写丢失一次<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">o</span><span class="token punctuation">(</span>╥﹏╥<span class="token punctuation">)</span>o
但是无论在哪一个时间点主内存的变量和任一工作内存的变量的值都是相等的。这个特性就导致了<span class="token keyword">volatile</span>变量不适合参与到依赖当前值的运算，如i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">;</span>之类的那么依靠可见性的特点<span class="token keyword">volatile</span>可以用在哪些地方呢？ 通常<span class="token keyword">volatile</span>用做保存某个状态的<span class="token keyword">boolean</span>值or <span class="token keyword">int</span>值。
《深入理解<span class="token class-name">Java</span>虚拟机》提到：
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+x+'" alt="image20210922205718122"></p><h5 id="_5、面试回答" tabindex="-1"><a class="header-anchor" href="#_5、面试回答" aria-hidden="true">#</a> 5、面试回答</h5><p>JVM的字节码，i++分成三步，间隙期不同步非原子操作(i++)</p><p><img src="'+j+`" alt="image20210922205752322"></p><h4 id="_3、指令禁重排" tabindex="-1"><a class="header-anchor" href="#_3、指令禁重排" aria-hidden="true">#</a> 3、指令禁重排</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>重排序
重排序是指编译器和处理器为了优化程序性能而对指令序列进行重新排序的一种手段，有时候会改变程序语句的先后顺序
不存在数据依赖关系，可以重排序；
存在数据依赖关系，禁止重排序
但重排后的指令绝对不能改变原有的串行语义！这点在并发设计中必须要重点考虑！

重排序的分类和执行流程
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+S+`" alt="image20210922205902093"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>编译器优化的重排序： 编译器在不改变单线程串行语义的前提下，可以重新调整指令的执行顺序
指令级并行的重排序： 处理器使用指令级并行技术来讲多条指令重叠执行，若不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序
内存系统的重排序： 由于处理器使用缓存和读<span class="token operator">/</span>写缓冲区，这使得加载和存储操作看上去可能是乱序执行

数据依赖性：若两个操作访问同一变量，且这两个操作中有一个为写操作，此时两操作间就存在数据依赖性。

案例 ：
不存在数据依赖关系，可以重排序<span class="token operator">==</span><span class="token operator">=</span><span class="token operator">&gt;</span> 重排序<span class="token constant">OK</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>重排前</th><th>重排后</th></tr></thead><tbody><tr><td>int a = 1; //1 int b = 20; //2 int c = a + b; //3</td><td>int b = 20; //1 int a = 1; //2 int c = a + b; //3</td></tr><tr><td>结论：编译器调整了语句的顺序，但是不影响程序的最终结果。</td><td>重排序OK</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>存在数据依赖关系，禁止重排序<span class="token operator">==</span><span class="token operator">=</span><span class="token operator">&gt;</span> 重排序发生，会导致程序运行结果不同。
编译器和处理器在重排序时，会遵守数据依赖性，不会改变存在依赖关系的两个操作的执行<span class="token punctuation">,</span>但不同处理器和不同线程之间的数据性不会被编译器和处理器考虑，其只会作用于单处理器和单线程环境，下面三种情况，只要重排序两个操作的执行顺序，程序的执行结果就会被改变。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+q+'" alt="image20210922210024000"></p><h5 id="_1、volatile的底层实现是通过内存屏障" tabindex="-1"><a class="header-anchor" href="#_1、volatile的底层实现是通过内存屏障" aria-hidden="true">#</a> 1、volatile的底层实现是通过内存屏障</h5><p>volatile有关的禁止指令重排的行为</p><p><img src="'+D+`" alt="image20210922210055834"></p><table><thead><tr><th>当第一个操作为volatile读时，不论第二个操作是什么，都不能重排序。这个操作保证了volatile读之后的操作不会被重排到volatile读之前。</th></tr></thead><tbody><tr><td>当第二个操作为volatile写时，不论第一个操作是什么，都不能重排序。这个操作保证了volatile写之前的操作不会被重排到volatile写之后。</td></tr><tr><td>当第一个操作为volatile写时，第二个操作为volatile读时，不能重排。</td></tr></tbody></table><p>四大屏障的插入情况</p><ul><li>在每一个volatile写操作前面插入一个StoreStore屏障 <ul><li>StoreStore屏障可以保证在volatile写之前，其前面的所有普通写操作都已经刷新到主内存中。</li></ul></li><li>在每一个volatile写操作后面插入一个StoreLoad屏障 <ul><li>StoreLoad屏障的作用是避免volatile写与后面可能有的volatile读/写操作重排序</li></ul></li><li>在每一个volatile读操作后面插入一个LoadLoad屏障 <ul><li>LoadLoad屏障用来禁止处理器把上面的volatile读与下面的普通读重排序。</li></ul></li><li>在每一个volatile读操作后面插入一个LoadStore屏障 <ul><li>LoadStore屏障用来禁止处理器把上面的volatile读与下面的普通写重排序。</li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//模拟一个单线程，什么顺序读？什么顺序写？</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VolatileTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;---i = &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+J+`" alt="image20210922210258725"></p><h4 id="_4、如何正确使用volatile" tabindex="-1"><a class="header-anchor" href="#_4、如何正确使用volatile" aria-hidden="true">#</a> 4、如何正确使用volatile</h4><h5 id="_1、单一赋值可以-but含复合运算赋值不可以-i-之类" tabindex="-1"><a class="header-anchor" href="#_1、单一赋值可以-but含复合运算赋值不可以-i-之类" aria-hidden="true">#</a> 1、单一赋值可以，but含复合运算赋值不可以(i++之类)</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">volatile</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span>
<span class="token keyword">volatile</span> <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2、状态标志-判断业务是否结束" tabindex="-1"><a class="header-anchor" href="#_2、状态标志-判断业务是否结束" aria-hidden="true">#</a> 2、状态标志，判断业务是否结束</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 *
 * 使用：作为一个布尔状态标志，用于指示发生了一个重要的一次性事件，例如完成初始化或任务结束
 * 理由：状态标志并不依赖于程序内任何其他状态，且通常只有一种状态转换
 * 例子：判断业务是否结束
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UseVolatileDemo</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">//do something......</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">&quot;t1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//暂停几秒钟线程</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2L</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">&quot;t2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3、开销较低的读-写锁策略" tabindex="-1"><a class="header-anchor" href="#_3、开销较低的读-写锁策略" aria-hidden="true">#</a> 3、开销较低的读，写锁策略</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UseVolatileDemo</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 使用：当读远多于写，结合使用内部锁和 volatile 变量来减少同步的开销
     * 理由：利用volatile保证读取操作的可见性；利用synchronized保证复合操作的原子性
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Counter</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> value<span class="token punctuation">;</span>   <span class="token comment">//利用volatile保证读取操作的可见性</span>
              <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">int</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> value<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//利用synchronized保证复合操作的原子性</span>
               <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4、dcl双端锁的发布" tabindex="-1"><a class="header-anchor" href="#_4、dcl双端锁的发布" aria-hidden="true">#</a> 4、DCL双端锁的发布</h5><p>问题代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SafeDoubleCheckSingleton</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SafeDoubleCheckSingleton</span> singleton<span class="token punctuation">;</span>
    <span class="token comment">//私有化构造方法</span>
    <span class="token keyword">private</span> <span class="token class-name">SafeDoubleCheckSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//双重锁设计</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SafeDoubleCheckSingleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>singleton <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//1.多线程并发创建对象时，会通过加锁保证只有一个线程能创建对象</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">SafeDoubleCheckSingleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>singleton <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token comment">//隐患：多线程环境下，由于重排序，该对象可能还未完成初始化就被其他线程读取</span>
                    singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SafeDoubleCheckSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//2.对象创建完毕，执行getInstance()将不需要获取锁，直接返回创建对象</span>
        <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>单线程看问题代码</strong></p><p>单线程环境下(或者说正常情况下)，在&quot;问题代码处&quot;，会执行如下操作，保证能获取到已完成初始化的实例</p><p><img src="`+L+'" alt="image20210922210741247"></p><p>由于存在指令重排序......</p><p><strong>多线程看问题代码</strong></p><p>隐患：多线程环境下，在&quot;问题代码处&quot;，会执行如下操作，由于重排序导致2,3乱序，后果就是其他线程得到的是null而不是完成初始化的对象</p><p><img src="'+M+`" alt="image20210922210815931"></p><p><strong>解决01</strong></p><p>加volatile修饰</p><p>面试题，反周志明老师的案例，你还有不加volatile的方法吗</p><p><strong>解决02</strong> -- 采用静态内部类的方式实现</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//现在比较好的做法就是采用静态内部内的方式实现</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonDemo</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">SingletonDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingletonDemoHandler</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SingletonDemo</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SingletonDemo</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">SingletonDemoHandler</span><span class="token punctuation">.</span>instance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5、最后的小总结" tabindex="-1"><a class="header-anchor" href="#_5、最后的小总结" aria-hidden="true">#</a> 5、最后的小总结</h4><h5 id="_1、内存屏障是什么" tabindex="-1"><a class="header-anchor" href="#_1、内存屏障是什么" aria-hidden="true">#</a> 1、内存屏障是什么</h5><p><img src="`+T+'" alt="image20210922211112799"></p><h5 id="_2、内存屏障能干嘛" tabindex="-1"><a class="header-anchor" href="#_2、内存屏障能干嘛" aria-hidden="true">#</a> 2、内存屏障能干嘛</h5><ul><li>阻止屏障两边的指令重排序</li><li>写数据时加入屏障，强制将线程私有工作内存的数据刷回主物理内存</li><li>读数据时加入屏障，线程私有工作内存的数据失效，重新到主物理内存中获取最新数据</li></ul><h5 id="_3、内存屏障四大指令" tabindex="-1"><a class="header-anchor" href="#_3、内存屏障四大指令" aria-hidden="true">#</a> 3、内存屏障四大指令</h5><ul><li>在每一个volatile写操作前面插入一个StoreStore屏障 <ul><li><img src="'+V+'" alt="image20210922211216698"></li></ul></li><li>在每一个volatile写操作后面插入一个StoreLoad屏障 <ul><li><img src="'+N+'" alt="image20210922211234267"></li></ul></li><li>在每一个volatile读操作后面插入一个LoadLoad屏障 <ul><li><img src="'+C+'" alt="image20210922211247865"></li></ul></li><li>在每一个volatile读操作后面插入一个LoadStore屏障 <ul><li><img src="'+U+'" alt="image20210922211259274"></li></ul></li></ul><h5 id="_4、凭什么我们java写了一个volatile关键字系统底层加入内存屏障-两者关系怎么勾搭上的" tabindex="-1"><a class="header-anchor" href="#_4、凭什么我们java写了一个volatile关键字系统底层加入内存屏障-两者关系怎么勾搭上的" aria-hidden="true">#</a> 4、凭什么我们java写了一个volatile关键字系统底层加入内存屏障？两者关系怎么勾搭上的?</h5><p>字节码层面</p><p><img src="'+E+'" alt="image20210922211344635"></p><p><img src="'+I+'" alt="image20210922211354764"></p><h5 id="_5、volatile可见性" tabindex="-1"><a class="header-anchor" href="#_5、volatile可见性" aria-hidden="true">#</a> 5、volatile可见性</h5><p><img src="'+O+'" alt="image20210922211419405"></p><h5 id="_6、volatile禁重排" tabindex="-1"><a class="header-anchor" href="#_6、volatile禁重排" aria-hidden="true">#</a> 6、volatile禁重排</h5><p>写指令</p><p><img src="'+z+'" alt="image20210922211436123"></p><p>读指令</p><p><img src="'+P+'" alt="image20210922211447326"></p><h5 id="_7、对比java-util-concurrent-locks-lock来理解" tabindex="-1"><a class="header-anchor" href="#_7、对比java-util-concurrent-locks-lock来理解" aria-hidden="true">#</a> 7、对比java.util.concurrent.locks.Lock来理解</h5><p><img src="'+A+'" alt="image20210922211501481"></p><h5 id="_8、一句话总结" tabindex="-1"><a class="header-anchor" href="#_8、一句话总结" aria-hidden="true">#</a> 8、一句话总结</h5><p><img src="'+B+'" alt="image20210922211532860"></p>',139),F=[K];function G(Q,R){return a(),s("div",null,F)}const Y=n(H,[["render",G],["__file","十、volatile与Java内存模型.html.vue"]]);export{Y as default};
