import{_ as l}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as r,c as t,d as e,e as i,b as n,a as s,r as d}from"./app.9b10ba0a.js";const p="/assets/2023-04-01-08-42-44-image.d1c6b6e1.png",c="/assets/2023-04-01-08-42-55-image.82f53cf6.png",o="/assets/2023-04-01-08-43-50-image.35328d8a.png",m="/assets/2023-04-01-11-02-17-image.94fd2046.png",u="/assets/2023-04-01-08-52-31-image.20fac418.png",b="/assets/2023-04-01-08-53-00-image.f8e86061.png",v="/assets/2023-04-01-08-54-03-image.e9a7bfbf.png",g="/assets/2023-04-01-08-54-14-image.6d39adb7.png",h="/assets/2023-04-01-08-54-42-image.7c91d250.png",_="/assets/2023-04-01-08-55-07-image.4e7d699a.png",k="/assets/2023-04-01-08-55-18-image.cdeb3fd9.png",f="/assets/2023-04-01-08-57-51-image.f6bbabc5.png",y="/assets/2023-04-01-08-59-17-image.a1476f12.png",q="/assets/2023-04-01-09-05-57-image.7e014a8b.png",x="/assets/2023-04-01-09-05-40-image.c58c614d.png",C="/assets/2023-04-01-09-06-57-image.ff62ca16.png",R="/assets/2023-04-01-09-08-08-image.4b73660e.png",H="/assets/2023-04-01-09-09-00-image.3807d81f.png",S="/assets/2023-04-01-09-09-50-image.19615e44.png",I="/assets/2023-04-01-09-11-01-image.442cae43.png",N="/assets/2023-04-01-09-11-13-image.dfd373fc.png",L="/assets/2023-04-01-09-12-21-image.f9999126.png",O="/assets/2023-04-01-09-12-29-image.69b0f824.png",T="/assets/2023-04-01-09-14-55-image.e9d72c2a.png",E="/assets/2023-04-01-09-15-23-image.dd51c218.png",P="/assets/2023-04-01-09-15-42-image.e27d3b0d.png",A="/assets/2023-04-01-09-16-04-image.b3c2fce4.png",B="/assets/2023-04-01-09-16-32-image.d8b3f67b.png",D="/assets/2023-04-01-09-17-39-image.439a0c0c.png",z="/assets/2023-04-01-12-29-56-image.fbd49990.png",U="/assets/2023-04-01-12-31-01-image.e87de4f5.png",K="/assets/2023-04-01-12-32-53-image.41d40ba3.png",V="/assets/2023-04-01-12-44-02-image.95ade302.png",X="/assets/2023-04-01-12-55-38-image.304571f6.png",j="/assets/2023-04-01-13-09-39-image.3e6865f4.png",Y="/assets/2023-04-01-13-10-58-image.cb893372.png",M="/assets/2023-04-01-09-56-59-image.5884052a.png",F="/assets/2023-04-01-09-57-14-image.a15f93e0.png",w="/assets/2023-04-01-09-57-49-image.1c8cf89c.png",G="/assets/2023-04-01-09-59-41-image.fc6fa3a9.png",J="/assets/2023-04-01-09-59-58-image.fa6c2e09.png",Q="/assets/2023-04-01-10-00-24-image.dbbeb86c.png",W="/assets/2023-04-01-10-00-47-image.51b7f8fc.png",Z="/assets/2023-04-01-10-01-12-image.40f77163.png",$="/assets/2023-04-01-10-02-13-image.acc3ad7f.png",ee="/assets/2023-04-01-10-02-39-image.32661438.png",se="/assets/2023-04-01-10-03-43-image.71bbbcc5.png",ae="/assets/2023-04-01-10-04-09-image.b420f13d.png",ie="/assets/2023-04-01-10-05-06-image.16051907.png",ne="/assets/2023-04-01-10-09-20-image.6ce39875.png",le="/assets/2023-04-01-10-10-02-image.8cb3debb.png",re="/assets/2023-04-01-10-10-44-image.e3bb8e9c.png",te="/assets/2023-04-01-10-12-21-image.0a55f2ab.png",de="/assets/2023-04-01-10-12-44-image.d5886fa3.png",pe="/assets/2023-04-01-10-12-55-image.af4989c8.png",ce="/assets/2023-04-01-10-15-29-image.ecedc63a.png",oe="/assets/2023-04-01-10-17-34-image.dcc4be81.png",me="/assets/2023-04-01-10-22-10-image.9a5060e9.png",ue="/assets/2023-04-01-10-23-57-image.35b59e6c.png",be="/assets/2023-04-01-10-24-06-image.8bfde857.png",ve="/assets/2023-04-01-10-25-08-image.463ec58b.png",ge="/assets/2023-04-01-10-26-09-image.a53e7a04.png",he="/assets/2023-04-01-10-26-19-image.b35537af.png",_e="/assets/2023-04-01-10-26-59-image.1fed7cfe.png",ke="/assets/2023-04-01-10-27-31-image.5d3164b6.png",fe="/assets/2023-04-01-10-28-30-image.68a1de01.png",ye="/assets/2023-04-01-10-28-39-image.008b2504.png",qe="/assets/2023-04-01-10-29-58-image.6f1ca87a.png",xe="/assets/2023-04-01-10-31-22-image.069f8577.png",Ce="/assets/2023-04-01-10-32-20-image.a229747b.png",Re="/assets/2023-04-01-10-33-12-image.2db8ea50.png",He="/assets/2023-04-01-10-33-47-image.e93a2d36.png",Se="/assets/2023-04-01-10-35-34-image.b8e15334.png",Ie="/assets/2023-04-01-10-35-45-image.3fa759a8.png",Ne="/assets/2023-04-01-10-35-54-image.ddb695a4.png",Le="/assets/2023-04-01-10-36-32-image.cdbc1b17.png",Oe="/assets/2023-04-01-10-37-15-image.7cc55628.png",Te="/assets/2023-04-01-10-38-12-image.2ea5ef1c.png",Ee="/assets/2023-04-01-10-38-22-image.61dd4d90.png",Pe="/assets/2023-04-01-10-41-12-image.19f17196.png",Ae="/assets/2023-04-01-10-41-31-image.3c25ed26.png",Be="/assets/2023-04-01-13-21-49-image.af0036e6.png",De="/assets/2023-04-01-13-22-02-image.0c318935.png",ze="/assets/2023-04-01-10-43-40-image.d4f6b0ee.png",Ue={},Ke=s('<h2 id="_01、是什么" tabindex="-1"><a class="header-anchor" href="#_01、是什么" aria-hidden="true">#</a> 01、是什么？</h2><h3 id="定义" tabindex="-1"><a class="header-anchor" href="#定义" aria-hidden="true">#</a> 定义</h3><p><strong>由于数据量过大</strong>，单个Master复制集难以承担，因此需要对多个复制集进行集群，形成水平扩展每个复制集只负责存储整个数据集的一部分，这就是Redis的集群，其作用是提供在多个Redis节点间共享数据的程序集。</p><p><img src="'+p+'" alt=""></p><p><img src="'+c+'" alt=""></p><h3 id="官网" tabindex="-1"><a class="header-anchor" href="#官网" aria-hidden="true">#</a> 官网</h3>',6),Ve={href:"https://redis.io/docs/reference/cluster-spec/",target:"_blank",rel:"noopener noreferrer"},Xe=s('<h3 id="一图" tabindex="-1"><a class="header-anchor" href="#一图" aria-hidden="true">#</a> 一图</h3><p><img src="'+o+'" alt=""></p><h3 id="一句话" tabindex="-1"><a class="header-anchor" href="#一句话" aria-hidden="true">#</a> 一句话</h3><ul><li><p>Redis集群是一个提供在多个Redis节点间共享数据的程序集</p></li><li><p><strong>Redis集群可以支持多个Master</strong></p></li></ul><p><img src="'+m+'" alt=""></p><h2 id="_02、能干嘛" tabindex="-1"><a class="header-anchor" href="#_02、能干嘛" aria-hidden="true">#</a> 02、能干嘛？</h2><p>Redis集群支持多个master，每个master又可以挂载多个salve</p><ul><li><p>读写分离</p></li><li><p>支持数据的高可用</p></li><li><p>支持海量数据的读写存储操作</p></li></ul><p>由于Cluster自带Sentinel的故障转移机制，内置了高可用的支持，<code>无需再去使用哨兵功能</code></p><p>客户端与Redis的节点连接，不再需要连接集群中所有的节点，只需要任意连接集群中的一个可用节点即可！</p><p><strong>槽位slot</strong>负责分配到各个物理服务节点，由对应的集群来负责维护节点、插槽和数据之间的关系</p><h2 id="_03、集群算法-分片-槽位slot" tabindex="-1"><a class="header-anchor" href="#_03、集群算法-分片-槽位slot" aria-hidden="true">#</a> 03、集群算法-分片-槽位slot</h2><h3 id="_1、官网出处" tabindex="-1"><a class="header-anchor" href="#_1、官网出处" aria-hidden="true">#</a> 1、官网出处</h3><p><img src="'+u+'" alt=""></p><blockquote><p>翻译说明</p></blockquote><p><img src="'+b+'" alt=""></p><h3 id="_2、redis集群的槽位slot" tabindex="-1"><a class="header-anchor" href="#_2、redis集群的槽位slot" aria-hidden="true">#</a> 2、redis集群的槽位slot</h3><p><img src="'+v+'" alt=""></p><p><img src="'+g+'" alt=""></p><h3 id="_3、redis集群的分片" tabindex="-1"><a class="header-anchor" href="#_3、redis集群的分片" aria-hidden="true">#</a> 3、redis集群的分片</h3><table><thead><tr><th>分片是什么</th><th>使用Redis集群时我们会将存储的数据分散到多台redis机器上，这称为分片。简言之，集群中的每个Redis实例都被认为是整个数据的一个分片。</th></tr></thead><tbody><tr><td>如何找到给定key的分片</td><td>为了找到给定key的分片，我们对key进行CRC16(key)算法处理并通过对总分片数量取模。然后，使用确定性哈希函数，这意味着给定的key将多次始终映射到同一个分片，我们可以推断将来读取特定key的位置。</td></tr></tbody></table><p><img src="'+h+'" alt=""></p><h3 id="_4、他两的优势" tabindex="-1"><a class="header-anchor" href="#_4、他两的优势" aria-hidden="true">#</a> 4、他两的优势</h3><p><strong>最大优势，方便扩缩容和数据分派查找</strong></p><p><img src="'+_+'" alt=""></p><p><img src="'+k+'" alt=""></p><h3 id="_5、slot槽位映射-一般业界有3种解决方案" tabindex="-1"><a class="header-anchor" href="#_5、slot槽位映射-一般业界有3种解决方案" aria-hidden="true">#</a> 5、slot槽位映射，一般业界有3种解决方案</h3><h4 id="哈希取余分区" tabindex="-1"><a class="header-anchor" href="#哈希取余分区" aria-hidden="true">#</a> 哈希取余分区</h4><p><img src="'+f+'" alt=""></p><table><thead><tr><th>2亿条记录就是2亿个k,v，我们单机不行必须要分布式多机，假设有3台机器构成一个集群，用户每次读写操作都是根据公式：<br><br>hash(key) % N个机器台数，计算出哈希值，用来决定数据映射到哪一个节点上。</th></tr></thead><tbody><tr><td>优点：<br><br>  简单粗暴，直接有效，只需要预估好数据规划好节点，例如3台、8台、10台，就能保证一段时间的数据支撑。使用Hash算法让固定的一部分请求落到同一台服务器上，这样每台服务器固定处理一部分请求（并维护这些请求的信息），起到负载均衡+分而治之的作用。</td></tr><tr><td>缺点：<br><br>   原来规划好的节点，进行扩容或者缩容就比较麻烦了额，不管扩缩，每次数据变动导致节点有变动，映射关系需要重新进行计算，在服务器个数固定不变时没有问题，如果需要弹性扩容或故障停机的情况下，原来的取模公式就会发生变化：Hash(key)/3会变成Hash(key) /?。此时地址经过取余运算的结果将发生很大变化，根据公式获取的服务器也会变得不可控。<br><br>某个redis机器宕机了，由于台数数量变化，会导致hash取余全部数据重新洗牌。</td></tr></tbody></table><p>缺点那？？？</p><p><img src="'+y+'" alt=""></p><table><thead><tr><th>缺点：</th></tr></thead><tbody><tr><td>原来规划好的节点，进行扩容或者缩容就比较麻烦了额，不管扩缩，每次数据变动导致节点有变动，映射关系需要重新进行计算，在服务器个数固定不变时没有问题，如果需要弹性扩容或故障停机的情况下，原来的取模公式就会发生变化：Hash(key)/3会变成Hash(key) /?。此时地址经过取余运算的结果将发生很大变化，根据公式获取的服务器也会变得不可控。<br><br>某个redis机器宕机了，由于台数数量变化，会导致hash取余全部数据重新洗牌。</td></tr></tbody></table><h4 id="一致性哈希算法分区" tabindex="-1"><a class="header-anchor" href="#一致性哈希算法分区" aria-hidden="true">#</a> 一致性哈希算法分区</h4><ol><li>是什么？</li></ol><p>一致性Hash算法背景</p><p>一致性哈希算法在1997年由麻省理工学院中提出的，设计目标是为了解决</p><p>分布式缓存数据变动和映射问题，某个机器宕机了，分母数量改变了，自然取余数不OK了。</p><ol start="2"><li>能干嘛？</li></ol><p>提出一致性Hash解决方案。目的是当服务器个数发生变动时，尽量减少影响客户端到服务端的映射关系</p><ol start="3"><li>3大步骤</li></ol><ul><li>算法构建一致性哈希环</li></ul><p><strong>一致性哈希环</strong></p><p>一致性哈希算法必然有个hash函数并按照算法产生hash值，这个算法的所有可能哈希值会构成一个全量集，这个集合可以成为一个hash空间[0,2^32-1]，这个是一个线性空间，但是在算法中，我们通过适当的逻辑控制将它首尾相连(0 = 2^32),这样让它逻辑上形成了一个环形空间。</p><p>它也是按照使用取模的方法，<code>前面笔记介绍的节点取模法是对节点（服务器）的数量进行取模。而一致性Hash算法是对2^32取模</code>，简单来说，<code>一致性Hash算法将整个哈希值空间组织成一个虚拟的圆环</code>，如假设某哈希函数H的值空间为0-2<sup>32-1（即哈希值是一个32位无符号整形），整个哈希环如下图：整个空间`按顺时针方向组织`，圆环的正上方的点代表0，0点右侧的第一个点代表1，以此类推，2、3、4、……直到2</sup>32-1，也就是说0点左侧的第一个点代表2^32-1， 0和2<sup>32-1在零点中方向重合，我们把这个由2</sup>32个点组成的圆环称为Hash环。</p><p><img src="'+q+'" alt=""></p><ul><li>redis服务器IP节点映射</li></ul><p>节点映射</p><p>将集群中各个IP节点映射到环上的某一个位置。</p><p>将各个服务器使用Hash进行一个哈希，具体可以选择服务器的IP或主机名作为关键字进行哈希，这样每台机器就能确定其在哈希环上的位置。假如4个节点NodeA、B、C、D，经过IP地址的哈希函数计算(hash(ip))，使用IP地址哈希后在环空间的位置如下：</p><p><img src="'+x+'" alt=""></p><ul><li>key落到服务器的落键规则</li></ul><p>当我们需要存储一个kv键值对时，首先计算key的hash值，hash(key)，将这个key使用相同的函数Hash计算出哈希值并确定此数据在环上的位置，<strong>从此位置沿环顺时针“行走”</strong>，第一台遇到的服务器就是其应该定位到的服务器，并将该键值对存储在该节点上。</p><p>如我们有Object A、Object B、Object C、Object D四个数据对象，经过哈希计算后，在环空间上的位置如下：根据一致性Hash算法，数据A会被定为到Node A上，B被定为到Node B上，C被定为到Node C上，D被定为到Node D上。</p><p><img src="'+C+'" alt=""></p><ol start="4"><li>优点</li></ol><ul><li>一致性哈希算法的<strong>容错性</strong></li></ul><p><strong>容错性</strong></p><p>假设Node C宕机，可以看到此时对象A、B、D不会受到影响。一般的，在一致性Hash算法中，如果一台服务器不可用，则受影响的数据仅仅是此服务器到其环空间中前一台服务器（即沿着逆时针方向行走遇到的第一台服务器）之间数据，其它不会受到影响。简单说，就是C挂了，受到影响的只是B、C之间的数据且这些数据会转移到D进行存储。</p><p><img src="'+R+'" alt=""></p><ul><li>一致性哈希算法的<strong>扩展性</strong></li></ul><p>扩展性</p><p>数据量增加了，需要增加一台节点NodeX，X的位置在A和B之间，那收到影响的也就是A到X之间的数据，重新把A到X的数据录入到X上即可，</p><p>不会导致hash取余全部数据重新洗牌。</p><p><img src="'+H+'" alt=""></p><ol start="5"><li>缺点</li></ol><p>一致性哈希算法的数据倾斜问题</p><p>Hash环的数据倾斜问题</p><p>一致性Hash算法在服务<strong>节点太少时</strong>，容易因为节点分布不均匀而造成<strong>数据倾斜</strong>（被缓存的对象大部分集中缓存在某一台服务器上）问题，</p><p>例如系统中只有两台服务器：</p><p><img src="'+S+'" alt=""></p><ol start="6"><li>小总结</li></ol><p>为了在节点数目发生改变时尽可能少的迁移数据</p><p>将所有的存储节点排列在收尾相接的Hash环上，每个key在计算Hash后会顺时针找到临近的存储节点存放。</p><p>而当有节点加入或退出时仅影响该节点在Hash环上顺时针相邻的后续节点。</p><p>优点</p><p>加入和删除节点只影响哈希环中顺时针方向的相邻的节点，对其他节点无影响。</p><p>缺点</p><p>数据的分布和节点的位置有关，因为这些节点不是均匀的分布在哈希环上的，所以数据在进行存储时达不到均匀分布的效果。</p><h4 id="哈希槽分区" tabindex="-1"><a class="header-anchor" href="#哈希槽分区" aria-hidden="true">#</a> 哈希槽分区</h4><blockquote><p>是什么？</p></blockquote><p>1 为什么出现</p><p><img src="'+I+'" alt=""></p><p>哈希槽实质就是一个数组，数组[0,2^14 -1]形成hash slot空间。</p><p>2 能干什么</p><p>解决均匀分配的问题，在数据和节点之间又加入了一层，把这层称为哈希槽（slot），用于管理数据和节点之间的关系，现在就相当于节点上放的是槽，槽里放的是数据。</p><p><img src="'+N+'" alt=""></p><p>槽解决的是粒度问题，相当于把粒度变大了，这样便于数据移动。哈希解决的是映射问题，使用key的哈希值来计算所在的槽，便于数据分配</p><p>3 多少个hash槽</p><p>一个集群只能有16384个槽，编号0-16383（0-2^14-1）。这些槽会分配给集群中的所有主节点，分配策略没有要求。</p><p>集群会记录节点和槽的对应关系，解决了节点和槽的关系后，接下来就需要对key求哈希值，然后对16384取模，余数是几key就落入对应的槽里。HASH_SLOT = CRC16(key) mod 16384。以槽为单位移动数据，因为槽的数目是固定的，处理起来比较容易，这样数据移动问题就解决了。</p><p><code>HASH_SLOT=CRC16(key) mod 16384</code></p><blockquote><p>哈希槽计算</p></blockquote><p>Redis 集群中内置了 16384 个哈希槽，redis 会根据节点数量大致均等的将哈希槽映射到不同的节点。当需要在 Redis 集群中放置一个 key-value时，redis先对key使用crc16算法算出一个结果然后用结果对16384求余数[ CRC16(key) % 16384]，这样每个 key 都会对应一个编号在 0-16383 之间的哈希槽，也就是映射到某个节点上。如下代码，key之A 、B在Node2， key之C落在Node3上</p><p><img src="'+L+'" alt=""></p><p><img src="'+O+'" alt=""></p><h3 id="_6、经典面试题-为什么redis集群的最大槽数是16384个" tabindex="-1"><a class="header-anchor" href="#_6、经典面试题-为什么redis集群的最大槽数是16384个" aria-hidden="true">#</a> 6、经典面试题--为什么redis集群的最大槽数是16384个？</h3><ul><li>为什么redis集群的最大槽数是16384个？</li></ul><p>Redis集群并没有使用一致性hash而是引入了哈希槽的概念。Redis 集群有16384个哈希槽，每个key通过CRC16校验后对16384取模来决定放置哪个槽，集群的每个节点负责一部分hash槽。但为什么哈希槽的数量是16384（2^14）个呢？</p><p>CRC16算法产生的hash值有16bit，该算法可以产生2^16=65536个值。</p><p>换句话说值是分布在0~65535之间，有更大的65536不用为什么只用16384就够？</p><p>作者在做mod运算的时候，为什么不mod65536，而选择mod16384？  HASH_SLOT = CRC16(key) mod 65536为什么没启用</p>',102),je={href:"https://github.com/redis/redis/issues/2576",target:"_blank",rel:"noopener noreferrer"},Ye=s('<p><img src="'+T+'" alt=""></p><ul><li>说明1</li></ul><p><img src="'+E+'" alt=""></p><p>正常的心跳数据包带有节点的完整配置，可以用幂等方式用旧的节点替换旧节点，以便更新旧的配置。</p><p>这意味着它们包含原始节点的插槽配置，该节点使用2k的空间和16k的插槽，但是会使用8k的空间（使用65k的插槽）。</p><p>同时，由于其他设计折衷，Redis集群不太可能扩展到1000个以上的主节点。</p><p>因此16k处于正确的范围内，以确保每个主机具有足够的插槽，最多可容纳1000个矩阵，但数量足够少，可以轻松地将插槽配置作为原始位图传播。请注意，在小型群集中，位图将难以压缩，因为当N较小时，位图将设置的slot / N位占设置位的很大百分比。</p><p><img src="'+P+'" alt=""></p><ul><li>说明2</li></ul><p><img src="'+A+'" alt=""></p><p>(1)如果槽位为65536，发送心跳信息的消息头达8k，发送的心跳包过于庞大。</p><p>在消息头中最占空间的是myslots[CLUSTER_SLOTS/8]。 当槽位为65536时，这块的大小是: 65536÷8÷1024=8kb</p><p>在消息头中最占空间的是myslots[CLUSTER_SLOTS/8]。 当槽位为16384时，这块的大小是: 16384÷8÷1024=2kb</p><p>因为每秒钟，redis节点需要发送一定数量的ping消息作为心跳包，如果槽位为65536，这个ping消息的消息头太大了，浪费带宽。</p><p>(2)redis的集群主节点数量基本不可能超过1000个。</p><p>集群节点越多，心跳包的消息体内携带的数据越多。如果节点过1000个，也会导致网络拥堵。因此redis作者不建议redis cluster节点数量超过1000个。 那么，对于节点数在1000以内的redis cluster集群，16384个槽位够用了。没有必要拓展到65536个。</p><p>(3)槽位越小，节点少的情况下，压缩比高，容易传输</p><p>Redis主节点的配置信息中它所负责的哈希槽是通过一张bitmap的形式来保存的，在传输过程中会对bitmap进行压缩，但是如果bitmap的填充率slots / N很高的话(N表示节点数)，bitmap的压缩率就很低。 如果节点数很少，而哈希槽数量很多的话，bitmap的压缩率就很低。</p><ul><li>计算结论</li></ul><p><img src="'+B+'" alt=""></p><h3 id="_7、redis集群不保证强一致性-这意味着在特定的可能丢掉一些被系统收到的写入请求命令" tabindex="-1"><a class="header-anchor" href="#_7、redis集群不保证强一致性-这意味着在特定的可能丢掉一些被系统收到的写入请求命令" aria-hidden="true">#</a> 7、Redis集群不保证强一致性，这意味着在特定的可能丢掉一些被系统收到的写入请求命令</h3><p><img src="'+D+'" alt=""></p><h2 id="_04、集群环境案例步骤" tabindex="-1"><a class="header-anchor" href="#_04、集群环境案例步骤" aria-hidden="true">#</a> 04、集群环境案例步骤</h2><h3 id="_1、3主3从redis集群配置" tabindex="-1"><a class="header-anchor" href="#_1、3主3从redis集群配置" aria-hidden="true">#</a> 1、3主3从redis集群配置</h3><h4 id="找3台真实虚拟机-各自新建" tabindex="-1"><a class="header-anchor" href="#找3台真实虚拟机-各自新建" aria-hidden="true">#</a> 找3台真实虚拟机，各自新建</h4><p><code>mkdir -p /myredis/cluster</code></p><h4 id="新建6个独立的redis实例服务" tabindex="-1"><a class="header-anchor" href="#新建6个独立的redis实例服务" aria-hidden="true">#</a> 新建6个独立的redis实例服务</h4><ol><li>本次案例设计说明（ip会有变化）</li></ol><p><img src="'+z+'" alt=""></p><p><img src="'+U+'" alt=""></p><p><img src="'+K+'" alt=""></p><p><img src="'+V+'" alt=""></p><p><img src="'+X+'" alt=""></p><p><img src="'+j+'" alt=""></p><p><img src="'+Y+`" alt=""></p><ol start="2"><li>IP：192.168.111.175+端口6381/端口6382</li></ol><blockquote><p>vim /myredis/cluster/redisCluster6381.conf</p></blockquote><div class="language-textile line-numbers-mode" data-ext="textile"><pre class="language-textile"><code><span class="token phrase">bind 0.0.0.0
daemonize yes
protected-mode no
port 6381
logfile &quot;/myredis/cluster/cluster6381.log&quot;
pidfile /myredis/cluster6381.pid
dir /myredis/cluster
dbfilename dump6381.rdb
appendonly yes
appendfilename &quot;appendonly6381.aof&quot;
requirepass 111111
masterauth 111111
 
cluster-enabled yes
cluster-config-file nodes-6381.conf
cluster-node-timeout 5000
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>vim /myredis/cluster/redisCluster6382.conf</p></blockquote><div class="language-textile line-numbers-mode" data-ext="textile"><pre class="language-textile"><code><span class="token phrase">bind 0.0.0.0
daemonize yes
protected-mode no
port 6382
logfile &quot;/myredis/cluster/cluster6382.log&quot;
pidfile /myredis/cluster6382.pid
dir /myredis/cluster
dbfilename dump6382.rdb
appendonly yes
appendfilename &quot;appendonly6382.aof&quot;
requirepass 111111
masterauth 111111
 
cluster-enabled yes
cluster-config-file nodes-6382.conf
cluster-node-timeout 5000
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>IP：192.168.111.172+端口6383/端口6384</li></ol><blockquote><p>vim /myredis/cluster/redisCluster6383.conf</p></blockquote><div class="language-textile line-numbers-mode" data-ext="textile"><pre class="language-textile"><code><span class="token phrase">bind 0.0.0.0
daemonize yes
protected-mode no
port 6383
logfile &quot;/myredis/cluster/cluster6383.log&quot;
pidfile /myredis/cluster6383.pid
dir /myredis/cluster
dbfilename dump6383.rdb
appendonly yes
appendfilename &quot;appendonly6383.aof&quot;
requirepass 111111
masterauth 111111</span>

<span class="token phrase">cluster-enabled yes
cluster-config-file nodes-6383.conf
cluster-node-timeout 5000
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>vim /myredis/cluster/redisCluster6384.conf</p></blockquote><div class="language-textile line-numbers-mode" data-ext="textile"><pre class="language-textile"><code><span class="token phrase">bind 0.0.0.0
daemonize yes
protected-mode no
port 6384
logfile &quot;/myredis/cluster/cluster6384.log&quot;
pidfile /myredis/cluster6384.pid
dir /myredis/cluster
dbfilename dump6384.rdb
appendonly yes
appendfilename &quot;appendonly6384.aof&quot;
requirepass 111111
masterauth 111111
 
cluster-enabled yes
cluster-config-file nodes-6384.conf
cluster-node-timeout 5000
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>IP：192.168.111.174+端口6385/端口6386</li></ol><blockquote><p>vim /myredis/cluster/redisCluster6385.conf</p></blockquote><div class="language-textile line-numbers-mode" data-ext="textile"><pre class="language-textile"><code><span class="token phrase">bind 0.0.0.0
daemonize yes
protected-mode no
port 6385
logfile &quot;/myredis/cluster/cluster6385.log&quot;
pidfile /myredis/cluster6385.pid
dir /myredis/cluster
dbfilename dump6385.rdb
appendonly yes
appendfilename &quot;appendonly6385.aof&quot;
requirepass 111111
masterauth 111111
 
cluster-enabled yes
cluster-config-file nodes-6385.conf
cluster-node-timeout 5000
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>vim /myredis/cluster/redisCluster6386.conf</p></blockquote><div class="language-textile line-numbers-mode" data-ext="textile"><pre class="language-textile"><code><span class="token phrase">bind 0.0.0.0
daemonize yes
protected-mode no
port 6385
logfile &quot;/myredis/cluster/cluster6385.log&quot;
pidfile /myredis/cluster6385.pid
dir /myredis/cluster
dbfilename dump6385.rdb
appendonly yes
appendfilename &quot;appendonly6385.aof&quot;
requirepass 111111
masterauth 111111
 
cluster-enabled yes
cluster-config-file nodes-6385.conf
cluster-node-timeout 5000
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>启动6台redis主机实例</li></ol><ul><li><p><code>redis-server /myredis/cluster/redisCluster6381.conf</code></p></li><li><p>。。。。。。</p></li><li><p><code>redis-server /myredis/cluster/redisCluster6386.conf</code></p></li></ul><h4 id="通过redis-cli命令为6台机器构建集群关系" tabindex="-1"><a class="header-anchor" href="#通过redis-cli命令为6台机器构建集群关系" aria-hidden="true">#</a> 通过redis-cli命令为6台机器构建集群关系</h4><blockquote><p><code>构建主从关系命令</code></p></blockquote><p>//注意，注意，注意自己的真实IP地址     //注意，注意，注意自己的真实IP地址</p><p><strong>redis-cli -a 111111</strong> <strong>--cluster create</strong> <strong>--cluster-replicas 1</strong> <strong>192.168.111.175:6381 192.168.111.175:6382 192.168.111.172:6383 192.168.111.172:6384 192.168.111.174:6385 192.168.111.174:6386</strong></p><p>--cluster-replicas 1 表示为每个master创建一个slave节点</p><p><img src="`+M+'" alt=""></p><p><img src="'+F+'" alt=""></p><blockquote><p>一切OK的话，3主3从搞定</p></blockquote><p><img src="'+w+'" alt=""></p><h4 id="连接进入6381作为切入点-查看并检验集群状态" tabindex="-1"><a class="header-anchor" href="#连接进入6381作为切入点-查看并检验集群状态" aria-hidden="true">#</a> 连接进入6381作为切入点，<strong>查看并检验集群状态</strong></h4><ul><li>连接进入6381作为切入点，<strong>查看节点状态</strong></li></ul><p><img src="'+G+'" alt=""></p><p><img src="'+J+'" alt=""></p><ul><li>info replication</li></ul><p><img src="'+Q+'" alt=""></p><ul><li>cluster info</li></ul><p><img src="'+W+'" alt=""></p><ul><li>cluster nodes</li></ul><p><img src="'+Z+'" alt=""></p><h3 id="_2、3主3从redis集群读写" tabindex="-1"><a class="header-anchor" href="#_2、3主3从redis集群读写" aria-hidden="true">#</a> 2、3主3从redis集群读写</h3><ul><li>对6381新增两个key，看看效果如何</li></ul><p><img src="'+$+'" alt=""></p><ul><li>为什么报错</li></ul><p><strong>一定注意槽位的范围区间，需要路由到位，路由到位，路由到位，路由到位</strong></p><p><img src="'+ee+'" alt=""></p><ul><li>如何解决？</li></ul><p>防止路由失效加参数<code>-c</code>并新增两个key</p><p><code>加入参数-c，优化路由</code></p><p><img src="'+se+'" alt=""></p><ul><li>查看集群信息</li></ul><p><img src="'+ae+'" alt=""></p><ul><li>查看某个key该属于对应的槽位值    CLUSTER KEYSLOT 键名称</li></ul><p><img src="'+ie+'" alt=""></p><h3 id="_3、主从容错切换迁移案例" tabindex="-1"><a class="header-anchor" href="#_3、主从容错切换迁移案例" aria-hidden="true">#</a> 3、主从容错切换迁移案例</h3><ol><li>容错切换迁移</li></ol><ul><li>主6381和从机切换，先停止主机6381</li></ul><p>6381主机停了，对应的真实从机上位</p><p>6381作为1号主机分配的从机以实际情况为准，具体是几号机器就是几号</p><ul><li>再次查看集群信息，本次6381主6384从</li></ul><p><img src="'+ne+'" alt=""></p><p>6381master假如宕机了，6384是否会上位成为了新的master?</p><ul><li>停止主机6381，再次查看集群信息</li></ul><p><img src="'+le+'" alt=""></p><p>6381宕机了，6384上位成为了新的master。</p><p><code>备注：本次脑图笔记6381为主下面挂从6384。每次案例下面挂的从机以实际情况为准，具体是几号机器就是几号</code></p><blockquote><p>6384成功上位并正常使用</p></blockquote><p><img src="'+re+'" alt=""></p><ul><li>随后，6381原来的主机回来了，是否会上位？</li></ul><blockquote><p>恢复前</p></blockquote><p><img src="'+te+'" alt=""></p><blockquote><p>恢复后</p></blockquote><p><img src="'+de+'" alt=""></p><p><img src="'+pe+'" alt=""></p><blockquote><p>6381不会上位并以从节点形式回归</p></blockquote><ol start="2"><li>集群不保证数据一致性100%OK，一定会有数据丢失情况</li></ol><p>Redis集群不保证强一致性，这意味着在特定的条件下，Redis集群可能会丢掉一些被系统收到的写入请求命令</p><p><img src="'+ce+'" alt=""></p><ol start="3"><li>手动故障转移or节点从属调整该如何处理</li></ol><ul><li><p>上面一换后6381、6384主从对调了，和原来设计图不一样了，该如何</p></li><li><p>重新登录6381机器</p></li><li><p>常用命令</p></li></ul><blockquote><p><code>CLUSTER FAILOVER</code></p></blockquote><p><img src="'+oe+`" alt=""></p><h3 id="_4、主从扩容案例" tabindex="-1"><a class="header-anchor" href="#_4、主从扩容案例" aria-hidden="true">#</a> 4、主从扩容案例</h3><ol><li>新建6387/6388两个服务实例配置文件+新建后启动</li></ol><ul><li>IP：192.168.111.174+端口6387/端口6388</li></ul><blockquote><p>vim /myredis/cluster/redisCluster6387.conf</p></blockquote><div class="language-textile line-numbers-mode" data-ext="textile"><pre class="language-textile"><code><span class="token phrase">bind 0.0.0.0
daemonize yes
protected-mode no
port 6387
logfile &quot;/myredis/cluster/cluster6387.log&quot;
pidfile /myredis/cluster6387.pid
dir /myredis/cluster
dbfilename dump6387.rdb
appendonly yes
appendfilename &quot;appendonly6387.aof&quot;
requirepass 111111
masterauth 111111</span>

<span class="token phrase">cluster-enabled yes
cluster-config-file nodes-6387.conf
cluster-node-timeout 5000
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>vim /myredis/cluster/redisCluster6388.conf</p></blockquote><div class="language-textile line-numbers-mode" data-ext="textile"><pre class="language-textile"><code><span class="token phrase">bind 0.0.0.0
daemonize yes
protected-mode no
port 6388
logfile &quot;/myredis/cluster/cluster6388.log&quot;
pidfile /myredis/cluster6388.pid
dir /myredis/cluster
dbfilename dump6388.rdb
appendonly yes
appendfilename &quot;appendonly6388.aof&quot;
requirepass 111111
masterauth 111111
 
cluster-enabled yes
cluster-config-file nodes-6388.conf
cluster-node-timeout 5000
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>启动87/88两个新的节点实例，此时他们自己都是master</li></ol><p><img src="`+me+`" alt=""></p><ul><li><p>redis-server /myredis/cluster/redisCluster6387.conf</p></li><li><p>redis-server /myredis/cluster/redisCluster6388.conf</p></li></ul><ol start="3"><li>将新增的6387节点（空槽号）作为master节点加入原集群</li></ol><div class="language-textile line-numbers-mode" data-ext="textile"><pre class="language-textile"><code><span class="token phrase">将新增的6387作为master节点加入原有集群</span>

<span class="token phrase">redis-cli <span class="token inline"><span class="token punctuation">-</span><span class="token deleted">a 密码 </span><span class="token punctuation">-</span></span>-cluster add-node 自己实际IP地址:6387 自己实际IP地址:6381</span>

<span class="token phrase">6387 就是将要作为master新增节点</span>

<span class="token phrase">6381 就是原来集群节点里面的领路人，相当于6387拜拜6381的码头从而找到组织加入集群</span>

<span class="token phrase">redis-cli <span class="token inline"><span class="token punctuation">-</span><span class="token deleted">a 111111  </span><span class="token punctuation">-</span></span>-cluster add-node 192.168.111.174:6387 192.168.111.175:6381</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+ue+'" alt=""></p><p><img src="'+be+`" alt=""></p><ol start="4"><li>检查集群情况第1次</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-cli <span class="token parameter variable">-a</span> 密码 <span class="token parameter variable">--cluster</span> check 真实ip地址:6381

redis-cli <span class="token parameter variable">-a</span> <span class="token number">111111</span> <span class="token parameter variable">--cluster</span> check <span class="token number">192.168</span>.111.175:6381
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+ve+`" alt=""></p><ol start="5"><li>重新分配槽号（<code>reshard</code>）</li></ol><div class="language-textile line-numbers-mode" data-ext="textile"><pre class="language-textile"><code><span class="token phrase">重新分派槽号
命令:redis-cli <span class="token inline"><span class="token punctuation">-</span><span class="token deleted">a 密码 </span><span class="token punctuation">-</span></span>-cluster reshard IP地址:端口号
redis-cli <span class="token inline"><span class="token punctuation">-</span><span class="token deleted">a 密码 </span><span class="token punctuation">-</span></span>-cluster reshard 192.168.111.175:6381
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+ge+'" alt=""></p><p><img src="'+he+`" alt=""></p><ol start="6"><li>检查集群情况第2次</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-cli <span class="token parameter variable">--cluster</span> check 真实ip地址:6381
 
redis-cli <span class="token parameter variable">-a</span> <span class="token number">111111</span> <span class="token parameter variable">--cluster</span> check <span class="token number">192.168</span>.111.175:6381
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+_e+'" alt=""></p><blockquote><p>槽号分派说明</p></blockquote><p>为什么6387是3个新的区间，以前的还是连续？</p><p>重新分配成本太高，所以前3家各自匀出来一部分，从6381/6383/6385三个旧节点分别匀出1364个坑位给新节点6387</p><p><img src="'+ke+`" alt=""></p><ol start="7"><li>为主节点6387分配从节点6388</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>命令：redis-cli <span class="token parameter variable">-a</span> 密码 <span class="token parameter variable">--cluster</span> add-node ip:新slave端口 ip:新master端口 --cluster-slave --cluster-master-id 新主机节点ID
 
redis-cli <span class="token parameter variable">-a</span> <span class="token number">111111</span> <span class="token parameter variable">--cluster</span> add-node <span class="token number">192.168</span>.111.174:6388 <span class="token number">192.168</span>.111.174:6387 --cluster-slave --cluster-master-id 4feb6a7ee0ed2b39ff86474cf4189ab2a554a40f-------这个是6387的编号，按照自己实际情况
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+fe+'" alt=""></p><p><img src="'+ye+`" alt=""></p><ol start="8"><li>检查集群情况第3次</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-cli <span class="token parameter variable">--cluster</span> check 真实ip地址:6381
 
redis-cli <span class="token parameter variable">-a</span> <span class="token number">111111</span> <span class="token parameter variable">--cluster</span> check <span class="token number">192.168</span>.111.175:6381
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+qe+'" alt=""></p><h3 id="_5、主从缩容案例" tabindex="-1"><a class="header-anchor" href="#_5、主从缩容案例" aria-hidden="true">#</a> 5、主从缩容案例</h3><ol><li>目的：6387和6388下线</li></ol><p><img src="'+xe+`" alt=""></p><ol start="2"><li>检查集群情况第一次，先获得从节点6388的节点ID</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-cli <span class="token parameter variable">-a</span> 密码 <span class="token parameter variable">--cluster</span> check <span class="token number">192.168</span>.111.174:6388
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+Ce+`" alt=""></p><ol start="3"><li>从集群中删除4号从节点6388</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>命令：redis-cli <span class="token parameter variable">-a</span> 密码 <span class="token parameter variable">--cluster</span> del-node ip:从机端口 从机6388节点ID
 
redis-cli <span class="token parameter variable">-a</span> <span class="token number">111111</span> <span class="token parameter variable">--cluster</span> del-node <span class="token number">192.168</span>.111.174:6388 218e7b8b4f81be54ff173e4776b4f4faaf7c13da
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+Re+`" alt=""></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-cli <span class="token parameter variable">-a</span> <span class="token number">111111</span> <span class="token parameter variable">--cluster</span> check <span class="token number">192.168</span>.111.174:6385
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>检查一下发现，6388被删除了，只剩下7台机器了。</strong></p><p><img src="`+He+`" alt=""></p><ol start="4"><li>将6387的槽号清空，重新分配，本例将清出来的槽号都给6381</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-cli <span class="token parameter variable">-a</span> <span class="token number">111111</span> <span class="token parameter variable">--cluster</span> reshard <span class="token number">192.168</span>.111.175:6381
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+Se+'" alt=""></p><p><img src="'+Ie+'" alt=""></p><p><img src="'+Ne+`" alt=""></p><ol start="5"><li>检查集群情况第二次</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-cli <span class="token parameter variable">-a</span> <span class="token number">111111</span> <span class="token parameter variable">--cluster</span> check <span class="token number">192.168</span>.111.175:6381
 
<span class="token number">4096</span>个槽位都指给6381，它变成了8192个槽位，相当于全部都给6381了，不然要输入3次，一锅端
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+Le+`" alt=""></p><ol start="6"><li>将6387删除</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>命令：redis-cli <span class="token parameter variable">-a</span> 密码 <span class="token parameter variable">--cluster</span> del-node ip:端口 <span class="token number">6387</span>节点ID
 
redis-cli <span class="token parameter variable">-a</span> <span class="token number">111111</span> <span class="token parameter variable">--cluster</span> del-node <span class="token number">192.168</span>.111.174:6387 4feb6a7ee0ed2b39ff86474cf4189ab2a554a40f
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+Oe+`" alt=""></p><ol start="7"><li>检查集群情况第三次，6387/6388被彻底祛除</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-cli <span class="token parameter variable">-a</span> <span class="token number">111111</span> <span class="token parameter variable">--cluster</span> check <span class="token number">192.168</span>.111.175:6381
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+Te+'" alt=""></p><p><img src="'+Ee+'" alt=""></p><h2 id="_05、集群常用操作命令和crc16算法分析" tabindex="-1"><a class="header-anchor" href="#_05、集群常用操作命令和crc16算法分析" aria-hidden="true">#</a> 05、集群常用操作命令和CRC16算法分析</h2><p>不在同一个slot槽位下的多键操作支持不好，通过占位符登场</p><p><img src="'+Pe+'" alt=""></p><table><thead><tr><th>不在同一个slot槽位下的键值无法使用mset、mget等多键操作</th></tr></thead><tbody><tr><td>可以通过{}来定义同一个组的概念，使key中{}内相同内容的键值对放到一个slot槽位去，对照下图类似k1k2k3都映射为x，自然槽位一样</td></tr></tbody></table><p><img src="'+Ae+'" alt=""></p><p>Redis集群有16384个哈希槽，每个key通过CRC16校验后对16384取模来决定防置哪个槽。</p><p>集群的每个节点负责一部分hash槽</p><blockquote><p>CRC16源码浅谈</p></blockquote><p><strong>cluster.c源码分析一下看看</strong></p><p><img src="'+Be+'" alt=""></p><p><img src="'+De+'" alt=""></p><h3 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令" aria-hidden="true">#</a> 常用命令</h3><ul><li>集群是否完整才能对外提供服务</li></ul><p><img src="'+ze+'" alt=""></p><table><thead><tr><th>默认YES，现在集群架构是3主3从的redis cluster由3个master平分16384个slot，每个master的小集群负责1/3的slot，对应一部分数据。<br><br>cluster-require-full-coverage： 默认值 yes , 即需要集群完整性，方可对外提供服务 通常情况，如果这3个小集群中，任何一个（1主1从）挂了，你这个集群对外可提供的数据只有2/3了， 整个集群是不完整的， redis 默认在这种情况下，是不会对外提供服务的。</th></tr></thead><tbody><tr><td>如果你的诉求是，集群不完整的话也需要对外提供服务，需要将该参数设置为no ，这样的话你挂了的那个小集群是不行了，但是其他的小集群仍然可以对外提供服务。</td></tr></tbody></table><blockquote><p>cluster-require-full-coverage</p></blockquote><ul><li>CLUSTER COUNTKEYSINSLOT 槽位数字编号</li></ul><blockquote><p>1，该槽位被占用</p><p>0，该槽位没占用</p></blockquote><ul><li>CLUSTER KEYSLOT 键名称</li></ul><blockquote><p>该键应该存在哪个槽位上</p></blockquote>',195);function Me(Fe,we){const a=d("ExternalLinkIcon");return r(),t("div",null,[Ke,e("blockquote",null,[e("p",null,[e("a",Ve,[i("https://redis.io/docs/reference/cluster-spec/"),n(a)])])]),Xe,e("blockquote",null,[e("p",null,[e("a",je,[i("https://github.com/redis/redis/issues/2576"),n(a)])])]),Ye])}const Qe=l(Ue,[["render",Me],["__file","十、Redis集群（cluster）.html.vue"]]);export{Qe as default};
