import{_ as t}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as i,c as r,d as a,e,b as c,a as d,r as n}from"./app.9b10ba0a.js";const h="/assets/2023-03-30-18-05-31-image.56f8f936.png",o="/assets/2023-03-30-19-55-06-image.06bc074e.png",p="/assets/2023-03-30-18-06-45-image.8c75588f.png",l="/assets/2023-03-30-18-07-18-image.8f4b19bc.png",_="/assets/2023-03-30-18-08-29-image.d2ef8b07.png",m="/assets/2023-03-30-18-08-39-image.3cdcbfe2.png",g="/assets/2023-03-30-18-09-12-image.0f841c66.png",u="/assets/2023-03-30-18-09-33-image.1bf31a04.png",f="/assets/2023-03-30-18-10-12-image.89fe19d6.png",b="/assets/2023-03-30-18-10-37-image.403cdbf5.png",x="/assets/2023-03-30-19-48-18-image.a7653f7f.png",k="/assets/2023-03-30-19-50-09-image.6ab3b722.png",w="/assets/2023-03-30-19-50-40-image.6fd8b722.png",R="/assets/2023-03-30-19-50-48-image.22918f50.png",C="/assets/2023-03-30-19-51-47-image.9a0ec0ae.png",E={},L=a("h2",{id:"_01、是什么",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_01、是什么","aria-hidden":"true"},"#"),e(" 01、是什么？")],-1),I={href:"https://redis.io/docs/manual/transactions/",target:"_blank",rel:"noopener noreferrer"},S=d('<p><img src="'+h+'" alt=""></p><p>可以一次执行多个命令，本质是一组命令的集合。一个事务中的所有命令都会序列化，<code>按顺序地串行化执行而不会被其他命令插入，不许加塞</code></p><h2 id="_02、能干嘛" tabindex="-1"><a class="header-anchor" href="#_02、能干嘛" aria-hidden="true">#</a> 02、能干嘛？</h2><p>一个队列中，一次性、顺序性、排他性的执行一系列命令</p><h2 id="_03、redis事务-vs-数据库事务" tabindex="-1"><a class="header-anchor" href="#_03、redis事务-vs-数据库事务" aria-hidden="true">#</a> 03、Redis事务 VS 数据库事务</h2><table><thead><tr><th>1 单独的隔离操作</th><th>Redis的事务仅仅是保证事务里的操作会被连续独占的执行，redis命令执行是单线程架构，在执行完事务内所有指令前是不可能再去同时执行其他客户端的请求的</th></tr></thead><tbody><tr><td>2 没有隔离级别的概念</td><td>因为事务提交前任何指令都不会被实际执行，也就不存在”事务内的查询要看到事务里的更新，在事务外查询不能看到”这种问题了</td></tr><tr><td>3不保证原子性</td><td>Redis的事务不保证原子性，也就是不保证所有指令同时成功或同时失败，只有决定是否开始执行全部指令的能力，没有执行到一半进行回滚的能力</td></tr><tr><td>4 排它性</td><td>Redis会保证一个事务内的命令依次执行，而不会被其它命令插入</td></tr></tbody></table><h2 id="_04、怎么玩" tabindex="-1"><a class="header-anchor" href="#_04、怎么玩" aria-hidden="true">#</a> 04、怎么玩？</h2><p><img src="'+o+'" alt=""></p><h3 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令" aria-hidden="true">#</a> 常用命令</h3><p><img src="'+p+'" alt=""></p><h3 id="case1-正常执行" tabindex="-1"><a class="header-anchor" href="#case1-正常执行" aria-hidden="true">#</a> case1：正常执行</h3><ul><li><p>MULTI</p></li><li><p>EXEC</p></li></ul><p><img src="'+l+'" alt=""></p><h3 id="case2-放弃事务" tabindex="-1"><a class="header-anchor" href="#case2-放弃事务" aria-hidden="true">#</a> case2：放弃事务</h3><ul><li><p>MULTI</p></li><li><p>DISCARD</p></li></ul><p>案例演示：</p><p><img src="'+_+'" alt=""></p><p>官网说明：</p><p><img src="'+m+'" alt=""></p><h3 id="case3-全体连坐" tabindex="-1"><a class="header-anchor" href="#case3-全体连坐" aria-hidden="true">#</a> case3：全体连坐</h3><p><img src="'+g+'" alt=""></p><blockquote><p>官网说明</p></blockquote><p><img src="'+u+'" alt=""></p><h3 id="case4-冤头债主" tabindex="-1"><a class="header-anchor" href="#case4-冤头债主" aria-hidden="true">#</a> case4：冤头债主</h3><ol><li>官网说明</li></ol><p><img src="'+f+'" alt=""></p><ol start="2"><li>补充</li></ol><p>Redis不提供事务回滚的功能，开发者必须在事务执行出错后，自行恢复数据库状态</p><p><img src="'+b+'" alt=""></p><ol start="3"><li>注意和传统数据库事务区别，不一定要么一起成功要么一起失败！</li></ol><h3 id="case5-watch监控" tabindex="-1"><a class="header-anchor" href="#case5-watch监控" aria-hidden="true">#</a> case5：watch监控</h3><h4 id="redis使用watch来提供乐观锁定-类似于cas-check-and-set" tabindex="-1"><a class="header-anchor" href="#redis使用watch来提供乐观锁定-类似于cas-check-and-set" aria-hidden="true">#</a> Redis使用Watch来提供乐观锁定，类似于CAS(Check-and-Set)</h4><ul><li>悲观锁</li></ul><p>悲观锁(Pessimistic Lock), 顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。</p><ul><li>乐观锁</li></ul><p>乐观锁(Optimistic Lock), 顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，<code>所以不会上锁</code>，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据。</p><p><code>乐观锁策略:提交版本必须   大于   记录当前版本才能执行更新</code></p><ul><li>CAS</li></ul><p><img src="'+x+'" alt=""></p><h4 id="watch" tabindex="-1"><a class="header-anchor" href="#watch" aria-hidden="true">#</a> WATCH</h4><ul><li>初始化k1和balance两个key，先监控再开启multi，保证两个key变动在同一个事务内</li></ul><p><img src="'+k+'" alt=""></p><ul><li>有加塞篡改</li></ul><p><strong>watch命令是一种乐观锁的实现，Redis在修改的时候会检测数据是否被更改，如果更改了，则执行失败</strong></p><p><strong>第一个窗口蓝色框第5步执行结果返回为空，也就是相当于是失败，笔记见最下面官网说明</strong></p><p><img src="'+w+'" alt=""></p><p><img src="'+R+'" alt=""></p><h4 id="unwatch" tabindex="-1"><a class="header-anchor" href="#unwatch" aria-hidden="true">#</a> unwatch</h4><p><img src="'+C+'" alt=""></p><h4 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h4><ul><li><p>一旦执行了exec之前加的监控锁就会被取消掉了</p></li><li><p>当客户端连接丢失的时候（比如退出连接），所有东西都会被取消监视</p></li></ul><h2 id="_05、小总结" tabindex="-1"><a class="header-anchor" href="#_05、小总结" aria-hidden="true">#</a> 05、小总结</h2><p>开启：以MULTI开始一个事务</p><p>入队：将多个命令入队到事务中，接到这些命令并不会立即执行，而是放到等待执行的事务队列里面</p><p>执行：由EXEC命令触发事务</p>',55);function v(T,V){const s=n("ExternalLinkIcon");return i(),r("div",null,[L,a("blockquote",null,[a("p",null,[e("官网："),a("a",I,[e("https://redis.io/docs/manual/transactions/"),c(s)])])]),S])}const N=t(E,[["render",v],["__file","五、Redis事务.html.vue"]]);export{N as default};
