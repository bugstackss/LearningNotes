const e=JSON.parse('{"key":"v-38465306","path":"/notes/javacore/java/06%E3%80%81%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88%E4%B8%8A%EF%BC%89.html","title":"06、面向对象（上）","lang":"zh-CN","frontmatter":{"title":"06、面向对象（上）","category":["Java"],"tag":["Java"],"sticky":false,"star":false,"article":true,"timeline":true,"description":"01、面向过程与面向对象 何谓“面向对象”的编程思想？ 首先解释一下“思想”。 先问你个问题：你想做个怎样的人？ 可能你会回答：我想做个好人，孝敬父母，尊重长辈，关爱亲朋… 你看，这就是思想。这是你做人的思想，或者说，是你做人的原则。做人有做人的原则，编程也有编程的原则。这些编程的原则呢，就是编程思想。 面向过程(POP) 与面向对象(OOP) 面向对...","head":[["meta",{"property":"og:url","content":"https://Ragnarokoo.github.io/LearningNotes/notes/javacore/java/06%E3%80%81%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88%E4%B8%8A%EF%BC%89.html"}],["meta",{"property":"og:site_name","content":"📚全栈开发学习指南"}],["meta",{"property":"og:title","content":"06、面向对象（上）"}],["meta",{"property":"og:description","content":"01、面向过程与面向对象 何谓“面向对象”的编程思想？ 首先解释一下“思想”。 先问你个问题：你想做个怎样的人？ 可能你会回答：我想做个好人，孝敬父母，尊重长辈，关爱亲朋… 你看，这就是思想。这是你做人的思想，或者说，是你做人的原则。做人有做人的原则，编程也有编程的原则。这些编程的原则呢，就是编程思想。 面向过程(POP) 与面向对象(OOP) 面向对..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://Ragnarokoo.github.io/LearningNotes/"}],["meta",{"property":"og:updated_time","content":"2023-05-31T09:16:41.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"06、面向对象（上）"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:modified_time","content":"2023-05-31T09:16:41.000Z"}]]},"excerpt":"","headers":[{"level":2,"title":"01、面向过程与面向对象","slug":"_01、面向过程与面向对象","link":"#_01、面向过程与面向对象","children":[]},{"level":2,"title":"02、 类和对象","slug":"_02、-类和对象","link":"#_02、-类和对象","children":[{"level":3,"title":"2.1、Java 类及类的成员","slug":"_2-1、java-类及类的成员","link":"#_2-1、java-类及类的成员","children":[]},{"level":3,"title":"2.2、类与对象的创建及使用","slug":"_2-2、类与对象的创建及使用","link":"#_2-2、类与对象的创建及使用","children":[]},{"level":3,"title":"2.3、对象的创建和使用：内存解析","slug":"_2-3、对象的创建和使用-内存解析","link":"#_2-3、对象的创建和使用-内存解析","children":[]}]},{"level":2,"title":"03、类的成员之一：属性","slug":"_03、类的成员之一-属性","link":"#_03、类的成员之一-属性","children":[]},{"level":2,"title":"04、 类的成员之二：方法","slug":"_04、-类的成员之二-方法","link":"#_04、-类的成员之二-方法","children":[{"level":3,"title":"4.1、类中方法的声明和使用","slug":"_4-1、类中方法的声明和使用","link":"#_4-1、类中方法的声明和使用","children":[]},{"level":3,"title":"4.2、理解“万事万物皆对象”","slug":"_4-2、理解-万事万物皆对象","link":"#_4-2、理解-万事万物皆对象","children":[]},{"level":3,"title":"4.3、对象数组的内存解析","slug":"_4-3、对象数组的内存解析","link":"#_4-3、对象数组的内存解析","children":[]},{"level":3,"title":"4.4、匿名对象的使用","slug":"_4-4、匿名对象的使用","link":"#_4-4、匿名对象的使用","children":[]},{"level":3,"title":"4.5、自定义数组的工具类","slug":"_4-5、自定义数组的工具类","link":"#_4-5、自定义数组的工具类","children":[]},{"level":3,"title":"4.6、方法的重载(overload)","slug":"_4-6、方法的重载-overload","link":"#_4-6、方法的重载-overload","children":[]},{"level":3,"title":"4.7、可变个数的形参","slug":"_4-7、可变个数的形参","link":"#_4-7、可变个数的形参","children":[]},{"level":3,"title":"4.8、方法参数的值传递机制(重点！！！)","slug":"_4-8、方法参数的值传递机制-重点","link":"#_4-8、方法参数的值传递机制-重点","children":[]},{"level":3,"title":"4.9、递归(recursion)方法","slug":"_4-9、递归-recursion-方法","link":"#_4-9、递归-recursion-方法","children":[]}]},{"level":2,"title":"05、面向对象特征之一：封装与隐藏","slug":"_05、面向对象特征之一-封装与隐藏","link":"#_05、面向对象特征之一-封装与隐藏","children":[{"level":3,"title":"5.1、四种权限修饰符的理解与测试","slug":"_5-1、四种权限修饰符的理解与测试","link":"#_5-1、四种权限修饰符的理解与测试","children":[]},{"level":3,"title":"5.2、封装性的练习","slug":"_5-2、封装性的练习","link":"#_5-2、封装性的练习","children":[]}]},{"level":2,"title":"06、 构造器(构造方法)","slug":"_06、-构造器-构造方法","link":"#_06、-构造器-构造方法","children":[{"level":3,"title":"6.1、构造器的理解","slug":"_6-1、构造器的理解","link":"#_6-1、构造器的理解","children":[]},{"level":3,"title":"6.2、总结属性赋值的过程","slug":"_6-2、总结属性赋值的过程","link":"#_6-2、总结属性赋值的过程","children":[]},{"level":3,"title":"6.3、JavaBean 的使用","slug":"_6-3、javabean-的使用","link":"#_6-3、javabean-的使用","children":[]},{"level":3,"title":"6.4、UML 类图","slug":"_6-4、uml-类图","link":"#_6-4、uml-类图","children":[]}]},{"level":2,"title":"07、关键字：this 的使用","slug":"_07、关键字-this-的使用","link":"#_07、关键字-this-的使用","children":[{"level":3,"title":"7.1、this 调用属性、方法、构造器","slug":"_7-1、this-调用属性、方法、构造器","link":"#_7-1、this-调用属性、方法、构造器","children":[]},{"level":3,"title":"7.2、this 的练习","slug":"_7-2、this-的练习","link":"#_7-2、this-的练习","children":[]}]},{"level":2,"title":"8、 关键字：package、import 的使用","slug":"_8、-关键字-package、import-的使用","link":"#_8、-关键字-package、import-的使用","children":[{"level":3,"title":"8.1、关键字—package","slug":"_8-1、关键字—package","link":"#_8-1、关键字—package","children":[]},{"level":3,"title":"8.2、MVC 设计模式","slug":"_8-2、mvc-设计模式","link":"#_8-2、mvc-设计模式","children":[]},{"level":3,"title":"8.3、关键字—import","slug":"_8-3、关键字—import","link":"#_8-3、关键字—import","children":[]}]}],"git":{"createdTime":1685524601000,"updatedTime":1685524601000,"contributors":[{"name":"kirito","email":"2724964601@qq.com","commits":1}]},"readingTime":{"minutes":39.93,"words":11980},"filePathRelative":"notes/javacore/java/06、面向对象（上）.md","localizedDate":"2023年5月31日"}');export{e as data};
