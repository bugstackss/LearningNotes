import{_ as i}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as p,c as r,d as t,e,b as s,a,r as o}from"./app.9b10ba0a.js";const c="/assets/what-is-typescript-vscode.213bac31.png",l="/assets/what-is-typescript-vue.50ecdffe.png",d="/assets/what-is-typescript-react.f31faf69.png",u={},h=t("blockquote",null,[t("p",null,[e("Typed JavaScript at Any Scale."),t("br"),e(" 添加了类型系统的 JavaScript，适用于任何规模的项目。")])],-1),_={href:"https://ts.xcatliu.com/introduction/what-is-typescript.html#link-1",target:"_blank",rel:"noopener noreferrer"},y=t("p",null,"它强调了 TypeScript 的两个最重要的特性——类型系统、适用于任何规模。",-1),S=t("h2",{id:"typescript-的特性",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#typescript-的特性","aria-hidden":"true"},"#"),e(" TypeScript 的特性")],-1),m=t("h3",{id:"类型系统",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#类型系统","aria-hidden":"true"},"#"),e(" 类型系统")],-1),k=t("p",null,"从 TypeScript 的名字就可以看出来，「类型」是其最核心的特性。",-1),v=t("p",null,"我们知道，JavaScript 是一门非常灵活的编程语言：",-1),g=t("li",null,"它没有类型约束，一个变量可能初始化时是字符串，过一会儿又被赋值为数字。",-1),b=t("li",null,"由于隐式类型转换的存在，有的变量的类型很难在运行前就确定。",-1),f=t("li",null,"基于原型的面向对象编程，使得原型上的属性或方法可以在运行时被修改。",-1),T={href:"https://ts.xcatliu.com/introduction/what-is-typescript.html#link-2",target:"_blank",rel:"noopener noreferrer"},x={href:"https://ts.xcatliu.com/introduction/what-is-typescript.html#link-3",target:"_blank",rel:"noopener noreferrer"},w=t("p",null,"而 TypeScript 的类型系统，在很大程度上弥补了 JavaScript 的缺点。",-1),J=t("h4",{id:"typescript-是静态类型",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#typescript-是静态类型","aria-hidden":"true"},"#"),e(" TypeScript 是静态类型")],-1),j=t("p",null,"类型系统按照「类型检查的时机」来分类，可以分为动态类型和静态类型。",-1),E={href:"https://ts.xcatliu.com/introduction/what-is-typescript.html#link-4",target:"_blank",rel:"noopener noreferrer"},C=a(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
foo<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Uncaught TypeError: foo.split is not a function</span>
<span class="token comment">// 运行时会报错（foo.split 不是一个函数），造成线上 bug</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>静态类型是指编译阶段就能确定每个变量的类型，这种语言的类型错误往往会导致语法错误。TypeScript 在运行前需要先编译为 JavaScript，而在编译阶段就会进行类型检查，所以 <strong>TypeScript 是静态类型</strong>，这段 TypeScript 代码在编译阶段就会报错了：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
foo<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Property &#39;split&#39; does not exist on type &#39;number&#39;.</span>
<span class="token comment">// 编译时会报错（数字没有 split 方法），无法通过编译</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可能会奇怪，这段 TypeScript 代码看上去和 JavaScript 没有什么区别呀。</p><p>没错！大部分 JavaScript 代码都只需要经过少量的修改（或者完全不用修改）就变成 TypeScript 代码，这得益于 TypeScript 强大的[类型推论][]，即使不去手动声明变量 <code>foo</code> 的类型，也能在变量初始化时自动推论出它是一个 <code>number</code> 类型。</p><p>完整的 TypeScript 代码是这样的：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
foo<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Property &#39;split&#39; does not exist on type &#39;number&#39;.</span>
<span class="token comment">// 编译时会报错（数字没有 split 方法），无法通过编译</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="typescript-是弱类型" tabindex="-1"><a class="header-anchor" href="#typescript-是弱类型" aria-hidden="true">#</a> TypeScript 是弱类型</h4><p>类型系统按照「是否允许隐式类型转换」来分类，可以分为强类型和弱类型。</p><p>以下这段代码不管是在 JavaScript 中还是在 TypeScript 中都是可以正常运行的，运行时数字 <code>1</code> 会被隐式类型转换为字符串 <code>&#39;1&#39;</code>，加号 <code>+</code> 被识别为字符串拼接，所以打印出结果是字符串 <code>&#39;11&#39;</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 打印出字符串 &#39;11&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>TypeScript 是完全兼容 JavaScript 的，它不会修改 JavaScript 运行时的特性，所以<strong>它们都是弱类型</strong>。</p><p>作为对比，Python 是强类型，以下代码会在运行时报错：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># TypeError: unsupported operand type(s) for +: &#39;int&#39; and &#39;str&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>若要修复该错误，需要进行强制类型转换：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># 打印出字符串 &#39;11&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>强/弱是相对的，Python 在处理整型和浮点型相加时，会将整型隐式转换为浮点型，但是这并不影响 Python 是强类型的结论，因为大部分情况下 Python 并不会进行隐式类型转换。相比而言，JavaScript 和 TypeScript 中不管加号两侧是什么类型，都可以通过隐式类型转换计算出一个结果——而不是报错——所以 JavaScript 和 TypeScript 都是弱类型。</p></blockquote>`,17),V={href:"https://ts.xcatliu.com/introduction/what-is-typescript.html#link-5",target:"_blank",rel:"noopener noreferrer"},A={href:"https://ts.xcatliu.com/introduction/what-is-typescript.html#link-6",target:"_blank",rel:"noopener noreferrer"},D=t("h3",{id:"适用于任何规模",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#适用于任何规模","aria-hidden":"true"},"#"),e(" 适用于任何规模")],-1),N=t("p",null,"TypeScript 非常适用于大型项目——这是显而易见的，类型系统可以为大型项目带来更高的可维护性，以及更少的 bug。",-1),P=t("p",null,"在中小型项目中推行 TypeScript 的最大障碍就是认为使用 TypeScript 需要写额外的代码，降低开发效率。但事实上，由于有[类型推论][]，大部分类型都不需要手动声明了。相反，TypeScript 增强了编辑器（IDE）的功能，包括代码补全、接口提示、跳转到定义、代码重构等，这在很大程度上提高了开发效率。而且 TypeScript 有近百个[编译选项][]，如果你认为类型检查过于严格，那么可以通过修改编译选项来降低类型检查的标准。",-1),L=t("p",null,"TypeScript 还可以和 JavaScript 共存。这意味着如果你有一个使用 JavaScript 开发的旧项目，又想使用 TypeScript 的特性，那么你不需要急着把整个项目都迁移到 TypeScript，你可以使用 TypeScript 编写新文件，然后在后续更迭中逐步迁移旧文件。如果一些 JavaScript 文件的迁移成本太高，TypeScript 也提供了一个方案，可以让你在不修改 JavaScript 文件的前提下，编写一个[类型声明文件][]，实现旧项目的渐进式迁移。",-1),M={href:"https://ts.xcatliu.com/introduction/what-is-typescript.html#link-7",target:"_blank",rel:"noopener noreferrer"},q=t("p",null,[t("img",{src:c,alt:"what-is-typescript-vscode"})],-1),I={href:"https://ts.xcatliu.com/introduction/what-is-typescript.html#link-8",target:"_blank",rel:"noopener noreferrer"},B=t("p",null,[t("img",{src:l,alt:"what-is-typescript-vue"})],-1),R={href:"https://ts.xcatliu.com/introduction/what-is-typescript.html#link-9",target:"_blank",rel:"noopener noreferrer"},G=t("code",null,"npm install --save-dev @types/react",-1),O=t("p",null,[t("img",{src:d,alt:"what-is-typescript-react"})],-1),U=t("p",null,"由此可见，TypeScript 的发展已经深入到前端社区的方方面面了，任何规模的项目都或多或少得到了 TypeScript 的支持。",-1),z=t("h3",{id:"与标准同步发展",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#与标准同步发展","aria-hidden":"true"},"#"),e(" 与标准同步发展")],-1),F={href:"https://ts.xcatliu.com/introduction/what-is-typescript.html#link-10",target:"_blank",rel:"noopener noreferrer"},H=t("p",null,"ECMAScript 是 JavaScript 核心语法的标准，自 2015 年起，每年都会发布一个新版本，包含一些新的语法。",-1),K=t("p",null,"一个新的语法从提案到变成正式标准，需要经历以下几个阶段：",-1),Q=t("ul",null,[t("li",null,"Stage 0：展示阶段，仅仅是提出了讨论、想法，尚未正式提案。"),t("li",null,"Stage 1：征求意见阶段，提供抽象的 API 描述，讨论可行性，关键算法等。"),t("li",null,"Stage 2：草案阶段，使用正式的规范语言精确描述其语法和语义。"),t("li",null,"Stage 3：候选人阶段，语法的设计工作已完成，需要浏览器、Node.js 等环境支持，搜集用户的反馈。"),t("li",null,"Stage 4：定案阶段，已准备好将其添加到正式的 ECMAScript 标准中。")],-1),W=t("p",null,"一个语法进入到 Stage 3 阶段后，TypeScript 就会实现它。一方面，让我们可以尽早的使用到最新的语法，帮助它进入到下一个阶段；另一方面，处于 Stage 3 阶段的语法已经比较稳定了，基本不会有语法的变更，这使得我们能够放心的使用它。",-1),X=t("code",null,"?.",-1),Y={href:"https://ts.xcatliu.com/introduction/what-is-typescript.html#link-11",target:"_blank",rel:"noopener noreferrer"},Z=t("code",null,"??",-1),$={href:"https://ts.xcatliu.com/introduction/what-is-typescript.html#link-12",target:"_blank",rel:"noopener noreferrer"},tt={href:"https://ts.xcatliu.com/introduction/what-is-typescript.html#link-13",target:"_blank",rel:"noopener noreferrer"},et={href:"https://ts.xcatliu.com/introduction/what-is-typescript.html#link-14",target:"_blank",rel:"noopener noreferrer"},nt=a('<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>什么是 TypeScript？</p><ul><li>TypeScript 是添加了类型系统的 JavaScript，适用于任何规模的项目。</li><li>TypeScript 是一门静态类型、弱类型的语言。</li><li>TypeScript 是完全兼容 JavaScript 的，它不会修改 JavaScript 运行时的特性。</li><li>TypeScript 可以编译为 JavaScript，然后运行在浏览器、Node.js 等任何能运行 JavaScript 的环境中。</li><li>TypeScript 拥有很多编译选项，类型检查的严格程度由你决定。</li><li>TypeScript 可以和 JavaScript 共存，这意味着 JavaScript 项目能够渐进式的迁移到 TypeScript。</li><li>TypeScript 增强了编辑器（IDE）的功能，提供了代码补全、接口提示、跳转到定义、代码重构等能力。</li><li>TypeScript 拥有活跃的社区，大多数常用的第三方库都提供了类型声明。</li><li>TypeScript 与标准同步发展，符合最新的 ECMAScript 标准（stage 3）。</li></ul><h2 id="附-typescript-的发展历史" tabindex="-1"><a class="header-anchor" href="#附-typescript-的发展历史" aria-hidden="true">#</a> 附：TypeScript 的发展历史</h2><ul><li>2012-10：微软发布了 TypeScript 第一个版本（0.8），此前已经在微软内部开发了两年。</li><li>2014-04：TypeScript 发布了 1.0 版本。</li><li>2014-10：Angular 发布了 2.0 版本，它是一个基于 TypeScript 开发的前端框架。</li><li>2015-01：ts-loader 发布，webpack 可以编译 TypeScript 文件了。</li><li>2015-04：微软发布了 Visual Studio Code，它内置了对 TypeScript 语言的支持，它自身也是用 TypeScript 开发的。</li><li>2016-05：<code>@types/react</code> 发布，TypeScript 可以开发 React 应用了。</li><li>2016-05：<code>@types/node</code> 发布，TypeScript 可以开发 Node.js 应用了。</li><li>2016-09：TypeScript 发布了 2.0 版本。</li><li>2018-06：TypeScript 发布了 3.0 版本。</li><li>2019-02：TypeScript 宣布由官方团队来维护 typescript-eslint，以支持在 TypeScript 文件中运行 ESLint 检查。</li><li>2020-05：Deno 发布了 1.0 版本，它是一个 JavaScript 和 TypeScript 运行时。</li><li>2020-08：TypeScript 发布了 4.0 版本。</li><li>2020-09：Vue 发布了 3.0 版本，官方支持 TypeScript。</li></ul><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>',6),st={href:"https://www.typescriptlang.org/",target:"_blank",rel:"noopener noreferrer"},at={href:"https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch2.html",target:"_blank",rel:"noopener noreferrer"},it={href:"https://insights.stackoverflow.com/survey/2020",target:"_blank",rel:"noopener noreferrer"},pt={href:"https://web.stanford.edu/class/cs98si/slides/overview.html",target:"_blank",rel:"noopener noreferrer"},rt={href:"https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/restrict-plus-operands.md",target:"_blank",rel:"noopener noreferrer"},ot=t("code",null,"restrict-plus-operands",-1),ct={href:"https://github.com/microsoft/TypeScript/wiki/TypeScript-Design-Goals",target:"_blank",rel:"noopener noreferrer"},lt={href:"https://code.visualstudio.com/docs/languages/typescript",target:"_blank",rel:"noopener noreferrer"},dt={href:"https://v3.vuejs.org/guide/typescript-support.html",target:"_blank",rel:"noopener noreferrer"},ut={href:"https://github.com/DefinitelyTyped/DefinitelyTyped",target:"_blank",rel:"noopener noreferrer"},ht={href:"https://tc39.es/process-document/",target:"_blank",rel:"noopener noreferrer"},_t={href:"https://github.com/tc39/proposal-optional-chaining",target:"_blank",rel:"noopener noreferrer"},yt=t("code",null,"?.",-1),St={href:"https://github.com/tc39/proposal-nullish-coalescing",target:"_blank",rel:"noopener noreferrer"},mt=t("code",null,"??",-1),kt={href:"https://github.com/tc39/proposal-throw-expressions",target:"_blank",rel:"noopener noreferrer"},vt={href:"https://github.com/tc39/proposal-regexp-match-indices",target:"_blank",rel:"noopener noreferrer"};function gt(bt,ft){const n=o("ExternalLinkIcon");return p(),r("div",null,[h,t("p",null,[e("以上描述是官网["),t("a",_,[e("1]"),s(n)]),e("对于 TypeScript 的定义。")]),y,S,m,k,v,t("ul",null,[g,b,f,t("li",null,[e("函数是 JavaScript 中的一等公民["),t("a",T,[e("2]"),s(n)]),e("，可以赋值给变量，也可以当作参数或返回值。")])]),t("p",null,[e("这种灵活性就像一把双刃剑，一方面使得 JavaScript 蓬勃发展，无所不能，从 2013 年开始就一直蝉联最普遍使用的编程语言排行榜冠军["),t("a",x,[e("3]"),s(n)]),e("；另一方面也使得它的代码质量参差不齐，维护成本高，运行时错误多。")]),w,J,j,t("p",null,[e("动态类型是指在运行时才会进行类型检查，这种语言的类型错误往往会导致运行时错误。JavaScript 是一门解释型语言["),t("a",E,[e("4]"),s(n)]),e("，没有编译阶段，所以它是动态类型，以下这段代码在运行时才会报错：")]),C,t("blockquote",null,[t("p",null,[e("虽然 TypeScript 不限制加号两侧的类型，但是我们可以借助 TypeScript 提供的类型系统，以及 ESLint 提供的代码检查功能，来限制加号两侧必须同为数字或同为字符串["),t("a",V,[e("5]"),s(n)]),e("。这在一定程度上使得 TypeScript 向「强类型」更近一步了——当然，这种限制是可选的。")])]),t("p",null,[e("这样的类型系统体现了 TypeScript 的核心设计理念["),t("a",A,[e("6]"),s(n)]),e("：在完整保留 JavaScript 运行时行为的基础上，通过引入静态类型系统来提高代码的可维护性，减少可能出现的 bug。")]),D,N,P,L,t("p",null,[e("事实上，就算你从来没学习过 TypeScript，你也可能已经在不知不觉中使用到了 TypeScript——在 VSCode 编辑器中编写 JavaScript 时，代码补全和接口提示等功能就是通过 TypeScript Language Service 实现的["),t("a",M,[e("7]"),s(n)]),e("：")]),q,t("p",null,[e("一些第三方库原生支持了 TypeScript，在使用时就能获得代码补全了，比如 Vue 3.0["),t("a",I,[e("8]"),s(n)]),e("：")]),B,t("p",null,[e("有一些第三方库原生不支持 TypeScript，但是可以通过安装社区维护的类型声明库["),t("a",R,[e("9]"),s(n)]),e("（比如通过运行 "),G,e(" 来安装 React 的类型声明库）来获得代码补全能力——不管是在 JavaScript 项目中还是在 TypeScript 中项目中都是支持的：")]),O,U,z,t("p",null,[e("TypeScript 的另一个重要的特性就是坚持与 ECMAScript 标准["),t("a",F,[e("10]"),s(n)]),e("同步发展。")]),H,K,Q,W,t("p",null,[e("除了实现 ECMAScript 标准之外，TypeScript 团队也推进了诸多语法提案，比如可选链操作符（"),X,e("）["),t("a",Y,[e("11]"),s(n)]),e("、空值合并操作符（"),Z,e("）["),t("a",$,[e("12]"),s(n)]),e("、Throw 表达式["),t("a",tt,[e("13]"),s(n)]),e("、正则匹配索引["),t("a",et,[e("14]"),s(n)]),e("等。")]),nt,t("ol",null,[t("li",null,[t("a",st,[e("TypeScript 官网"),s(n)])]),t("li",null,[t("a",at,[e("第 2 章: 一等公民的函数"),s(n)]),e(" · 函数式编程指北")]),t("li",null,[t("a",it,[e("StackOverflow 2020 开发者调查报告"),s(n)])]),t("li",null,[t("a",pt,[e("斯坦福 JavaScript 第一课"),s(n)])]),t("li",null,[t("a",rt,[e("TypeScript ESLint 规则 "),ot,s(n)])]),t("li",null,[t("a",ct,[e("TypeScript 设计理念"),s(n)])]),t("li",null,[t("a",lt,[e("Visual Studio Code 中集成了 TypeScript"),s(n)])]),t("li",null,[t("a",dt,[e("Vue 3.0 支持 TypeScript"),s(n)])]),t("li",null,[t("a",ut,[e("Definitely Typed"),s(n)]),e("——TypeScript 团队帮助维护的类型定义仓库")]),t("li",null,[t("a",ht,[e("ECMAScript 标准"),s(n)])]),t("li",null,[t("a",_t,[e("可选链操作符（"),yt,e("）"),s(n)])]),t("li",null,[t("a",St,[e("空值合并操作符（"),mt,e("）"),s(n)])]),t("li",null,[t("a",kt,[e("Throw 表达式"),s(n)])]),t("li",null,[t("a",vt,[e("正则匹配索引"),s(n)])])])])}const wt=i(u,[["render",gt],["__file","1. 什么是Typescript.html.vue"]]);export{wt as default};
