import{_ as i}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as t,c as r,d as s,e as a,b as l,a as n,r as c}from"./app.9b10ba0a.js";const o="/assets/2023-05-18-18-54-18-image.e5fab7c4.png",p="/assets/2023-05-18-18-56-01-image.57bea053.png",d="/assets/2023-05-18-18-56-08-image.b61fe607.png",u="/assets/2023-05-18-18-57-05-image.bcc3fd67.png",m="/assets/2023-05-18-18-59-17-image.96ce455b.png",b="/assets/2023-05-18-19-00-11-image.5068a23b.png",g="/assets/2023-05-18-19-00-20-image.28e781dc.png",v="/assets/2023-05-18-19-01-14-image.ac77c31b.png",h="/assets/2023-05-18-19-01-35-image.b300bd82.png",k="/assets/2023-05-18-19-06-14-image.21a752dc.png",_="/assets/2023-05-18-19-07-22-image.83117e79.png",f="/assets/2023-05-18-19-08-05-image.17e9184a.png",y="/assets/2023-05-18-19-09-12-image.2a523d4a.png",E="/assets/2023-05-18-19-09-50-image.635e9f4b.png",x="/assets/2023-05-18-19-10-33-image.ece6b14b.png",B="/assets/2023-05-18-19-10-40-image.bc891dbd.png",z={},A=n('<h2 id="一、本地镜像发布到私有库流程" tabindex="-1"><a class="header-anchor" href="#一、本地镜像发布到私有库流程" aria-hidden="true">#</a> 一、本地镜像发布到私有库流程</h2><p><img src="'+o+'" alt=""></p><h2 id="二、是什么" tabindex="-1"><a class="header-anchor" href="#二、是什么" aria-hidden="true">#</a> 二、是什么</h2><blockquote><p>Docker Registry</p></blockquote>',4),q={href:"https://hub.docker.com/%EF%BC%8C%E4%B8%AD%E5%9B%BD%E5%A4%A7%E9%99%86%E8%AE%BF%E9%97%AE%E5%A4%AA%E6%85%A2%E4%BA%86%E4%B8%94%E5%87%86%E5%A4%87%E8%A2%AB%E9%98%BF%E9%87%8C%E4%BA%91%E5%8F%96%E4%BB%A3%E7%9A%84%E8%B6%8B%E5%8A%BF%EF%BC%8C%E4%B8%8D%E5%A4%AA%E4%B8%BB%E6%B5%81%E3%80%82",target:"_blank",rel:"noopener noreferrer"},D=n(`<p>2 Dockerhub、阿里云这样的公共镜像仓库可能不太方便，涉及机密的公司不可能提供镜像给公网，所以需要创建一个本地私人仓库供给团队使用，基于公司内部项目构建镜像。</p><p>Docker Registry是官方提供的工具，可以用于构建私有镜像仓库</p><h2 id="三、将本地镜像推送到私有库" tabindex="-1"><a class="header-anchor" href="#三、将本地镜像推送到私有库" aria-hidden="true">#</a> 三、将本地镜像推送到私有库</h2><ol><li>下载镜像Docker Registry</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull registry 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+p+'" alt=""></p><p><img src="'+d+`" alt=""></p><ol start="2"><li>运行私有库Registry，相当与本地有个私有Docker Hub</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">5000</span>:5000 <span class="token parameter variable">-v</span> /zzyyuse/myregistry/:/tmp/registry <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true registry
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>默认情况，仓库被创建在容器的/var/lib/registry目录下，建议自行用容器卷映射，方便于宿主机联调</p><p><img src="`+u+'" alt=""></p><ol start="3"><li>案例演示创建一个新镜像，ubuntu安装ifconfig命令</li></ol><p>从Hub上下载ubuntu镜像到本地并成功运行</p><p>原始的Ubuntu镜像是不带着ifconfig命令的</p><p><img src="'+m+`" alt=""></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-it</span> ubuntu /bin/bash
<span class="token function">ifconfig</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>外网连通的情况下，安装ifconfig命令并测试通过</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># docker容器内执行上述两条命令：</span>

<span class="token function">apt-get</span> update

<span class="token function">apt-get</span> <span class="token function">install</span> net-tools
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+b+'" alt=""></p><p><img src="'+g+`" alt=""></p><p>安装完成后，commit我们自己的新镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>公式：

<span class="token function">docker</span> commit <span class="token parameter variable">-m</span><span class="token operator">=</span><span class="token string">&quot;提交的描述信息&quot;</span> <span class="token parameter variable">-a</span><span class="token operator">=</span><span class="token string">&quot;作者&quot;</span> 容器ID 要创建的目标镜像名:<span class="token punctuation">[</span>标签名<span class="token punctuation">]</span>

命令：在容器外执行，记得

<span class="token function">docker</span> commit <span class="token parameter variable">-m</span><span class="token operator">=</span><span class="token string">&quot;ifconfig cmd add&quot;</span> <span class="token parameter variable">-a</span><span class="token operator">=</span><span class="token string">&quot;zzyy&quot;</span> a69d7c825c4f zzyyubuntu:1.2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+v+'" alt=""></p><p>启动我们的新镜像并和原来的对比</p><p>1 官网是默认下载的Ubuntu没有ifconfig命令</p><p>2我们自己commit构建的新镜像，新增加了ifconfig功能，可以成功使用。</p><p><img src="'+h+`" alt=""></p><ol start="4"><li>curl验证私服库上有什么镜像</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> http://192.168.111.162:5000/v2/_catalog
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+k+`" alt=""></p><ol start="5"><li>将新镜像zzyyubuntu:1.2修改符合私服规范的Tag</li></ol><p>按照公式： docker   tag   镜像:Tag   Host:Port/Repository:Tag</p><p>自己host主机IP地址，填写同学你们自己的，不要粘贴错误，O(∩_∩)O</p><p>使用命令 docker tag 将zzyyubuntu:1.2 这个镜像修改为192.168.111.162:5000/zzyyubuntu:1.2</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> tag  zzyyubuntu:1.2  <span class="token number">192.168</span>.111.162:5000/zzyyubuntu:1.2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+_+'" alt=""></p><ol start="6"><li>修改配置文件使之支持http</li></ol><p><img src="'+f+`" alt=""></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>别无脑照着复制，registry-mirrors 配置的是国内阿里提供的镜像加速地址，不用加速的话访问官网的会很慢。
2个配置中间有个逗号 &#39;,&#39;别漏了，这个配置是json格式的。
2个配置中间有个逗号 &#39;,&#39;别漏了，这个配置是json格式的。
2个配置中间有个逗号 &#39;,&#39;别漏了，这个配置是json格式的。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>vim命令新增如下红色内容：vim /etc/docker/daemon.json</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;registry-mirrors&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;https://aa25jngu.mirror.aliyuncs.com&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;insecure-registries&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;192.168.111.162:5000&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述理由：docker默认不允许http方式推送镜像，通过配置选项来取消这个限制。====&gt; 修改完后如果不生效，建议重启docker</p><ol start="7"><li>push推送到私服库</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> push <span class="token number">192.168</span>.111.162:5000/zzyyubuntu:1.2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+y+`" alt=""></p><ol start="8"><li>curl验证私服库上有什么镜像2</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-XGET</span> http://192.168.111.162:5000/v2/_catalog
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+E+`" alt=""></p><ol start="9"><li>pull到本地并运行</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull <span class="token number">192.168</span>.111.162:5000/zzyyubuntu:1.2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+x+`" alt=""></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-it</span> 镜像ID /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+B+'" alt=""></p>',53);function j(C,F){const e=c("ExternalLinkIcon");return t(),r("div",null,[A,s("p",null,[a("1 官方Docker Hub地址："),s("a",q,[a("https://hub.docker.com/，中国大陆访问太慢了且准备被阿里云取代的趋势，不太主流。"),l(e)])]),D])}const R=i(z,[["render",j],["__file","6.本地镜像发布到私有库.html.vue"]]);export{R as default};
