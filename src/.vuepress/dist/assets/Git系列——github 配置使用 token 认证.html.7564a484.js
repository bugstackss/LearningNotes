import{_ as s}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c as i,d as t,e,b as a,a as p,r}from"./app.9b10ba0a.js";const c="/assets/2521998-20221107132346793-95265326.ab00d97e.png",l="/assets/2521998-20221107132446029-1774532634.907b4451.png",g="/assets/2521998-20221107132646979-1826497123.5fa6d303.png",m="/assets/2521998-20221107132912658-471910811.a6281a9e.png",_="/assets/2521998-20221107134428456-1058266091.3bfa0e9f.png",d="/assets/2521998-20221107141447851-1083349002.938e8387.png",u="/assets/2521998-20221107141931955-862629418.642af694.png",k="/assets/638135-20210818115740523-1311579690.9ebe4928.png",h="/assets/638135-20210818115928357-1209205513.08568b80.png",b={},f=t("h2",{id:"git系列——github-配置使用-token-认证",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#git系列——github-配置使用-token-认证","aria-hidden":"true"},"#"),e(" Git系列——github 配置使用 token 认证")],-1),v=t("p",null,"官方日志：从 2021 年 8 月 13 日开始，我们将在对 Git 操作进行身份验证时不再接受帐户密码，并将要求使用基于令牌（token）的身份验证。",-1),G={href:"https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/",target:"_blank",rel:"noopener noreferrer"},x=p('<p>由此，我们需要设置token身份验证</p><p><strong>获取Token步骤</strong></p><p>1、在个人设置页面，找到Setting</p><p><img src="'+c+'" alt="img"></p><p>2、滑动到页面最下面，点击：Developer settings</p><p><img src="'+l+'" alt="img"></p><p>3、点击：Personal access tokens，展开选择：Tokens (classic)</p><p><img src="'+g+'" alt="img"></p><p>4、点击：Generate new token（classic），新增token时需要输入gitHub账户的密码校验</p><p><img src="'+m+'" alt="img"></p><p>5、设置token的有效期，访问权限等</p><p>token的范围看情况选择：</p><ol><li>如果要使用token从命令行访问仓库，选择repo。</li><li>如果要使用token从命令行删除仓库，选择delete_repo</li><li>其他根据需要进行勾选(将下面的全部勾选，就可以跟账号密码权限一样)</li></ol><p><img src="'+_+'" alt="img"></p><p>6、点击：Generate token</p><p><img src="'+d+'" alt="img"></p><p>7、展示已生成的token，记得保存好</p><p><strong>注意：保存好这个token！！</strong></p><p><img src="'+u+`" alt="img"></p><p><strong>使用Token</strong></p><p>1、在推送代码时，使用生成的token登录，把上面生成的token粘贴到输入密码的位置，然后即可成功push代码</p><p>2、关联远程仓库时，项目地址上需拼接上刚才生成token</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> remote <span class="token function">add</span> origin <span class="token punctuation">[</span>你的项目地址（包含token）<span class="token punctuation">]</span>

<span class="token comment"># 示例：</span>
<span class="token function">git</span> remote <span class="token function">add</span> origin https://github.com/nakanomay/git-demo.git
<span class="token comment"># 然后会提示输入用户名密码（这里的用户名【就是你的github用户名】、密码【就是token】）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>也可以设置一下MACOS 修改个人令牌</p><p>网上有教程说生成后在 push 的时候就会提示输入用户名密码，密码处填写个人令牌即可。可是我生成后 push 还和之前一样。查看了 GitHub 官方说明后，MacOS 需要修改钥匙串访问。 我们的 GitHub 提交账号密码保存在 MacOS 自带的钥匙串访问中，我们找到 GitHub：</p><p><img src="`+k+'" alt="img"></p><p>然后点击显示密码，将里面的密码修改成我们上面拷贝的个人令牌即可。</p><p><img src="'+h+'" alt="img"></p>',29);function S(H,N){const n=r("ExternalLinkIcon");return o(),i("div",null,[f,v,t("p",null,[e("官方日志网址："),t("a",G,[e("https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/"),a(n)])]),x])}const B=s(b,[["render",S],["__file","Git系列——github 配置使用 token 认证.html.vue"]]);export{B as default};
