import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as p,c as o,d as n,e as s,b as t,a as c,r as l}from"./app.9b10ba0a.js";const i="/assets/b7669b401aae4d368994266c4d103483-20230304221232644.504f80af.png",u="/assets/7f7c176b48cc41029a8a53e32db35594-20230304221339613.4aa303e1.png",r="/assets/7637753717ee4c63887216d1b9d5d51b-20230304221339638.dd63a278.png",d="/assets/a2a18963284547758e2038a68b3f8041-20230304221339683.b49cbd9c.png",k="/assets/8f778fd03dca4046a99515eda0d40c3c-20230304221339631.00bbc175.png",v="/assets/28a198addc5d466fa86aba2da52e8648-20230304221339638.830a5c91.png",m="/assets/346241a80c4c4e6c807812b396b00ce2-20230304221339629.80e61801.png",h="/assets/72884a4c78184c3eb6bf3cd3ef757e5b-20230304221339693.c277f061.png",b="/assets/0a49afb5c4774608807ddf5938b03e3a-20230304221339695.711a1298.png",g={},y=n("h1",{id:"_05、javascript",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_05、javascript","aria-hidden":"true"},"#"),s(" 05、JavaScript")],-1),q=n("h2",{id:"一、javascript简介",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#一、javascript简介","aria-hidden":"true"},"#"),s(" 一、JavaScript简介")],-1),f=n("p",null,"参考文章：",-1),x={href:"https://www.cnblogs.com/zhaostudy/p/16733510.html",target:"_blank",rel:"noopener noreferrer"},j={href:"https://www.cnblogs.com/zhaostudy/p/16051571.html",target:"_blank",rel:"noopener noreferrer"},w={href:"https://www.cnblogs.com/zhaostudy/p/15883773.html",target:"_blank",rel:"noopener noreferrer"},S=c('<h3 id="_1、起源" tabindex="-1"><a class="header-anchor" href="#_1、起源" aria-hidden="true">#</a> 1、起源</h3><p>在<strong>1995</strong>年时，由<strong>Netscape</strong>公司的<strong>Brendan Eich</strong>，在网景导航者浏览器上首次设计实现而成。Netscape在最初将其脚本语言命名为LiveScript，因为Netscape与Sun合作，网景公司管理层希望它外观看起来像Java，因此取名为JavaScript。</p><h3 id="_2、特性" tabindex="-1"><a class="header-anchor" href="#_2、特性" aria-hidden="true">#</a> 2、特性</h3><h4 id="脚本语言" tabindex="-1"><a class="header-anchor" href="#脚本语言" aria-hidden="true">#</a> 脚本语言</h4><p>JavaScript是一种解释型的脚本语言。不同于C、C++、Java等语言先编译后执行, JavaScript不会产生编译出来的字节码文件，而是在程序的运行过程中对源文件逐行进行解释。</p><h4 id="基于对象" tabindex="-1"><a class="header-anchor" href="#基于对象" aria-hidden="true">#</a> 基于对象</h4><p>JavaScript是一种基于对象的脚本语言，它不仅可以创建对象，也能使用现有的对象。但是面向对象的三大特性：『封装』、『继承』、『多态』中，JavaScript能够实现封装，可以模拟继承，不支持多态，所以它不是一门面向对象的编程语言。</p><h4 id="弱类型" tabindex="-1"><a class="header-anchor" href="#弱类型" aria-hidden="true">#</a> 弱类型</h4><p>JavaScript中也有明确的数据类型，但是声明一个变量后它可以接收任何类型的数据，并且会在程序执行过程中根据上下文自动转换类型。</p><h4 id="事件驱动" tabindex="-1"><a class="header-anchor" href="#事件驱动" aria-hidden="true">#</a> 事件驱动</h4><p>JavaScript是一种采用事件驱动的脚本语言，它不需要经过Web服务器就可以对用户的输入做出响应。</p><h4 id="跨平台性" tabindex="-1"><a class="header-anchor" href="#跨平台性" aria-hidden="true">#</a> 跨平台性</h4><p>JavaScript脚本语言不依赖于操作系统，仅需要浏览器的支持。因此一个JavaScript脚本在编写后可以带到任意机器上使用，前提是机器上的浏览器支持JavaScript脚本语言。目前JavaScript已被大多数的浏览器所支持。</p><h2 id="二、js-helloworld" tabindex="-1"><a class="header-anchor" href="#二、js-helloworld" aria-hidden="true">#</a> 二、JS-HelloWorld</h2><h3 id="_1、功能效果图" tabindex="-1"><a class="header-anchor" href="#_1、功能效果图" aria-hidden="true">#</a> 1、功能效果图</h3><p><img src="'+i+`" alt="image.png"></p><h3 id="_2、代码实现" tabindex="-1"><a class="header-anchor" href="#_2、代码实现" aria-hidden="true">#</a> 2、代码实现</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>utf-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>HelloWorld<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- 在HTML代码中定义一个按钮 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>helloBtn<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>SayHello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- 在script标签中编写JavaScript代码 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">

        <span class="token comment">// document对象代表整个HTML文档</span>
        <span class="token comment">// document对象调用getElementById()方法表示根据id查找对应的元素对象</span>
        <span class="token keyword">var</span> btnElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;helloBtn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 给按钮元素对象绑定单击响应函数</span>
        btnElement<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

            <span class="token comment">// 弹出警告框</span>
            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、javascript基本语法" tabindex="-1"><a class="header-anchor" href="#三、javascript基本语法" aria-hidden="true">#</a> 三、JavaScript基本语法</h2><h3 id="_1、javascript代码嵌入方式" tabindex="-1"><a class="header-anchor" href="#_1、javascript代码嵌入方式" aria-hidden="true">#</a> 1、JavaScript代码嵌入方式</h3><h4 id="html文档内" tabindex="-1"><a class="header-anchor" href="#html文档内" aria-hidden="true">#</a> HTML文档内</h4><ul><li>JavaScript代码要写在script标签内</li><li>script标签可以写在文档内的任意位置</li><li>为了能够方便查询或操作HTML标签（元素）script标签可以写在body标签后面</li></ul><p>可以参考简化版的HelloWorld</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 在HBuilderX中，script标签通过打字“sc”两个字母就可以直接完整生成 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">

    <span class="token comment">// 下面是同样实现HelloWorld功能的简化版代码</span>
    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;helloBtn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Hello simple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="引入外部javascript文档" tabindex="-1"><a class="header-anchor" href="#引入外部javascript文档" aria-hidden="true">#</a> 引入外部JavaScript文档</h4><p>在script标签内通过src属性指定外部xxx.js文件的路径即可。但是要注意以下两点：</p><ul><li>引用外部JavaScript文件的script标签里面不能写JavaScript代码</li><li>先引入，再使用</li><li>script标签不能写成单标签</li></ul><p><img src="`+u+`" alt="image.png"></p><p>引入方式如下：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 使用script标签的src属性引用外部JavaScript文件，和Java中的import语句类似 --&gt;</span>
<span class="token comment">&lt;!-- 引用外部JavaScript文件的script标签里面不能写JavaScript代码 --&gt;</span>
<span class="token comment">&lt;!-- 引用外部JavaScript文件的script标签不能改成单标签 --&gt;</span>
<span class="token comment">&lt;!-- 外部JavaScript文件一定要先引入再使用 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/pro02-JavaScript/scripts/outter.js<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>utf-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">

    <span class="token comment">// 调用外部JavaScript文件中声明的方法</span>
    <span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、声明和使用变量" tabindex="-1"><a class="header-anchor" href="#_2、声明和使用变量" aria-hidden="true">#</a> 2、声明和使用变量</h3><h4 id="javascript数据类型" tabindex="-1"><a class="header-anchor" href="#javascript数据类型" aria-hidden="true">#</a> JavaScript数据类型</h4><p>基本数据类型</p><ul><li><p>数值型：JavaScript不区分整数、小数</p></li><li><p>字符串：JavaScript不区分字符、字符串；单引号、双引号意思一样。</p></li><li><p>布尔型：true、false</p><p>在JavaScript中，其他类型和布尔类型的自动转换。</p><ul><li>true：非零的数值，非空字符串，非空对象</li><li>false：零，空字符串，null，undefined</li></ul><p>例如：&quot;false&quot;放在if判断中</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// &quot;false&quot;是一个非空字符串，直接放在if判断中会被当作『真』处理</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;false&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;false&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>引用类型 <ul><li>所有new出来的对象</li><li>用[]声明的数组</li><li>用{}声明的对象</li></ul></li></ul><h4 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h4><ul><li><p>关键字：var</p></li><li><p>数据类型：JavaScript变量可以接收任意类型的数据</p></li><li><p>标识符：严格区分大小写</p></li><li><p>变量使用规则</p><ul><li><p>如果使用了一个没有声明的变量，那么会在运行时报错</p><p>Uncaught ReferenceError: b is not defined</p></li><li><p>如果声明一个变量没有初始化，那么这个变量的值就是undefined</p></li></ul></li></ul><h3 id="_3、函数" tabindex="-1"><a class="header-anchor" href="#_3、函数" aria-hidden="true">#</a> 3、函数</h3><h4 id="内置函数" tabindex="-1"><a class="header-anchor" href="#内置函数" aria-hidden="true">#</a> 内置函数</h4><p>内置函数：系统已经声明好了可以直接使用的函数。</p><h5 id="弹出警告框" tabindex="-1"><a class="header-anchor" href="#弹出警告框" aria-hidden="true">#</a> 弹出警告框</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;警告框内容&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="弹出确认框" tabindex="-1"><a class="header-anchor" href="#弹出确认框" aria-hidden="true">#</a> 弹出确认框</h5><p>用户点击『确定』返回true，点击『取消』返回false</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">&quot;老板，你真的不加个钟吗？&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;老板点了确定，表示要加钟&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;老板点了确定，表示不加钟&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="在控制台打印日志" tabindex="-1"><a class="header-anchor" href="#在控制台打印日志" aria-hidden="true">#</a> 在控制台打印日志</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;日志内容&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+r+`" alt="image.png"></p><h4 id="声明函数" tabindex="-1"><a class="header-anchor" href="#声明函数" aria-hidden="true">#</a> 声明函数</h4><p>写法1：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>        <span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>写法2：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>        <span class="token keyword">var</span> <span class="token function-variable function">total</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>写法2可以这样解读：声明一个函数，相当于创建了一个『函数对象』，将这个对象的『引用』赋值给变量total。最后加的分号不是给函数声明加的，而是给整体的赋值语句加的分号。</p><h4 id="调用函数" tabindex="-1"><a class="header-anchor" href="#调用函数" aria-hidden="true">#</a> 调用函数</h4><p>JavaScript中函数本身就是一种对象，函数名就是这个**『对象』<strong>的</strong>『引用』**。而调用函数的格式是：<strong>函数引用()</strong>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>        <span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;result=&quot;</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>        <span class="token keyword">var</span> <span class="token function-variable function">total</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">var</span> totalResult <span class="token operator">=</span> <span class="token function">total</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;totalResult=&quot;</span><span class="token operator">+</span>totalResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、对象" tabindex="-1"><a class="header-anchor" href="#_4、对象" aria-hidden="true">#</a> 4、对象</h3><p>JavaScript中没有『类』的概念，对于系统内置的对象可以直接创建使用。</p><h4 id="使用new关键字创建对象" tabindex="-1"><a class="header-anchor" href="#使用new关键字创建对象" aria-hidden="true">#</a> 使用new关键字创建对象</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>        <span class="token comment">// 创建对象</span>
        <span class="token keyword">var</span> obj01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 给对象设置属性和属性值</span>
        obj01<span class="token punctuation">.</span>stuName <span class="token operator">=</span> <span class="token string">&quot;tom&quot;</span><span class="token punctuation">;</span>
        obj01<span class="token punctuation">.</span>stuAge <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
        obj01<span class="token punctuation">.</span>stuSubject <span class="token operator">=</span> <span class="token string">&quot;java&quot;</span><span class="token punctuation">;</span>

        <span class="token comment">// 在控制台输出对象</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj01<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用-创建对象" tabindex="-1"><a class="header-anchor" href="#使用-创建对象" aria-hidden="true">#</a> 使用{}创建对象</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>        <span class="token comment">// 创建对象</span>
        <span class="token keyword">var</span> obj02 <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token string-property property">&quot;soldierName&quot;</span><span class="token operator">:</span><span class="token string">&quot;john&quot;</span><span class="token punctuation">,</span>
            <span class="token string-property property">&quot;soldierAge&quot;</span><span class="token operator">:</span><span class="token number">35</span><span class="token punctuation">,</span>
            <span class="token string-property property">&quot;soldierWeapon&quot;</span><span class="token operator">:</span><span class="token string">&quot;gun&quot;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token comment">// 在控制台输出对象</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj02<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="给对象设置函数属性" tabindex="-1"><a class="header-anchor" href="#给对象设置函数属性" aria-hidden="true">#</a> 给对象设置函数属性</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建对象</span>
<span class="token keyword">var</span> obj01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 给对象设置属性和属性值</span>
obj01<span class="token punctuation">.</span>stuName <span class="token operator">=</span> <span class="token string">&quot;tom&quot;</span><span class="token punctuation">;</span>
obj01<span class="token punctuation">.</span>stuAge <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
obj01<span class="token punctuation">.</span>stuSubject <span class="token operator">=</span> <span class="token string">&quot;java&quot;</span><span class="token punctuation">;</span>

obj01<span class="token punctuation">.</span><span class="token function-variable function">study</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>stuName <span class="token operator">+</span> <span class="token string">&quot; is studying&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 在控制台输出对象</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj01<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 调用函数</span>
obj01<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建对象</span>
<span class="token keyword">var</span> obj02 <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;soldierName&quot;</span><span class="token operator">:</span><span class="token string">&quot;john&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;soldierAge&quot;</span><span class="token operator">:</span><span class="token number">35</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;soldierWeapon&quot;</span><span class="token operator">:</span><span class="token string">&quot;gun&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;soldierShoot&quot;</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>soldierName <span class="token operator">+</span> <span class="token string">&quot; is using &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>soldierWeapon<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 在控制台输出对象</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj02<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 调用函数</span>
obj02<span class="token punctuation">.</span><span class="token function">soldierShoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="this关键字" tabindex="-1"><a class="header-anchor" href="#this关键字" aria-hidden="true">#</a> this关键字</h4><p>this关键字只有两种情况：</p><ul><li>在函数外面：this关键字指向window对象（代表当前浏览器窗口）</li><li>在函数里面：this关键字指向调用函数的对象</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 直接打印this</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 函数中的this</span>
<span class="token comment">// 1.声明函数</span>
<span class="token keyword">function</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 2.创建对象</span>
<span class="token keyword">var</span> obj01 <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;tom&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;getName&quot;</span><span class="token operator">:</span>getName
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj02 <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;jerry&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;getName&quot;</span><span class="token operator">:</span>getName
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 3.调用函数</span>
obj01<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
obj02<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5、数组" tabindex="-1"><a class="header-anchor" href="#_5、数组" aria-hidden="true">#</a> 5、数组</h3><h4 id="使用new关键字创建数组" tabindex="-1"><a class="header-anchor" href="#使用new关键字创建数组" aria-hidden="true">#</a> 使用new关键字创建数组</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1.创建数组对象</span>
<span class="token keyword">var</span> arr01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 2.压入数据</span>
arr01<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
arr01<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;orange&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
arr01<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;banana&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
arr01<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;grape&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 3.遍历数组</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr01<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr01<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 4.数组元素反序</span>
arr01<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr01<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr01<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 5.数组元素拼接成字符串</span>
<span class="token keyword">var</span> arrStr <span class="token operator">=</span> arr01<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrStr<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 6.字符串拆分成数组</span>
<span class="token keyword">var</span> arr02 <span class="token operator">=</span> arrStr<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr02<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr02<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 7.弹出数组中最后一个元素</span>
<span class="token keyword">var</span> ele <span class="token operator">=</span> arr01<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用-创建数组" tabindex="-1"><a class="header-anchor" href="#使用-创建数组" aria-hidden="true">#</a> 使用[]创建数组</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 8.使用[]创建数组</span>
<span class="token keyword">var</span> arr03 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;cat&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;dog&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;tiger&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr03<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6、json" tabindex="-1"><a class="header-anchor" href="#_6、json" aria-hidden="true">#</a> 6、JSON</h3><h4 id="json格式的用途" tabindex="-1"><a class="header-anchor" href="#json格式的用途" aria-hidden="true">#</a> JSON格式的用途</h4><p>在开发中凡是涉及到**『跨平台数据传输』**，JSON格式一定是首选。</p><h4 id="json格式的说明" tabindex="-1"><a class="header-anchor" href="#json格式的说明" aria-hidden="true">#</a> JSON格式的说明</h4><ul><li>JSON数据两端要么是**{}<strong>，要么是</strong>[]**</li><li>**{}**定义JSON对象</li><li>**[]**定义JSON数组</li><li>JSON对象的格式是：</li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>key<span class="token operator">:</span>value<span class="token punctuation">,</span>key<span class="token operator">:</span>value<span class="token punctuation">,</span>...<span class="token punctuation">,</span>key<span class="token operator">:</span>value<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>JOSN数组的格式是：</li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">[</span>value<span class="token punctuation">,</span>value<span class="token punctuation">,</span>...<span class="token punctuation">,</span>value<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>key的类型固定是字符串</li><li>value的类型可以是： <ul><li>基本数据类型</li><li>引用类型：JSON对象或JSON数组</li></ul></li></ul><p>正因为JSON格式中value部分还可以继续使用JSON对象或JSON数组，所以JSON格式是可以**『多层嵌套』**的，所以JSON格式不论多么复杂的数据类型都可以表达。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;stuId&quot;</span><span class="token operator">:</span><span class="token number">556</span><span class="token punctuation">,</span>
    <span class="token property">&quot;stuName&quot;</span><span class="token operator">:</span><span class="token string">&quot;carl&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;school&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token property">&quot;schoolId&quot;</span><span class="token operator">:</span><span class="token number">339</span><span class="token punctuation">,</span>
        <span class="token property">&quot;schoolName&quot;</span><span class="token operator">:</span><span class="token string">&quot;atguigu&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;subjectList&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            <span class="token property">&quot;subjectName&quot;</span><span class="token operator">:</span><span class="token string">&quot;java&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;subjectScore&quot;</span><span class="token operator">:</span><span class="token number">50</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
            <span class="token property">&quot;subjectName&quot;</span><span class="token operator">:</span><span class="token string">&quot;PHP&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;subjectScore&quot;</span><span class="token operator">:</span><span class="token number">35</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
            <span class="token property">&quot;subjectName&quot;</span><span class="token operator">:</span><span class="token string">&quot;python&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;subjectScore&quot;</span><span class="token operator">:</span><span class="token number">24</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;teacherMap&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token property">&quot;aaa&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
            <span class="token property">&quot;teacherName&quot;</span><span class="token operator">:</span><span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;teacherAge&quot;</span><span class="token operator">:</span><span class="token number">20</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token property">&quot;bbb&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
            <span class="token property">&quot;teacherName&quot;</span><span class="token operator">:</span><span class="token string">&quot;zhangsanfeng&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;teacherAge&quot;</span><span class="token operator">:</span><span class="token number">108</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token property">&quot;ccc&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
            <span class="token property">&quot;teacherName&quot;</span><span class="token operator">:</span><span class="token string">&quot;zhangwuji&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;teacherAge&quot;</span><span class="token operator">:</span><span class="token number">25</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="json对象和json字符串互转" tabindex="-1"><a class="header-anchor" href="#json对象和json字符串互转" aria-hidden="true">#</a> JSON对象和JSON字符串互转</h4><h5 id="json对象转json字符串" tabindex="-1"><a class="header-anchor" href="#json对象转json字符串" aria-hidden="true">#</a> JSON对象转JSON字符串</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> jsonObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string-property property">&quot;stuName&quot;</span><span class="token operator">:</span><span class="token string">&quot;tom&quot;</span><span class="token punctuation">,</span><span class="token string-property property">&quot;stuAge&quot;</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> jsonStr <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>jsonObj<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> jsonObj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// object</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> jsonStr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="json字符串转json对象" tabindex="-1"><a class="header-anchor" href="#json字符串转json对象" aria-hidden="true">#</a> JSON字符串转JSON对象</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>jsonObj <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jsonObj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {stuName: &quot;tom&quot;, stuAge: 20}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、dom" tabindex="-1"><a class="header-anchor" href="#四、dom" aria-hidden="true">#</a> 四、DOM</h2><h3 id="_1、概念" tabindex="-1"><a class="header-anchor" href="#_1、概念" aria-hidden="true">#</a> 1、概念</h3><h4 id="名词解释" tabindex="-1"><a class="header-anchor" href="#名词解释" aria-hidden="true">#</a> 名词解释</h4><p>DOM是<strong>D</strong>ocument <strong>O</strong>bject <strong>M</strong>odel的缩写，意思是**『文档对象模型』**——将HTML文档抽象成模型，再封装成对象方便用程序操作。</p><p>这是一种非常常用的编程思想：将现实世界的事物抽象成模型，这样就非常容易使用对象来量化的描述现实事物，从而把生活中的问题转化成一个程序问题，最终实现用应用软件协助解决现实问题。而在这其中**『模型』**就是那个连通现实世界和代码世界的桥梁。</p><h4 id="dom树" tabindex="-1"><a class="header-anchor" href="#dom树" aria-hidden="true">#</a> DOM树</h4><p>浏览器把HTML文档从服务器上下载下来之后就开始按照**『从上到下』<strong>的顺序</strong>『读取HTML标签』<strong>。每一个标签都会被封装成一个</strong>『对象』**。</p><p>而第一个读取到的肯定是根标签html，然后是它的子标签head，再然后是head标签里的子标签……所以从html标签开始，整个文档中的所有标签都会根据它们之间的**『父子关系』<strong>被放到一个</strong>『树形结构』**的对象中。</p><p><img src="`+d+'" alt="image.png"></p><p>这个包含了所有标签对象的整个树形结构对象就是JavaScript中的一个<strong>可以直接使用的内置对象</strong>：<strong>document</strong>。</p><p>例如，下面的标签结构：</p><p><img src="'+k+'" alt="image.png"></p><p>会被解析为：</p><p><img src="'+v+'" alt="image.png"></p><h3 id="_2、具体概念" tabindex="-1"><a class="header-anchor" href="#_2、具体概念" aria-hidden="true">#</a> 2、具体概念</h3><h4 id="各个组成部分的类型" tabindex="-1"><a class="header-anchor" href="#各个组成部分的类型" aria-hidden="true">#</a> 各个组成部分的类型</h4><p>整个文档中的一切都可以看做Node。各个具体组成部分的具体类型可以看做Node类型的子类。</p><blockquote><p>其实严格来说，JavaScript并不支持真正意义上的『继承』，这里我们借用Java中的『继承』概念，从逻辑上来帮助我们理解各个类型之间的关系。</p></blockquote><table><thead><tr><th style="text-align:center;">组成部分</th><th style="text-align:center;">节点类型</th><th style="text-align:center;">具体类型</th></tr></thead><tbody><tr><td style="text-align:center;">整个文档</td><td style="text-align:center;">文档节点</td><td style="text-align:center;">Document</td></tr><tr><td style="text-align:center;">HTML标签</td><td style="text-align:center;">元素节点</td><td style="text-align:center;">Element</td></tr><tr><td style="text-align:center;">HTML标签内的文本</td><td style="text-align:center;">文本节点</td><td style="text-align:center;">Text</td></tr><tr><td style="text-align:center;">HTML标签内的属性</td><td style="text-align:center;">属性节点</td><td style="text-align:center;">Attr</td></tr><tr><td style="text-align:center;">注释</td><td style="text-align:center;">注释节点</td><td style="text-align:center;">Comment</td></tr></tbody></table><h4 id="父子关系" tabindex="-1"><a class="header-anchor" href="#父子关系" aria-hidden="true">#</a> 父子关系</h4><p><img src="'+m+'" alt="image.png"></p><h4 id="先辈后代关系" tabindex="-1"><a class="header-anchor" href="#先辈后代关系" aria-hidden="true">#</a> 先辈后代关系</h4><p><img src="'+h+'" alt="image.png"></p><h3 id="_3、dom操作" tabindex="-1"><a class="header-anchor" href="#_3、dom操作" aria-hidden="true">#</a> 3、DOM操作</h3><p>由于实际开发时基本上都是使用JavaScript的各种框架来操作，而框架中的操作方式和我们现在看到的原生操作完全不同，所以下面罗列的API仅供参考，不做要求。</p><h4 id="在整个文档范围内查询元素节点" tabindex="-1"><a class="header-anchor" href="#在整个文档范围内查询元素节点" aria-hidden="true">#</a> 在整个文档范围内查询元素节点</h4><table><thead><tr><th style="text-align:center;">功能</th><th style="text-align:center;">API</th><th style="text-align:center;">返回值</th></tr></thead><tbody><tr><td style="text-align:center;">根据id值查询</td><td style="text-align:center;">document.getElementById(“id值”)</td><td style="text-align:center;">一个具体的元素节</td></tr><tr><td style="text-align:center;">根据标签名查询</td><td style="text-align:center;">document.getElementsByTagName(“标签名”)</td><td style="text-align:center;">元素节点数组</td></tr><tr><td style="text-align:center;">根据name属性值查询</td><td style="text-align:center;">document.getElementsByName(“name值”)</td><td style="text-align:center;">元素节点数组</td></tr></tbody></table><h4 id="在具体元素节点范围内查找子节点" tabindex="-1"><a class="header-anchor" href="#在具体元素节点范围内查找子节点" aria-hidden="true">#</a> 在具体元素节点范围内查找子节点</h4><table><thead><tr><th style="text-align:center;">功能</th><th style="text-align:center;">API</th><th style="text-align:center;">返回值</th></tr></thead><tbody><tr><td style="text-align:center;">查找全部子节点</td><td style="text-align:center;">element.childNodes 【W3C考虑换行，IE≤8不考虑】</td><td style="text-align:center;">节点数组</td></tr><tr><td style="text-align:center;">查找第一个子节点</td><td style="text-align:center;">element.firstChild 【W3C考虑换行，IE≤8不考虑】</td><td style="text-align:center;">节点对象</td></tr><tr><td style="text-align:center;">查找最后一个子节点</td><td style="text-align:center;">element.lastChild 【W3C考虑换行，IE≤8不考虑】</td><td style="text-align:center;">节点对象</td></tr></tbody></table><h4 id="查找指定元素节点的父节点" tabindex="-1"><a class="header-anchor" href="#查找指定元素节点的父节点" aria-hidden="true">#</a> 查找指定元素节点的父节点</h4><table><thead><tr><th style="text-align:center;">功能</th><th style="text-align:center;">API</th><th style="text-align:center;">返回值</th></tr></thead><tbody><tr><td style="text-align:center;">查找指定元素节点的父节点</td><td style="text-align:center;">element.parentNode</td><td style="text-align:center;">节点对象</td></tr></tbody></table><h4 id="查找指定元素节点的兄弟节点" tabindex="-1"><a class="header-anchor" href="#查找指定元素节点的兄弟节点" aria-hidden="true">#</a> 查找指定元素节点的兄弟节点</h4><table><thead><tr><th style="text-align:center;">功能</th><th style="text-align:center;">API</th><th style="text-align:center;">返回值</th></tr></thead><tbody><tr><td style="text-align:center;">查找前一个兄弟节点</td><td style="text-align:center;">node.previousSibling 【W3C考虑换行，IE≤8不考虑】</td><td style="text-align:center;">节点对象</td></tr><tr><td style="text-align:center;">查找后一个兄弟节点</td><td style="text-align:center;">node.nextSibling 【W3C考虑换行，IE≤8不考虑】</td><td style="text-align:center;">节点对象</td></tr></tbody></table><h4 id="属性操作" tabindex="-1"><a class="header-anchor" href="#属性操作" aria-hidden="true">#</a> 属性操作</h4><table><thead><tr><th style="text-align:center;">需求</th><th style="text-align:center;">操作方式</th></tr></thead><tbody><tr><td style="text-align:center;">读取属性值</td><td style="text-align:center;">元素对象.属性名</td></tr><tr><td style="text-align:center;">修改属性值</td><td style="text-align:center;">元素对象.属性名=新的属性值</td></tr></tbody></table><h4 id="文本操作" tabindex="-1"><a class="header-anchor" href="#文本操作" aria-hidden="true">#</a> 文本操作</h4><table><thead><tr><th style="text-align:center;">需求</th><th style="text-align:center;">操作方式</th></tr></thead><tbody><tr><td style="text-align:center;">读取文本值</td><td style="text-align:center;">element.firstChild.nodeValue</td></tr><tr><td style="text-align:center;">修改文本值</td><td style="text-align:center;">element.firstChild.nodeValue=新文本值</td></tr></tbody></table><h4 id="dom增删改操作" tabindex="-1"><a class="header-anchor" href="#dom增删改操作" aria-hidden="true">#</a> DOM增删改操作</h4><table><thead><tr><th style="text-align:center;">API</th><th style="text-align:center;">功能</th></tr></thead><tbody><tr><td style="text-align:center;">document.createElement(“标签名”)</td><td style="text-align:center;">创建元素节点并返回，但不会自动添加到文档中</td></tr><tr><td style="text-align:center;">document.createTextNode(“文本值”)</td><td style="text-align:center;">创建文本节点并返回，但不会自动添加到文档中</td></tr><tr><td style="text-align:center;">element.appendChild(ele)</td><td style="text-align:center;">将ele添加到element所有子节点后面</td></tr><tr><td style="text-align:center;">parentEle.insertBefore(newEle,targetEle)</td><td style="text-align:center;">将newEle插入到targetEle前面</td></tr><tr><td style="text-align:center;">parentEle.replaceChild(newEle, oldEle)</td><td style="text-align:center;">用新节点替换原有的旧子节点</td></tr><tr><td style="text-align:center;">parentEle.removeChild(childNode)</td><td style="text-align:center;">删除指定的子节点</td></tr><tr><td style="text-align:center;">element.innerHTML</td><td style="text-align:center;">读写HTML代码</td></tr></tbody></table><h2 id="五、-javascript事件驱动" tabindex="-1"><a class="header-anchor" href="#五、-javascript事件驱动" aria-hidden="true">#</a> 五、 JavaScript事件驱动</h2><p><img src="'+b+`" alt="image.png"></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>utf-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/css<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
            <span class="token selector">#eventArea</span> <span class="token punctuation">{</span>
                <span class="token property">border</span><span class="token punctuation">:</span> 1px solid black<span class="token punctuation">;</span>
                <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
                <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- 用div作为鼠标移动区域 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>eventArea<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

        <span class="token comment">&lt;!-- 在p标签内显示鼠标坐标 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>showData<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">

        <span class="token comment">// 根据id找到div标签对应的元素对象</span>
        <span class="token keyword">var</span> divEle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;eventArea&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 根据id找到p标签对应的元素对象</span>
        <span class="token keyword">var</span> pEle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;showData&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 声明事件响应函数</span>
        <span class="token keyword">function</span> <span class="token function">whenMouseMove</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            pEle<span class="token punctuation">.</span>innerText <span class="token operator">=</span> event<span class="token punctuation">.</span>clientX <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> event<span class="token punctuation">.</span>clientY<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 将事件响应函数赋值给对应的事件属性        </span>
        <span class="token comment">// onmousemove表示在鼠标移动的时候</span>
        divEle<span class="token punctuation">.</span>onmousemove <span class="token operator">=</span> whenMouseMove<span class="token punctuation">;</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是简化的代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;eventArea&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onmousemove</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;showData&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> event<span class="token punctuation">.</span>clientX <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> event<span class="token punctuation">.</span>clientY<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,139);function _(J,N){const a=l("ExternalLinkIcon");return p(),o("div",null,[y,q,n("blockquote",null,[f,n("p",null,[n("a",x,[s("https://www.cnblogs.com/zhaostudy/p/16733510.html"),t(a)])]),n("p",null,[n("a",j,[s("https://www.cnblogs.com/zhaostudy/p/16051571.html"),t(a)])]),n("p",null,[n("a",w,[s("https://www.cnblogs.com/zhaostudy/p/15883773.html"),t(a)])])]),S])}const M=e(g,[["render",_],["__file","05、JavaScript.html.vue"]]);export{M as default};
