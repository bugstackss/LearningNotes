import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as l,c as t,d as e,e as s,b as r,a as i,r as d}from"./app.9b10ba0a.js";const o="/assets/2023-04-01-00-56-30-image.dd45a5b6.png",p="/assets/2023-04-01-00-58-06-image.05c1d8e8.png",c="/assets/2023-04-01-01-14-54-image.1281c473.png",m="/assets/2023-04-01-01-17-09-image.3d1457e6.png",u="/assets/2023-04-01-01-21-56-image.fb522369.png",h="/assets/2023-04-01-01-29-32-image.f7e70c61.png",b="/assets/2023-04-01-01-29-40-image.23fbac86.png",g="/assets/2023-04-01-01-29-47-image.ae18e833.png",v="/assets/2023-04-01-01-30-11-image.a812b249.png",_="/assets/2023-04-01-01-31-18-image.ff720b87.png",f="/assets/2023-04-01-01-33-28-image.8bd3566f.png",k="/assets/2023-04-01-01-34-02-image.7ae47df7.png",q="/assets/2023-04-01-01-34-24-image.dba8e7dd.png",x="/assets/2023-04-01-01-41-50-image.ce7a555d.png",y="/assets/2023-04-01-01-41-59-image.c4f8eb34.png",w="/assets/2023-04-01-01-49-42-image.ac1de201.png",S="/assets/2023-04-01-01-54-41-image.5c341fdd.png",N="/assets/2023-04-01-01-54-50-image.456f7cfd.png",D="/assets/2023-04-01-01-55-16-image.2baa2dbc.png",I="/assets/2023-04-01-01-55-41-image.59fca2f5.png",O="/assets/2023-04-01-01-56-21-image.722afb6a.png",j="/assets/2023-04-01-01-57-17-image.159db709.png",B="/assets/2023-04-01-01-57-49-image.8f187af3.png",R="/assets/2023-04-01-01-58-13-image.0cd78292.png",P="/assets/2023-04-01-01-59-03-image.78b053da.png",W="/assets/2023-04-01-01-59-38-image.4479f186.png",z="/assets/2023-04-01-02-15-30-image.b9af619c.png",M="/assets/2023-04-01-02-18-15-image.89ee1c19.png",V="/assets/2023-04-01-07-06-47-image.f9ec7e22.png",A="/assets/2023-04-01-07-12-58-image.adc0ad66.png",E="/assets/2023-04-01-07-10-44-image.b84b42ed.png",C="/assets/2023-04-01-07-11-08-image.b62abdc9.png",G="/assets/2023-04-01-07-11-39-image.463301fd.png",K="/assets/2023-04-01-07-12-20-image.75a648ad.png",L="/assets/2023-04-01-07-15-15-image.4dbc5468.png",T="/assets/2023-04-01-07-16-28-image.e4ada224.png",F="/assets/2023-04-01-08-36-08-image.e994e649.png",H={},J=i('<h2 id="_01、是什么" tabindex="-1"><a class="header-anchor" href="#_01、是什么" aria-hidden="true">#</a> 01、是什么？</h2><p>吹哨人巡逻监控后台master主机是否故障，如果故障了根据<code>投票数</code>自动将某一个从库转换为新主库，继续对外服务！</p><h3 id="作用" tabindex="-1"><a class="header-anchor" href="#作用" aria-hidden="true">#</a> 作用</h3><p>哨兵的作用：</p><p><code>1、监控redis运行状态，包括master和slave</code></p><p><code>2、当master down机，能自动将slave切换成新master</code></p><p><img src="'+o+'" alt=""></p><blockquote><p>俗称：无人值守运维</p></blockquote>',8),Q={href:"https://redis.io/docs/manual/sentinel/",target:"_blank",rel:"noopener noreferrer"},U=i('<h2 id="_02、能干嘛" tabindex="-1"><a class="header-anchor" href="#_02、能干嘛" aria-hidden="true">#</a> 02、能干嘛？</h2><p><img src="'+p+'" alt=""></p><ul><li>主从监控</li></ul><p>监控主从redis库运行是否正常</p><ul><li>消息通知</li></ul><p>哨兵可以将故障转移的结果发送给客户端</p><ul><li>故障转移</li></ul><p>如果master异常，则会进行主从切换，将其中一个Slave作为新Master</p><ul><li>配置中心</li></ul><p>客户端连接哨兵来获得当前<code>redis</code>服务的主节点地址</p><h2 id="_03、怎么玩-案例演示实战步骤" tabindex="-1"><a class="header-anchor" href="#_03、怎么玩-案例演示实战步骤" aria-hidden="true">#</a> 03、怎么玩（案例演示实战步骤）</h2><h3 id="redis-sentinel架构-前提说明" tabindex="-1"><a class="header-anchor" href="#redis-sentinel架构-前提说明" aria-hidden="true">#</a> Redis Sentinel架构，前提说明</h3><p><img src="'+c+'" alt=""></p><ul><li>3个哨兵</li></ul><p>自动监控和维护集群，不存放数据，只是吹哨人</p><ul><li>1主2从</li></ul><p>用于数据读取和存放</p><h3 id="案例步骤-不服就干" tabindex="-1"><a class="header-anchor" href="#案例步骤-不服就干" aria-hidden="true">#</a> 案例步骤，不服就干</h3><h4 id="_1、-myredis目录下新建或者拷贝sentinel-conf文件-名字绝对不能错" tabindex="-1"><a class="header-anchor" href="#_1、-myredis目录下新建或者拷贝sentinel-conf文件-名字绝对不能错" aria-hidden="true">#</a> 1、/myredis目录下新建或者拷贝sentinel.conf文件，名字绝对不能错</h4><h4 id="_2、先看看-opt目录下默认的sentinel-conf文件的内容" tabindex="-1"><a class="header-anchor" href="#_2、先看看-opt目录下默认的sentinel-conf文件的内容" aria-hidden="true">#</a> 2、先看看/opt目录下默认的sentinel.conf文件的内容</h4><p><img src="'+m+'" alt=""></p><h4 id="_3、重点参数项说明" tabindex="-1"><a class="header-anchor" href="#_3、重点参数项说明" aria-hidden="true">#</a> 3、重点参数项说明</h4><ul><li>bind</li></ul><p>服务监听地址，用于客户端连接，默认本机地址</p><ul><li>daemonize</li></ul><p>是否以后台daemon方式运行</p><ul><li>port</li></ul><p>端口</p><ul><li>logfile</li></ul><p>日志文件路径</p><ul><li>pidfile</li></ul><p>pid文件路径</p><ul><li>dir</li></ul><p>工作目录</p><ul><li><code>sentinel monitor &lt; master-name &gt; &lt; ip &gt; &lt; redis-port &gt; &lt; quorum &gt;</code></li></ul><blockquote><p>设置要监控的master服务器</p><p>quorum表示最少有几个哨兵认可客观下线，同意故障迁移的法定票数</p></blockquote><p>行尾最后的quorum代表什么意思呢？<code>quorum：确认客观下线的最少的哨兵数量</code></p><p><img src="'+u+`" alt=""></p><p>我们知道，网络是不可靠的，有时候一个sentinel会因为网络堵塞而<code>误以为</code>一个master redis已经死掉了，在sentinel集群环境下需要多个sentinel互相沟通来确认某个master<code>是否真的死了</code>，quorum这个参数是进行客观下线的一个依据，意思是至少有quorum个sentinel认为这个master有故障，才会对这个master进行下线以及故障转移。因为有的时候，某个sentinel节点可能因为自身网络原因，导致无法连接master，而此时master并没有出现故障，所以，这就需要多个sentinel都一致认为该master有问题，才可以进行下一步操作，这就保证了公平性和高可用。</p><ul><li>sentinel auth-pass &lt; master-name &gt; &lt; password &gt;</li></ul><p>master设置了密码，连接master服务的密码</p><ul><li>其他</li></ul><div class="language-textile line-numbers-mode" data-ext="textile"><pre class="language-textile"><code><span class="token phrase">sentinel down-after-milliseconds &lt; master-name &gt; &lt; milliseconds &gt;：</span>

<span class="token phrase">指定多少毫秒之后，主节点没有应答哨兵，此时哨兵主观上认为主节点下线</span>



<span class="token phrase">sentinel parallel-syncs &lt; master-name &gt; &lt; nums &gt;：</span>

<span class="token phrase">表示允许并行同步的slave个数，当Master挂了后，哨兵会选出新的Master，此时，剩余的slave会向新的master发起同步数据</span>



<span class="token phrase">sentinel failover-timeout &lt; master-name &gt; &lt; milliseconds &gt;：</span>

<span class="token phrase">故障转移的超时时间，进行故障转移时，如果超过设置的毫秒，表示故障转移失败</span>



<span class="token phrase">sentinel notification-script &lt; master-name &gt; &lt; script-path &gt; ：</span>

<span class="token phrase">配置当某一事件发生时所需要执行的脚本</span>



<span class="token phrase">sentinel client-reconfig-script &lt; master-name &gt; &lt; script-path &gt;：</span>

<span class="token phrase">客户端重新配置主节点参数脚本
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4、本次案例哨兵sentinel文件通用配置" tabindex="-1"><a class="header-anchor" href="#_4、本次案例哨兵sentinel文件通用配置" aria-hidden="true">#</a> 4、<code>本次案例哨兵sentinel文件通用配置</code></h4><ul><li><p>由于机器硬件关系，我们的3个哨兵都同时配置进192.168.111.169同一台机器</p></li><li><p><code>sentinel26379.conf</code></p></li></ul><div class="language-textile line-numbers-mode" data-ext="textile"><pre class="language-textile"><code><span class="token phrase">bind 0.0.0.0
daemonize yes
protected-mode no
port 26379
logfile &quot;/myredis/sentinel26379.log&quot;
pidfile /var/run/redis-sentinel26379.pid
dir /myredis
sentinel monitor mymaster 192.168.111.169 6379 2
sentinel auth-pass mymaster 111111
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>sentinel26380.conf</code></li></ul><div class="language-textile line-numbers-mode" data-ext="textile"><pre class="language-textile"><code><span class="token phrase">bind 0.0.0.0
daemonize yes
protected-mode no
port 26380
logfile &quot;/myredis/sentinel26380.log&quot;
pidfile /var/run/redis-sentinel26380.pid
dir &quot;/myredis&quot;
sentinel monitor mymaster 192.168.111.169 6379 2
sentinel auth-pass mymaster 111111
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>sentinel26381.conf</code></li></ul><div class="language-textile line-numbers-mode" data-ext="textile"><pre class="language-textile"><code><span class="token phrase">bind 0.0.0.0
daemonize yes
protected-mode no
port 26381
logfile &quot;/myredis/sentinel26381.log&quot;
pidfile /var/run/redis-sentinel26381.pid
dir &quot;/myredis&quot;
sentinel monitor mymaster 192.168.111.169 6379 2
sentinel auth-pass mymaster 111111
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>请看一眼<code>sentinel26379.conf</code>、<code>sentinel26380.conf</code>、<code>sentinel26381.conf</code>我们填写的内容</li></ul><p><img src="`+h+'" alt=""></p><p><img src="'+b+'" alt=""></p><p><img src="'+g+'" alt=""></p><ul><li>master主机配置文件说明</li></ul><p><img src="'+v+'" alt=""></p><h4 id="_5、先启动一主二从3个redis实例-测试正常的主从复制" tabindex="-1"><a class="header-anchor" href="#_5、先启动一主二从3个redis实例-测试正常的主从复制" aria-hidden="true">#</a> 5、先启动一主二从3个redis实例，测试正常的主从复制</h4><ul><li>架构说明</li></ul><p><img src="'+_+'" alt=""></p><table><thead><tr><th>1</th><th>169机器上新建redis6379.conf配置文件，由于要配合本次案例，请设置masterauth项访问密码为111111，不然后续可能报错master_link_status:down</th></tr></thead><tbody><tr><td>2</td><td>172机器上新建redis6380.conf配置文件，设置好replicaof &lt; masterip &gt; &lt; masterport &gt;</td></tr><tr><td>3</td><td>173机器上新建redis6381.conf配置文件，设置好replicaof &lt; masterip &gt; &lt; masterport &gt;</td></tr></tbody></table><ul><li>请看一眼<code>redis6379.conf</code>、<code>redis6380.conf</code>、<code>redis6381.conf</code>我们自己填写主从复制相关的内容</li></ul><blockquote><p>主机6379</p></blockquote><p><img src="'+f+'" alt=""></p><p>6379后续可能会变成从机，需要设置访问新主机的密码， 请设置masterauth项访问密码为111111，</p><p><code>不然后续可能报错master_link_status:down</code></p><blockquote><p>6380</p></blockquote><p><img src="'+k+'" alt=""></p><p>具体IP地址和密码根据你本地真实情况，酌情修改</p><blockquote><p>6381</p></blockquote><p><img src="'+q+'" alt=""></p><p>具体IP地址和密码根据你本地真实情况，酌情修改</p><ul><li>3台不同的虚拟机实例，启动三部真实机器实例并连接</li></ul><blockquote><p>redis-cli -a 111111 -p 6379</p></blockquote><blockquote><p>redis-cli -a 111111 -p 6380</p></blockquote><blockquote><p>redis-cli -a 111111 -p 6381</p></blockquote><ul><li>具体查看当堂动手案例配置并观察文件内容</li></ul><h4 id="以下是哨兵内容部分" tabindex="-1"><a class="header-anchor" href="#以下是哨兵内容部分" aria-hidden="true">#</a> =<mark><mark><mark><mark>以下是哨兵内容部分</mark></mark></mark></mark>=</h4><h4 id="_6、在启动3个哨兵-完成监控" tabindex="-1"><a class="header-anchor" href="#_6、在启动3个哨兵-完成监控" aria-hidden="true">#</a> 6、在启动3个哨兵，完成监控</h4><ul><li><p>redis-sentinel sentinel26379.conf --sentinel</p></li><li><p>redis-sentinel sentinel26380.conf --sentinel</p></li><li><p>redis-sentinel sentinel26381.conf --sentinel</p></li></ul><h4 id="_7、启动3个哨兵监控后再测试一次主从复制" tabindex="-1"><a class="header-anchor" href="#_7、启动3个哨兵监控后再测试一次主从复制" aria-hidden="true">#</a> 7、启动3个哨兵监控后再测试一次主从复制</h4><p><code>岁月静好一切OK</code></p><p><img src="'+x+'" alt=""></p><p><img src="'+y+'" alt=""></p><h4 id="_8、原有的master挂了" tabindex="-1"><a class="header-anchor" href="#_8、原有的master挂了" aria-hidden="true">#</a> 8、原有的master挂了</h4><ol><li>我们手动关闭6379服务器，模拟master挂了</li></ol><p><img src="'+w+'" alt=""></p><ol start="2"><li>❓问题思考</li></ol><p>两台从机数据是否ok</p><p>是否会剩下的2台机器上选出新的master</p><p>之前down机的master机器重新回来，谁将是新老大？会不会双master冲突？</p><ol start="3"><li>📚揭晓答案</li></ol><ul><li>数据OK</li></ul><blockquote><p>两个小问题</p></blockquote><p><img src="'+S+'" alt=""></p><p><img src="'+N+'" alt=""></p><blockquote><p>6380</p></blockquote><p><img src="'+D+'" alt=""></p><blockquote><p>6381</p></blockquote><p><img src="'+I+'" alt=""></p><blockquote><p>了解Broken pipe</p></blockquote><table><thead><tr><th>认识broken pipe</th><th>pipe是管道的意思，管道里面是数据流，通常是从文件或网络套接字读取的数据。当该管道从另一端突然关闭时，会发生数据突然中断，即是broken，对于socket来说，可能是网络被拔出或另一端的进程崩溃</th></tr></thead><tbody><tr><td>解决问题</td><td>其实当该异常产生的时候，对于服务端来说，并没有多少影响。因为可能是某个客户端突然中止了进程导致了该错误</td></tr><tr><td>总结 Broken Pipe</td><td>这个异常是客户端读取超时关闭了连接,这时候服务器端再向客户端已经断开的连接写数据时就发生了broken pipe异常！</td></tr></tbody></table><p><img src="'+O+'" alt=""></p><ul><li>投票新选</li></ul><blockquote><p>sentinel26379.log</p></blockquote><p><img src="'+j+'" alt=""></p><blockquote><p>sentinel26380.log</p></blockquote><p><img src="'+B+'" alt=""></p><blockquote><p>sentinel26381.log</p></blockquote><p><img src="'+R+'" alt=""></p><ul><li>谁是master，限本次案例</li></ul><blockquote><p>6381被选为master，上位成功</p></blockquote><p><img src="'+P+'" alt=""></p><blockquote><p>以前的6379从master降级为slave</p></blockquote><p><img src="'+W+'" alt=""></p><blockquote><p>6380还是slave，只不过换了个新老大6381（6379变6381），6380还是slave</p></blockquote><h4 id="_9、对比配置文件" tabindex="-1"><a class="header-anchor" href="#_9、对比配置文件" aria-hidden="true">#</a> 9、对比配置文件</h4><ul><li><p>vim sentinel26379.conf</p></li><li><p>老master，vim redis6379.conf</p></li><li><p>新master，vim redis6381.conf</p></li><li><p>结论</p></li></ul><p>文件的内容，在运行期间会被sentinel动态进行修改</p><p>Master-Slave切换后，master_redis.conf、slave_redis.conf和sentinel.conf的内容都会发生改变，即master_redis.conf中会多一行slaveof的配置，sentinel.conf的监控目标会随之调换</p><h3 id="其他备注" tabindex="-1"><a class="header-anchor" href="#其他备注" aria-hidden="true">#</a> 其他备注</h3><p>生产时不同机房不同服务器，很少出现3个哨兵全挂掉的情况</p><p>可以同时监控多个master，一行一个</p><h2 id="_04、哨兵运行流程和选举原理" tabindex="-1"><a class="header-anchor" href="#_04、哨兵运行流程和选举原理" aria-hidden="true">#</a> 04、哨兵运行流程和选举原理</h2><p>当一个主从配置中的master失效之后，sentinel可以选举出    一个新的master</p><p>用于自动接替原mster的工作，主从配置中的其他redis服务器自动指向新的master同步数据。</p><p>一般建议sentinel采取<code>奇数台</code>，防止某一台sentinel无法连接到master导致误切换</p><h3 id="运行流程-故障切换" tabindex="-1"><a class="header-anchor" href="#运行流程-故障切换" aria-hidden="true">#</a> 运行流程，故障切换</h3><h4 id="_1、三个哨兵监控一主二从-正常运行中" tabindex="-1"><a class="header-anchor" href="#_1、三个哨兵监控一主二从-正常运行中" aria-hidden="true">#</a> 1、三个哨兵监控一主二从，正常运行中......</h4><p><img src="'+z+'" alt=""></p><h4 id="_2、sdown主观下线-subjectively-down" tabindex="-1"><a class="header-anchor" href="#_2、sdown主观下线-subjectively-down" aria-hidden="true">#</a> 2、SDown主观下线（Subjectively Down）</h4><ul><li><p>SDOWN（主观不可用）是单个sentinel自己主观上检测到关于master的状态，从sentinel的角度来看，如果发送了PING心跳后，在一定时间内没有收到合法的回复，就达到了SDOWN的条件</p></li><li><p>sentinel配置文件中的down-after-milliseconds设置了判断主观下线的时间长度</p></li><li><p>说明</p></li></ul><p>所谓主观下线（Subjectively Down， 简称 SDOWN）指的是单个Sentinel实例对服务器做出的下线判断，即单个sentinel认为某个服务下线（有可能是接收不到订阅，之间的网络不通等等原因）。主观下线就是说如果服务器在[sentinel down-after-milliseconds]给定的毫秒数之内没有回应PING命令或者返回一个错误消息， 那么这个Sentinel会主观的(单方面的)认为这个master不可以用了，o(╥﹏╥)o</p><p><img src="'+M+'" alt=""></p><p>sentinel down-after-milliseconds &lt; masterName &gt; &lt; timeout &gt;</p><p>表示master被当前sentinel实例认定为失效的间隔时间，这个配置其实就是进行主观下线的一个依据</p><p>master在多长时间内一直没有给Sentine返回有效信息，则认定该master主观下线。也就是说如果多久没联系上redis-servevr，认为这个redis-server进入到失效（SDOWN）状态。</p><h4 id="_3、odown客观下线-objectively-down" tabindex="-1"><a class="header-anchor" href="#_3、odown客观下线-objectively-down" aria-hidden="true">#</a> 3、ODown客观下线（Objectively Down）</h4><ul><li><p>ODOWN需要一定数量的sentinel，<code>多个哨兵打成一致意见</code>才能认为一个master客观上已经宕机了</p></li><li><p>说明</p></li></ul><p>四个参数含义：</p><p>masterName是对某个master+slave组合的一个区分标识(一套sentinel可以监听多组master+slave这样的</p><p><img src="'+V+'" alt=""></p><p><strong>quorum这个参数是进行客观下线的一个依据</strong>，法定人数/法定票数</p><p>意思是至少有quorum个sentinel认为这个master有故障才会对这个master进行下线以及故障转移。因为有的时候，某个sentinel节点可能因为自身网络原因导致无法连接master，而此时master并没有出现故障，所以这就需要多个sentinel都一致认为该master有问题，才可以进行下一步操作，这就保证了公平性和高可用。</p><h4 id="_4、选出领导者哨兵-哨兵中选出兵王" tabindex="-1"><a class="header-anchor" href="#_4、选出领导者哨兵-哨兵中选出兵王" aria-hidden="true">#</a> 4、选出领导者哨兵（哨兵中选出兵王）</h4><p><img src="'+A+'" alt=""></p><p>当主节点被判断客观下线以后，各个哨兵节点会进行协商，先选出一个<code>领导者哨兵节点（兵王）</code>并由该领导者节点，也即被选出的兵王进行failover（故障迁移）</p><blockquote><p>三哨兵日志文件2次解读分析</p></blockquote><ul><li>sentinel26379.log</li></ul><p><img src="'+E+'" alt=""></p><ul><li>sentinel26380.log</li></ul><p><img src="'+C+'" alt=""></p><ul><li>sentinel26381.log</li></ul><p><img src="'+G+'" alt=""></p><p>哨兵领导者，兵王如何选出来的？</p><ul><li>Raft算法</li></ul><p><img src="'+K+'" alt=""></p><p>监视该主节点的所有哨兵都有可能被选为领导者，选举使用的算法是Raft算法；Raft算法的基本思路<strong>是先到先得</strong>：</p><p>即在一轮选举中，哨兵A向B发送成为领导者的申请，如果B没有同意过其他哨兵，则会同意A成为领导者</p><h4 id="_5、由兵王开始推动故障切换流程并选出一个新master" tabindex="-1"><a class="header-anchor" href="#_5、由兵王开始推动故障切换流程并选出一个新master" aria-hidden="true">#</a> 5、由兵王开始推动故障切换流程并选出一个新master</h4><h5 id="_3步骤" tabindex="-1"><a class="header-anchor" href="#_3步骤" aria-hidden="true">#</a> 3步骤</h5><h6 id="新主登基" tabindex="-1"><a class="header-anchor" href="#新主登基" aria-hidden="true">#</a> 新主登基</h6><ul><li><p>某个slave被选中成为新master</p></li><li><p>选出新master的规则，剩余slave节点健康前提下</p></li></ul><p><img src="'+L+'" alt=""></p><p>redis.conf文件中，优先级slave-priority或者replica-priority最高的从节点（数字越小优先级越高）</p><p><img src="'+T+'" alt=""></p><p>复制偏移位置offset最大的从节点</p><p>最小Run ID的从节点</p><blockquote><p>字典顺序，ASCIII码</p></blockquote><h6 id="群臣俯首" tabindex="-1"><a class="header-anchor" href="#群臣俯首" aria-hidden="true">#</a> 群臣俯首</h6><ul><li><p><strong>一朝天子一朝臣，换个码头重新拜</strong></p></li><li><p>执行那个slaveof no one命令让选出来的从节点成为新的主节点，并通过slaveof命令让其他节点成为其从节点</p></li><li><p>Sentinel leader会对选举出的新master执行slaveof no one操作，将其提升为master节点</p></li><li><p>Sentinel leader向其他slave发送命令，让剩下的salve成为新的master节点的slave</p></li></ul><h6 id="旧主拜服" tabindex="-1"><a class="header-anchor" href="#旧主拜服" aria-hidden="true">#</a> 旧主拜服</h6><ul><li><p><strong>老master回来也认怂</strong></p></li><li><p>将之前已下线的老master设置为新选出的新master的从节点，当老master重新上线后，它会成为新master的从节点</p></li><li><p>Sentinel leader会让原来的master降级为slave并恢复工作</p></li></ul><h5 id="小总结" tabindex="-1"><a class="header-anchor" href="#小总结" aria-hidden="true">#</a> 小总结</h5><p>上述的failover操作均由sentinel自己独立完成，完全无需人工干预。</p><p><img src="'+F+'" alt=""></p><h2 id="_05、哨兵使用建议" tabindex="-1"><a class="header-anchor" href="#_05、哨兵使用建议" aria-hidden="true">#</a> 05、哨兵使用建议</h2><ul><li><p>哨兵节点的数量应为多个，哨兵本身应该集群，保证高可用</p></li><li><p>哨兵节点的数量应该是奇数</p></li><li><p>各个哨兵节点的配置应一致</p></li><li><p>如果哨兵节点部署在Docker等容器里面没有起要注意端口的正确映射</p></li><li><p>哨兵集群+主从复制，并不能保证数据零丢失</p><ul><li>承上启下引出集群</li></ul></li></ul>',177);function X(Y,Z){const a=d("ExternalLinkIcon");return l(),t("div",null,[J,e("blockquote",null,[e("p",null,[s("官网理论："),e("a",Q,[s("https://redis.io/docs/manual/sentinel/"),r(a)])])]),U])}const se=n(H,[["render",X],["__file","九、Redis哨兵（sentinel）.html.vue"]]);export{se as default};
