import{_ as t}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c as p,d as n,e as s,b as i,a,r as c}from"./app.9b10ba0a.js";const l="/assets/2b776cdf353647b28a42f549c84bd0dd.e0666e69.png",u="/assets/b693253c77e640119cde20a443aebe55.e8218878.png",d="/assets/d24cc6d985a2462e8a32e7560fd3aee4.b432d62c.png",r="/assets/aeb6fdd730894a17bed7b562875fa44d.ed51511f.png",k="/assets/b13390ae5e9148febffc5da5db392adf.d8de59d9.png",m="/assets/5838fc93d79b4489a71e0118aabe3ca0.231d6a08.png",h="/assets/937837071e2a45d989ce6d39e7102df4.c4fe18dd.png",v="/assets/b3d3a218f02f435f9f5c7d48629517b0.300ef81c.png",b="/assets/0d931616757643e587c59bcfecaa0ad0.0a87a74b.png",g="/assets/3f7b0acf8e114187b207ec6d307b3923.2a96bffd.png",_="/assets/126cd9ffb9794e9f9748a60dc4af6d35.7b93d38b.png",f="/assets/84795c1888d7419abe63ca2270a0a4e9.3b13c6dc.png",x="/assets/2875ea64c17d4d41aa0fe8d94168fc52.00bcb29f.png",S={},q=a('<h1 id="_14、会话控制" tabindex="-1"><a class="header-anchor" href="#_14、会话控制" aria-hidden="true">#</a> 14、会话控制</h1><h2 id="一、提出问题与解决方案核心代码" tabindex="-1"><a class="header-anchor" href="#一、提出问题与解决方案核心代码" aria-hidden="true">#</a> 一、提出问题与解决方案核心代码</h2><h3 id="_1、提出问题" tabindex="-1"><a class="header-anchor" href="#_1、提出问题" aria-hidden="true">#</a> 1、提出问题</h3><p><img src="'+l+`" alt="image.png"></p><p>保持用户登录状态，背后的底层逻辑是：服务器在接收到用户请求的时候，有办法判断这个请求来自于之前的某一个用户。所以保持登录状态，本质上是保持**『会话状态』**</p><h3 id="_2、解决方案" tabindex="-1"><a class="header-anchor" href="#_2、解决方案" aria-hidden="true">#</a> 2、解决方案</h3><h4 id="_1结论" tabindex="-1"><a class="header-anchor" href="#_1结论" aria-hidden="true">#</a> ①结论</h4><p>使用HttpSession对象，将数据存入<strong>会话域</strong>就能保持会话状态。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">HttpSession</span> session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2demo体验" tabindex="-1"><a class="header-anchor" href="#_2demo体验" aria-hidden="true">#</a> ②demo体验</h4><h4 id="_1-准备环境" tabindex="-1"><a class="header-anchor" href="#_1-准备环境" aria-hidden="true">#</a> [1]准备环境</h4>`,11),C={href:"https://heavy_code_industry.gitee.io/code_heavy_industry/pro001-javaweb/lecture/chapter09/pro08-cookie-and-session.zip",target:"_blank",rel:"noopener noreferrer"},j=a(`<h4 id="_2-创建将数据存入会话域的servlet" tabindex="-1"><a class="header-anchor" href="#_2-创建将数据存入会话域的servlet" aria-hidden="true">#</a> [2]创建将数据存入会话域的Servlet</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorldServlet</span> <span class="token keyword">extends</span> <span class="token class-name">ModelBaseServlet</span> <span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>

        <span class="token comment">// 1.通过request对象获取session对象</span>
        <span class="token class-name">HttpSession</span> session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 2.设置数据名称和数据的值</span>
        <span class="token class-name">String</span> attrName <span class="token operator">=</span> <span class="token string">&quot;sessionHelloAttrName&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> attrValue <span class="token operator">=</span> <span class="token string">&quot;sessionHelloAttrValue&quot;</span><span class="token punctuation">;</span>

        <span class="token comment">// 3.将数据存入会话域</span>
        session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>attrName<span class="token punctuation">,</span> attrValue<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 4.渲染视图</span>
        <span class="token function">processTemplate</span><span class="token punctuation">(</span><span class="token string">&quot;page-target&quot;</span><span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-在其他页面从会话域取出数据" tabindex="-1"><a class="header-anchor" href="#_3-在其他页面从会话域取出数据" aria-hidden="true">#</a> [3]在其他页面从会话域取出数据</h4><p><img src="`+u+`" alt="image.png"></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\${#strings.isEmpty(session.sessionHelloAttrName)}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    没有从会话域获取到数据
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\${not #strings.isEmpty(session.sessionHelloAttrName)}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>从会话域读取到：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\${session.sessionHelloAttrName}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-操作效果" tabindex="-1"><a class="header-anchor" href="#_4-操作效果" aria-hidden="true">#</a> [4]操作效果</h4><p><img src="`+d+'" alt="image.png"></p><h2 id="二、cookie的工作机制" tabindex="-1"><a class="header-anchor" href="#二、cookie的工作机制" aria-hidden="true">#</a> 二、Cookie的工作机制</h2><h3 id="_1、http协议和会话控制" tabindex="-1"><a class="header-anchor" href="#_1、http协议和会话控制" aria-hidden="true">#</a> 1、HTTP协议和会话控制</h3><p>HTTP协议本身是无状态的。单靠HTTP协议本身无法判断一个请求来自于哪一个浏览器，所以也就没法识别用户的身份状态。</p><p><img src="'+r+`" alt="image.png"></p><h3 id="_2、cookie介绍" tabindex="-1"><a class="header-anchor" href="#_2、cookie介绍" aria-hidden="true">#</a> 2、Cookie介绍</h3><h4 id="_1本质" tabindex="-1"><a class="header-anchor" href="#_1本质" aria-hidden="true">#</a> ①本质</h4><ul><li>在浏览器端临时存储数据</li><li>键值对</li><li>键和值都是字符串类型</li><li>数据量很小</li></ul><h4 id="_2cookie在浏览器和服务器之间的传递" tabindex="-1"><a class="header-anchor" href="#_2cookie在浏览器和服务器之间的传递" aria-hidden="true">#</a> ②Cookie在浏览器和服务器之间的传递</h4><h5 id="_1-没有cookie的状态" tabindex="-1"><a class="header-anchor" href="#_1-没有cookie的状态" aria-hidden="true">#</a> [1]没有Cookie的状态</h5><p>在服务器端没有创建Cookie并返回的情况下，浏览器端不会保存Cookie信息。双方在请求和响应的过程中也不会携带Cookie的数据。</p><h5 id="_2-创建cookie对象并返回" tabindex="-1"><a class="header-anchor" href="#_2-创建cookie对象并返回" aria-hidden="true">#</a> [2]创建Cookie对象并返回</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 1.创建Cookie对象</span>
<span class="token class-name">Cookie</span> cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">&quot;cookie-message&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello-cookie&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 2.将Cookie对象添加到响应中</span>
response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 3.返回响应</span>
<span class="token function">processTemplate</span><span class="token punctuation">(</span><span class="token string">&quot;page-target&quot;</span><span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-服务器端返回cookie的响应消息头" tabindex="-1"><a class="header-anchor" href="#_3-服务器端返回cookie的响应消息头" aria-hidden="true">#</a> [3]服务器端返回Cookie的响应消息头</h5><p><img src="`+k+'" alt="image.png"></p><h5 id="_4-浏览器拿到cookie之后" tabindex="-1"><a class="header-anchor" href="#_4-浏览器拿到cookie之后" aria-hidden="true">#</a> [4]浏览器拿到Cookie之后</h5><p>浏览器拿到Cookie之后，以后的每一个请求都会携带Cookie信息。</p><p><img src="'+m+`" alt="image.png"></p><h5 id="_5-服务器端读取cookie的信息" tabindex="-1"><a class="header-anchor" href="#_5-服务器端读取cookie的信息" aria-hidden="true">#</a> [5]服务器端读取Cookie的信息</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 1.通过request对象获取Cookie的数组</span>
<span class="token class-name">Cookie</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 2.遍历数组</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Cookie</span> cookie <span class="token operator">:</span> cookies<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;cookie.getName() = &quot;</span> <span class="token operator">+</span> cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;cookie.getValue() = &quot;</span> <span class="token operator">+</span> cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3cookie时效性" tabindex="-1"><a class="header-anchor" href="#_3cookie时效性" aria-hidden="true">#</a> ③Cookie时效性</h4><h5 id="_1-理论" tabindex="-1"><a class="header-anchor" href="#_1-理论" aria-hidden="true">#</a> [1]理论</h5><ul><li>会话级Cookie <ul><li>服务器端并没有明确指定Cookie的存在时间</li><li>在浏览器端，Cookie数据存在于内存中</li><li>只要浏览器还开着，Cookie数据就一直都在</li><li>浏览器关闭，内存中的Cookie数据就会被释放</li></ul></li><li>持久化Cookie <ul><li>服务器端明确设置了Cookie的存在时间</li><li>在浏览器端，Cookie数据会被保存到硬盘上</li><li>Cookie在硬盘上存在的时间根据服务器端限定的时间来管控，不受浏览器关闭的影响</li><li>持久化Cookie到达了预设的时间会被释放</li></ul></li></ul><p>服务器端返回Cookie时附带过期时间的响应消息头如下：</p><p><img src="`+h+'" alt="image.png"></p><p>服务器通知浏览器删除Cookie时的响应消息头如下：</p><p><img src="'+v+`" alt="image.png"></p><h5 id="_2-代码" tabindex="-1"><a class="header-anchor" href="#_2-代码" aria-hidden="true">#</a> [2]代码</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// ※给Cookie设置过期时间</span>
<span class="token comment">// 正数：Cookie的过期时间，以秒为单位</span>
<span class="token comment">// 负数：表示这个Cookie是会话级的Cookie，浏览器关闭时释放</span>
<span class="token comment">// 0：通知浏览器立即删除这个Cookie</span>
cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-会话和持久化cookie对比" tabindex="-1"><a class="header-anchor" href="#_3-会话和持久化cookie对比" aria-hidden="true">#</a> [3]会话和持久化Cookie对比</h5><p><img src="`+b+'" alt="image.png"></p><h4 id="_4cookie的domain和path" tabindex="-1"><a class="header-anchor" href="#_4cookie的domain和path" aria-hidden="true">#</a> ④Cookie的domain和path</h4><p>上网时间长了，本地会保存很多Cookie。对浏览器来说，访问互联网资源时不能每次都把所有Cookie带上。浏览器会使用Cookie的domain和path属性值来和当前访问的地址进行比较，从而决定是否携带这个Cookie。</p><p><img src="'+g+'" alt="image.png"></p><h2 id="三、session的工作机制" tabindex="-1"><a class="header-anchor" href="#三、session的工作机制" aria-hidden="true">#</a> 三、Session的工作机制</h2><h3 id="_1、文字描述" tabindex="-1"><a class="header-anchor" href="#_1、文字描述" aria-hidden="true">#</a> 1、文字描述</h3><p>前提：浏览器正常访问服务器</p><ul><li>服务器端没调用request.getSession()方法：什么都不会发生</li><li>服务器端调用了request.getSession()方法 <ul><li>服务器端检查当前请求中是否携带了JSESSIONID的Cookie <ul><li>有：根据JSESSIONID在服务器端查找对应的HttpSession对象 <ul><li>能找到：将找到的HttpSession对象作为request.getSession()方法的返回值返回</li><li>找不到：服务器端新建一个HttpSession对象作为request.getSession()方法的返回值返回</li></ul></li><li>无：服务器端新建一个HttpSession对象作为request.getSession()方法的返回值返回</li></ul></li></ul></li></ul><h3 id="_2、流程图描述" tabindex="-1"><a class="header-anchor" href="#_2、流程图描述" aria-hidden="true">#</a> 2、流程图描述</h3><p><img src="'+_+`" alt="image.png"></p><h3 id="_3、代码验证" tabindex="-1"><a class="header-anchor" href="#_3、代码验证" aria-hidden="true">#</a> 3、代码验证</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 1.调用request对象的方法尝试获取HttpSession对象</span>
<span class="token class-name">HttpSession</span> session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 2.调用HttpSession对象的isNew()方法</span>
<span class="token keyword">boolean</span> wetherNew <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">isNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 3.打印HttpSession对象是否为新对象</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;wetherNew = &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>wetherNew<span class="token operator">?</span><span class="token string">&quot;HttpSession对象是新的&quot;</span><span class="token operator">:</span><span class="token string">&quot;HttpSession对象是旧的&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 4.调用HttpSession对象的getId()方法</span>
<span class="token class-name">String</span> id <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 5.打印JSESSIONID的值</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;JSESSIONID = &quot;</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、时效性" tabindex="-1"><a class="header-anchor" href="#_4、时效性" aria-hidden="true">#</a> 4、时效性</h3><h4 id="_1为什么session要设置时限" tabindex="-1"><a class="header-anchor" href="#_1为什么session要设置时限" aria-hidden="true">#</a> ①为什么Session要设置时限</h4><p>用户量很大之后，Session对象相应的也要创建很多。如果一味创建不释放，那么服务器端的内存迟早要被耗尽。</p><h4 id="_2设置时限的难点" tabindex="-1"><a class="header-anchor" href="#_2设置时限的难点" aria-hidden="true">#</a> ②设置时限的难点</h4><p>从服务器端的角度，很难精确得知类似浏览器关闭的动作。而且即使浏览器一直没有关闭，也不代表用户仍然在使用。</p><h4 id="_3服务器端给session对象设置最大闲置时间" tabindex="-1"><a class="header-anchor" href="#_3服务器端给session对象设置最大闲置时间" aria-hidden="true">#</a> ③服务器端给Session对象设置最大闲置时间</h4><ul><li>默认值：1800秒</li></ul><p><img src="`+f+'" alt="image.png"></p><p>最大闲置时间生效的机制如下：</p><p><img src="'+x+`" alt="image.png"></p><h4 id="_4代码验证" tabindex="-1"><a class="header-anchor" href="#_4代码验证" aria-hidden="true">#</a> ④代码验证</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// ※测试时效性</span>
<span class="token comment">// 获取默认的最大闲置时间</span>
<span class="token keyword">int</span> maxInactiveIntervalSecond <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMaxInactiveInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;maxInactiveIntervalSecond = &quot;</span> <span class="token operator">+</span> maxInactiveIntervalSecond<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 设置默认的最大闲置时间</span>
session<span class="token punctuation">.</span><span class="token function">setMaxInactiveInterval</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5强制session立即失效" tabindex="-1"><a class="header-anchor" href="#_5强制session立即失效" aria-hidden="true">#</a> ⑤强制Session立即失效</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>session<span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,62);function H(I,y){const e=c("ExternalLinkIcon");return o(),p("div",null,[q,n("p",null,[s("参考"),n("a",C,[s("会话控制demo原始纯净版"),i(e)])]),j])}const E=t(S,[["render",H],["__file","14、会话控制.html.vue"]]);export{E as default};
